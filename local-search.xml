<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DINet</title>
    <link href="/posts/33ad/"/>
    <url>/posts/33ad/</url>
    
    <content type="html"><![CDATA[<h2 id="dinet">DINet</h2><div class="line-block"><ahref="https://github.com/MRzzm/DINet">code</a> | <ahref="https://arxiv.org/abs/2303.03988">paper</a> |</div><figure><img src="../../../../image/paper/231031DINETauthor.png" alt="author" /><figcaption aria-hidden="true">author</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs citation">Zhimeng Zhang, Zhipeng Hu, Wenjin Deng, Changjie Fan, Tangjie Lv, and Yu Ding. 2023. DINet: deformation inpainting network for realistic face visually dubbing on high resolution video. In Proceedings of the Thirty-Seventh AAAI Conference on Artificial Intelligence and Thirty-Fifth Conference on Innovative Applications of Artificial Intelligence and Thirteenth Symposium on Educational Advances in Artificial Intelligence (AAAI&#x27;23/IAAI&#x27;23/EAAI&#x27;23), Vol. 37. AAAI Press, Article 395, 3543–3551. https://doi.org/10.1609/aaai.v37i3.25464<br></code></pre></td></tr></table></figure><h3 id="background-and-motivation">Background and Motivation</h3><p>对于<strong>少镜头学习</strong>来说，在<strong>高分辨率视频</strong>上实现逼真的人脸视觉配音仍然是一个严峻的挑战。以往的作品未能产生高保真的配音效果。为了解决上述问题，本文提出了一种用于高分辨率人脸视觉配音的变形修复网络（DINet）。</p><p>与之前依赖多个<strong>上采样层</strong>直接从<strong>潜在嵌入</strong>生成<strong>像素</strong>的工作不同，DINet对参考图像的<strong>特征图</strong>进行<strong>空间变形</strong>，以更好地保留<strong>高频纹理细节</strong>。</p><pre><code class=" mermaid">graph LRLE((潜在嵌入))--&gt;US(上采样层)--&gt;P((像素))RI((参考特征))--&gt;D(DINet_D)--&gt;DF((形变特征))</code></pre><h3 id="contribution-and-novelty">contribution and novelty</h3><p>DINet由 deformation 和 inpainting 组成。</p><p>在第一部分中，首先分别对源面部和驱动音频中的头部姿势和语音内容特征进行编码，然后利用这些特征对参考面部进行变形，五个参考面部图像自适应地执行空间变形，以创建逐帧编码嘴部形状的变形特征图，以便与输入驱动音频以及输入源图像的头部姿势对齐。</p><p>在第二部分中，为了产生面部视觉配音，特征解码器通过卷积层融合源面部特征和变形结果来修复源嘴部区域的像素，自适应地将来自变形特征图的嘴部运动和来自源特征图的其他属性（即头部姿势和上面部表情）合并在一起。</p><p>空间变形能够将嘴型与驱动音频同步，并将头部姿势与源面部对齐。变形操作将像素移动到适当的位置，而不是从头开始生成，因此它几乎保留了所有纹理细节。</p><figure><img src="../../../../image/paper/231031DINETframe.png" alt="DINet" /><figcaption aria-hidden="true">DINet</figcaption></figure><h4 id="deformation-part">Deformation Part</h4><p>给定一个源图像 <span class="math inline">\(I_{S}\in R^{3\timesH\times W}\)</span>，一个驱动音频 <span class="math inline">\(A_{d}\inR^{T\times 29}\)</span>（29 是音频特征的维度，使用deepspeechfeature）和五个参考图像 <span class="math inline">\(I_{ref}\inR^{15\times H\times W}\)</span> 。</p><p>将 <span class="math inline">\(A_{d}\)</span>输入到一个音频编码器中以提取音频特征 <spanclass="math inline">\(F_{audio}\in R^{128}\)</span>。 将 <spanclass="math inline">\(I_{S}\)</span> 和 <spanclass="math inline">\(I_{ref}\)</span>输入到<strong>两个不同</strong>的特征编码器中，提取源特征 <spanclass="math inline">\(F_{S}\in R^{256\times\frac{H}{4}\times\frac{W}{4}}\)</span> 和参考特征 <spanclass="math inline">\(F_{ref}\in R^{256\times\frac{H}{4}\times\frac{W}{4}}\)</span>。</p><p>连接 <span class="math inline">\(F_{S}\)</span> 和 <spanclass="math inline">\(F_{ref}\)</span>并输入到一个对齐编码器中，以计算对齐特征 <spanclass="math inline">\(F_{align}\in R^{128}\)</span>。<spanclass="math inline">\(F_{align}\)</span> 对 <spanclass="math inline">\(I_{S}\)</span> 和 <spanclass="math inline">\(I_{ref}\)</span>之间的<strong>头部姿势</strong>的对齐信息进行编码。最后，使用 <spanclass="math inline">\(F_{audio}\)</span> 和 <spanclass="math inline">\(F_{align}\)</span> 将 <spanclass="math inline">\(F_{ref}\)</span> 在空间上变形为 <spanclass="math inline">\(F_{d}\)</span>。</p><p>借助了 <span class="math inline">\(AdaAT\)</span> 实现空间变形，AdaAT可以通过进行特征通道特定的变形来使空间布局未对齐的特征图变形。AdaAT算子在不同的特征通道中计算不同的仿射系数。<spanclass="math inline">\(P^{D}\)</span> 中全连接层用于计算旋转系数 <spanclass="math inline">\(R=\{\theta^{c}\}^{256}_{c=1}\)</span>，平移 <spanclass="math inline">\(T_{x}=\{t^{c}_{x}\}^{256}_{c=1}/T_{y}=\{t^{c}_{y}\}^{256}_{c=1}\)</span>和尺度 <spanclass="math inline">\(S=\{s^{c}\}^{256}_{c=1}\)</span>。这些仿射系数用于<span class="math inline">\(F_{ref}\)</span> 的仿射变换： <spanclass="math display">\[\begin{bmatrix}\hat{x}_{c}\\\hat{y}_{c}\end{bmatrix}=\begin{bmatrix}s^{c}\cos(\theta^{c})&amp;s^{c}(-\sin(\theta^{c}))&amp;t_{x}^{c}\\s^{c}\sin(\theta^{c})&amp;s^{c}\cos(\theta^{c})&amp;t_{y}^{c}\end{bmatrix}\begin{bmatrix}x_{c}\\y_{c}\\1\end{bmatrix}\]</span></p><h4 id="inpainting-part">Inpainting Part</h4><p><span class="math inline">\(P^{I}\)</span> 的目标是从 <spanclass="math inline">\(F_{S}\)</span> 和 <spanclass="math inline">\(F_{d}\)</span> 生成配音图像 <spanclass="math inline">\(I_{o}\in R^{3\times H\times W}\)</span>。<spanclass="math inline">\(F_{S}\)</span> 和 <spanclass="math inline">\(F_{d}\)</span>在特征通道中连接起来，使用一个具有卷积层的特征解码器来修复被遮蔽的嘴巴并生成<span class="math inline">\(I_{o}\)</span>。</p><h4 id="loss-function">Loss Function</h4><p><strong>Perception Loss</strong>计算两个图像尺度的感知损失，将配音图像 <spanclass="math inline">\(I_{o}\)</span> 和真实图像 <spanclass="math inline">\(I_{r}\)</span> <ahref="../../../Concept/AI/采样.md#下采样（Downsampling）">下采样</a> 为<span class="math inline">\(\hat{I}_{o}\in R^{3\times \frac{H}{2}\times\frac{W}{2}}\)</span> 和 <span class="math inline">\(\hat{I}_{r}\inR^{3\times \frac{H}{2}\times \frac{W}{2}}\)</span>。然后，配对图像 <spanclass="math inline">\(\{I_{o}, I_{r}\}\)</span> 和 <spanclass="math inline">\(\{\hat{I}_{o}, \hat{I}_{r}\}\)</span>输入到一个预训练的 <span class="math inline">\(VGG\text{-}19\)</span>网络中以计算感知损失： <span class="math display">\[\mathcal{L}_{p}=\sum_{i=1}^{N}\frac{\parallelV_{i}(I_{o})-V_{i}(I_{r})\parallel_{1}+\parallelV_{i}(\hat{I}_{o})-V_{i}(\hat{I}_{r})\parallel_{1}}{2NW_{i}H_{i}C_{i}}\]</span> <span class="math inline">\(V_{i}(\cdot)\)</span> 表示 <spanclass="math inline">\(VGG\text{-}19\)</span> 第 <spanclass="math inline">\(i\)</span> 层的特征，而分母是对应的特征尺寸。</p><p><strong>GAN Loss</strong> 使用 <spanclass="math inline">\(LS\text{-}GAN\)</span> 损失： <spanclass="math display">\[\mathcal{L}_{D}=\frac{1}{2}E(D(I_{r})-1)^{2}+\frac{1}{2}E(D(I_{o})-0)^{2}\]</span> <span class="math display">\[\mathcal{L}_{G}=E(D(I_{o})-1)^{2}\]</span> <span class="math inline">\(G\)</span> 代表 DINet，<spanclass="math inline">\(D\)</span>代表判别器。我们在单帧和五个连续帧上使用 GAN 损失。</p><p><strong>Lip-sync loss</strong> 使用 <spanclass="math inline">\(sycnet\)</span> 作为同步衡量方法，使用 <spanclass="math inline">\(deepspeech\)</span>特征替换原来的频谱训练得到。同步损失如下： <span class="math display">\[\mathcal{L}_{sync}=E(sycnet(A_{d},I_{o})-1)^{2}\]</span></p><p>最后损失： <span class="math display">\[\mathcal{L}=\lambda_{p}\mathcal{L}_{p}+\lambda_{sycnet}\mathcal{L}_{sycnet}+\mathcal{L}_{D}+\mathcal{L}_{G}\]</span></p><h3 id="experiment">Experiment</h3><p><img src="../../../../image/paper/231101DINETsync.png" /></p><p><img src="../../../../image/paper/231101DINETencoder.png" /></p><p><img src="../../../../image/paper/231101DINETquantitative.png" /></p><p><img src="../../../../image/paper/231101DINETablation.png" /></p><p><img src="../../../../image/paper/231101DINETablaquan.png" /></p><h3 id="thinking">Thinking</h3><p>本文使用的是形变的方式来调整图像特征值，相较于重建像素的方法保留了更多的细节信息，很有利于生成高清晰度的结果。</p><p>使用修复源图像的方法而不是从特征直接重建，这个过程中引入有效的上面部的特征指导，避免上面部动作不合理。</p><p>DINet变形参考图像以修复源面部的嘴部区域，因此它无法处理多变的光照、动态背景、下垂的耳环、飘逸的头发和相机运动的条件。如果嘴部区域包含背景，则可能会产生面部伪影。因此，合成面部图像对参考图像的选择很敏感。</p>]]></content>
    
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>数字人</tag>
      
      <tag>2D</tag>
      
      <tag>talkingface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TalkingFace常用数据集</title>
    <link href="/posts/3fd5/"/>
    <url>/posts/3fd5/</url>
    
    <content type="html"><![CDATA[<h3 id="英文">英文</h3><p>AVSpeech</p><p>VoxCeleb</p><p>VoxCeleb2</p><p>LRW</p><p><ahref="https://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrs2.html">LRS2-BBC</a></p><p>LRS_TED</p><h3 id="中文">中文</h3><p><a href="http://cnceleb.org/">CN-CVS</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>data/dataset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>采样</title>
    <link href="/posts/d253/"/>
    <url>/posts/d253/</url>
    
    <content type="html"><![CDATA[<p>上采样和下采样是数字信号处理领域中常用的两种技术，用于改变信号的采样率，即每秒采集的样本数量。它们通常用于信号处理、图像处理和音频处理等领域，以实现不同的目标。</p><h3 id="上采样upsampling">上采样（Upsampling）</h3><p>上采样是一种增加信号采样率的过程，通常会在信号中插入额外的样本，以增加采样率。这意味着在原始采样点之间插入新的采样点，以提高信号的分辨率。上采样常用于信号恢复、图像放大、音频重采样等应用中。</p><h3 id="下采样downsampling">下采样（Downsampling）</h3><p>下采样是一种减小信号采样率的过程，通常会将一定数量的连续采样点合并为一个单一的采样点，以降低信号的采样率。这可以减小数据量和计算复杂性，但可能会损失一些信号信息。下采样常用于图像压缩、音频压缩、数据降维等应用中。</p><p>总之，上采样和下采样是数字信号处理中的重要技术，可用于调整信号的采样率以满足不同的需求，但需要谨慎使用，因为它们可能会引入失真或信息损失。</p>]]></content>
    
    
    
    <tags>
      
      <tag>media/audio</tag>
      
      <tag>sample</tag>
      
      <tag>media/image</tag>
      
      <tag>signal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乡土中国</title>
    <link href="/posts/69e1/"/>
    <url>/posts/69e1/</url>
    
    <content type="html"><![CDATA[<hr /><h1 id="元数据">元数据</h1><blockquote><p>[!abstract] 乡土中国 - <imgsrc="https://cdn.weread.qq.com/weread/cover/53/YueWen_651366/t7_YueWen_651366.jpg"alt="乡土中国|200" /> - 书名： 乡土中国 - 作者： 费孝通 - 简介：费孝通最知名的社会学著作之一，多年来深受学界和普通读者的一致推崇！如果说《江村经济》侧重讨论社会制度变革，那么《乡土中国》则在探讨与之相匹配的社会道德。这是费孝通对中国进行社会结构分析的尝试，他试图在理论上总结并开导实地研究，以构建中国社会特有的乡土伦理体系。沿着作者的思路，可以一窥中国的基层社会。虽然时移世易，但作者透视社会的眼光、观察社会的方法，在今天仍值得借鉴。- 出版时间 2012-10-01 00:00:00 - ISBN： 9787301174821 - 分类：社会文化-社科 - 出版社： 北京大学出版社 -PC地址：https://weread.qq.com/web/reader/22e32b3059f06622e6e5c85</p></blockquote><h1 id="高亮划线">高亮划线</h1><h2 id="重刊序言">重刊序言</h2><ul><li>📌这里收集的是我在四十年代后期，根据我在西南联大和云南大学所讲“乡村社会学”一课的内容，应当时《世纪评论》之约，而写成分期连载的十四篇文章。^651366-26-908-977<ul><li>⏱ 2023-10-31 21:25:41</li></ul></li><li>📌 作为中国基层社会的乡土社会究竟是个什么样的社会^651366-26-1893-1916<ul><li>⏱ 2023-10-31 21:23:33</li></ul></li><li>📌这里讲的乡土中国，并不是具体的中国社会的素描，而是包含在具体的中国基层传统社会里的一种特具的体系，支配着社会生活的各个方面。^651366-26-2245-2307<ul><li>⏱ 2023-10-31 21:26:33 ## 乡土本色</li></ul></li><li>📌 从基层上看去，中国社会是乡土性的。 ^651366-27-984-1001<ul><li>⏱ 2023-10-31 21:38:48</li></ul></li><li>📌 乡下人离不了泥土，因为在乡下住，种地是最普通的谋生办法。^651366-27-1209-1237<ul><li>⏱ 2023-10-31 21:45:32</li></ul></li><li>📌 三条大河的流域已经全是农业区 ^651366-27-1343-1357<ul><li>⏱ 2023-10-31 21:46:23</li></ul></li><li>📌据说凡是从这个农业老家里迁移到四围边地上去的子弟，也都是很忠实地守着这直接向土里去讨生活的传统。^651366-27-1361-1409<ul><li>⏱ 2023-10-31 21:46:34</li></ul></li><li>📌这样说来，我们的民族确是和泥土分不开的了。从土里长出过光荣的历史，自然也会受到土的束缚，现在很有些飞不上天的样子。^651366-27-1565-1622<ul><li>⏱ 2023-10-31 21:44:11</li></ul></li><li>📌 在数量上占着最高地位的神，无疑是“土地”。 ^651366-27-2072-2093<ul><li>⏱ 2023-10-31 21:47:32</li></ul></li><li>📌我初次出国时，我的奶妈偷偷地把一包用红纸裹着的东西，塞在我箱子底下。后来，她又避了人和我说，假如水土不服，老是想家时，可以把红纸包裹的东西煮一点汤喝。这是一包灶上的泥土。^651366-27-2140-2225<ul><li>⏱ 2023-10-31 21:47:54</li></ul></li><li>📌而种地的人却搬不动地，长在土里的庄稼行动不得，侍候庄稼的老农也因之像是半身插入了土里，土气是因为不流动而发生的。^651366-27-2374-2430<ul><li>⏱ 2023-10-31 21:49:33</li></ul></li><li>📌 乡村里的人口似乎是附着在土上的，一代一代的下去，不太有变动^651366-27-2598-2627<ul><li>⏱ 2023-10-31 21:49:06</li></ul></li><li>📌耕种活动中既不向分工专业方面充分发展，农业本身也就没有聚集许多人住在一起的需要了。我们看见乡下有大小不同的聚居社区，也可以想到那是出于农业本身以外的原因了。^651366-27-3241-3319<ul><li>⏱ 2023-10-31 21:59:29</li></ul></li><li>📌在社会学里，我们常分出两种不同性质的社会：一种并没有具体目的，只是因为在一起生长而发生的社会；一种是为了要完成一件任务而结合的社会。^651366-27-4461-4527<ul><li>⏱ 2023-10-31 21:58:09</li></ul></li><li>📌前者是“有机的团结”，后者是“机械的团结”。用我们自己的话说，前者是礼俗社会，后者是法理社会。^651366-27-4584-4631<ul><li>⏱ 2023-10-31 21:58:04</li></ul></li><li>📌熟悉是从时间里、多方面、经常的接触中所发生的亲密的感觉。这感觉是无数次的小磨擦里陶炼出来的结果。这过程是《论语》第一句里的“习”字。“学”是和陌生事物的最初接触，“习”是陶炼，“不亦悦乎”是描写熟悉之后的亲密感觉。在一个熟悉的社会中，我们会得到从心所欲而不逾规矩的自由。这和法律所保障的自由不同。规矩不是法律，规矩是“习”出来的礼俗。从俗即是从心。换一句话说，社会和个人在这里通了家。^651366-27-5112-5304<ul><li>⏱ 2023-10-31 22:05:48</li></ul></li><li>📌乡土社会的信用并不是对契约的重视，而是发生于对一种行为的规矩熟悉到不加思索时的可靠性。^651366-27-5588-5631<ul><li>⏱ 2023-10-31 22:07:49</li></ul></li><li>📌 这自是“土气”的一种特色 ^651366-27-5660-5672<ul><li>⏱ 2023-10-31 22:08:04</li></ul></li><li>📌一个老农看见蚂蚁在搬家了，会忙着去田里开沟，他熟悉蚂蚁搬家的意义。从熟悉里得来的认识是个别的；并不是抽象的普遍原则。在熟悉的环境里生长的人，不需要这种原则，他只要在接触所及的范围之中知道从手段到目的间的个别关联。在乡土社会中生长的人似乎不太追求这笼罩万有的真理。^651366-27-5846-5977<ul><li>⏱ 2023-10-31 22:09:20</li></ul></li><li>📌陌生人所组成的现代社会是无法用乡土社会的习俗来应付的。于是，“土气”成了骂人的词汇，“乡”也不再是衣锦荣归的去处了。^651366-27-6236-6294<ul><li>⏱ 2023-10-31 22:10:33 # 读书笔记</li></ul></li></ul><h1 id="本书评论">本书评论</h1>]]></content>
    
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>社会文化-社科</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对比学习损失</title>
    <link href="/posts/a7a1/"/>
    <url>/posts/a7a1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/506544456">对比学习损失</a></p><p><ahref="https://www.bilibili.com/video/BV1C3411s7t9/?vd_source=bab75b3ccf1b5ff4356ab5c39c33eca7">MoCo论文逐段精读</a> 35:42</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>损失函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>loss</tag>
      
      <tag>reward</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用于细粒度可控头部说话合成的渐进式解耦表示学习</title>
    <link href="/posts/c6e8/"/>
    <url>/posts/c6e8/</url>
    
    <content type="html"><![CDATA[<h2id="用于细粒度可控头部说话合成的渐进式解耦表示学习">用于细粒度可控头部说话合成的渐进式解耦表示学习</h2><div class="line-block">code | <ahref="https://openaccess.thecvf.com/content/CVPR2023/html/Wang_Progressive_Disentangled_Representation_Learning_for_Fine-Grained_Controllable_Talking_Head_Synthesis_CVPR_2023_paper.html">paper</a>|</div><p><img src="../../../../image/paper/231030dis.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs citation">Duomin Wang, Yu Deng, Zixin Yin, Heung-Yeung Shum, and Baoyuan Wang. Progressive Disentangled Representation Learning for Fine-Grained Controllable Talking Head Synthesis. Proceedings of the IEEE/CVF Conference on Computer Vision and Pattern Recognition, 2023, pp. 17979–17989.<br></code></pre></td></tr></table></figure><h3 id="background-and-motivation">Background and Motivation</h3><p>头部说话合成是创建逼真视频头像必不可少的任务，研究人员利用深度学习技术在<ahref="../../../Concept/AI/机器学习/迁移学习.md#One-shot%20Learning">One-shot</a>生成生动头像方面取得了巨大进展。相应的方法主要可以分为音频驱动的头颅合成和视频驱动的人脸重现。音频驱动方法更注重从音频信号中准确合成<strong>嘴唇运动</strong>。视频驱动的方法旨在将源视频中的所有面部动作忠实地传输到目标身份，并且通常将这些动作视为<strong>一个整体</strong>，而无需单独控制。</p><p>我们认为，对多个面部运动的细粒度和解耦控制是实现逼真的头部说话的关键，在给定相应的驱动信号的情况下，我们可以分别控制<strong>嘴唇运动、头部姿势、眼睛运动和表情</strong>。</p><p>在真实场景中，我们想要修改已经合成的会说话的头部的目光，如果我们不能仅仅改变它而是要求演员执行全新的驱动动作，那么成本可能会很高。然而，以一种解耦的方式控制所有这些因素是非常具有挑战性的。例如，嘴唇动作本质上与情绪高度纠缠在一起，而同一言语在不同情绪下的嘴部动作可能会有所不同。</p><h3 id="contribution-and-novelty">contribution and novelty</h3><p>本文提出了渐进式解缠结细粒度可控说话头（PD-FGC），用于 one-shot头部说话生成，对嘴唇运动、头部姿势、眼睛凝视和眨眼以及情绪表达进行解缠结控制。</p><p>其中嘴唇运动的控制信号来自音频，所有其他动作都可以由不同的视频单独驱动。</p><p>为此，我们的直觉是学习每个<strong>运动因子</strong>的解开<strong>潜在表示</strong>，并利用图像生成器以这些潜在表示作为输入来合成会说话的头像。</p><p>在现有现有模型的帮助下充分利用视频数据中每个运动的固有属性。我们设计了一种渐进式解纠缠表示学习策略，根据各个因素的各自属性以从粗到细的方式分离每个因素控制。它由三个阶段组成：1.将外观与面部运动解开，获得记录所有运动信息的<strong>统一运动表示</strong>；2.通过<strong>运动特定对比学习</strong>从统一运动特征中分离出除表情之外的每个细粒度面部运动；3.通过<strong>特征级去相关</strong>将表情与其他动作分开，并同时学习用于细粒度可控头部说话合成的图像生成器。</p><h4 id="外观与运动解耦">外观与运动解耦</h4><p>为了实现对多个细粒度运动因素的解耦，首要任务是学习一个统一的运动表示，记录各种运动信息，同时排除外观（即身份）信息。</p><p>引入外观编码器 <span class="math inline">\(E_{app}\)</span>和运动编码器 <span class="math inline">\(E_{mot}\)</span>分别从<strong>外观图像</strong>和<strong>驱动帧</strong>中提取相应的<strong>特征</strong>。应用额外的生成器<span class="math inline">\(G_{0}\)</span>来合成具有外观图像的身份和驱动帧的面部运动的面部图像。应用自驱动和重建来学习整个流程，其中将数据增强引入到运动分支中，以迫使运动编码器忽略外观变化并仅关注运动提取。</p><p><span class="math display">\[\mathcal{L}_{m ot}=||\phi(I_{0})-\phi(I_{g})||_{2}+||\psi(I_{0})-\psi(I_{g})||_{2}\]</span></p><p><span class="math inline">\(\phi(\cdot)\)</span> 和 <spanclass="math inline">\(\psi(\cdot)\)</span>是使用3D重构网络和情绪网络提取的特征。<spanclass="math inline">\(I_{0},I_{g}\)</span> 分别是生成的图像和原图。</p><p><img src="../../../../image/paper/231030DISstage12.png" /></p><h4 id="细粒度运动解耦">细粒度运动解耦</h4><p>引入了三个额外的编码器来进一步从<strong>统一运动表示</strong>中提取细粒度的运动特征，包括<strong>嘴唇运动特征</strong>、<strong>眼睛注视和眨眼特征</strong>以及<strong>头部姿势特征</strong>。</p><p><strong>嘴唇运动对比学习</strong>通过探索统一运动特征和相应语音音频之间的共享信息，可以将嘴唇运动与其他运动很好地分开。</p><p>给定一组视频帧 <span class="math inline">\(\{v_{i}\}\)</span>及其对应的音频信号 <spanclass="math inline">\(\{a_{i}\}\)</span>，我们引入唇动编码器 <spanclass="math inline">\(E_{lip}\)</span> 和音频编码 <spanclass="math inline">\(E_{aud}\)</span>，并提取唇动特征<spanclass="math inline">\(\{f^{v}_{i}\}=\{E_{lip} \circE_{mot}(v_{i})\}\)</span>和音频特征<spanclass="math inline">\(\{f^{a}_{i}\}=\{E_{aud}(a_{i})\}\)</span>，其中<span class="math inline">\(E_{mot}\)</span>是前一阶段的预训练运动编码器。然后，我们为每个采样的音频特征 <spanclass="math inline">\(f^{a}_{i}\)</span> 构造一个正音视频对<spanclass="math inline">\((f^{a}_{i},f^{v}_{i})\)</span>和 <spanclass="math inline">\(K\)</span> 个负音视频对 <spanclass="math inline">\((f^{a}_{i},f^{v}_{k}),k\nei\)</span>，反之亦然。引入 <ahref="../../../Concept/AI/损失函数/对比学习损失.md">对比学习损失</a>来最大化正样本对相似度和最小化负样本对相似度：</p><p><spanclass="math display">\[\mathcal{L}_{a2v}=-\mathrm{log}[\frac{\exp(\mathcal{S}(f_{i}^{a},f_{i}^{v}))}{\exp(\mathcal{S}(f_{i}^{a},f_{i}^{v}))+\sum_{k=1}^{K}{\exp(\mathcal{S}(f_{i}^{a},f_{k}^{v}))}}]\]</span><spanclass="math display">\[\mathcal{L}_{v2a}=-\mathrm{log}[\frac{\exp(\mathcal{S}(f_{i}^{v},f_{i}^{a}))}{\exp(\mathcal{S}(f_{i}^{v},f_{i}^{a}))+\sum_{k=1}^{K}{\exp(\mathcal{S}(f_{i}^{v},f_{k}^{a}))}}]\]</span></p><p><span class="math inline">\(\mathcal{S}(\cdot)\)</span> 是 <ahref="../../../Concept/相似度/余弦相似度.md">余弦相似度</a>。对比损失确保了对应的音视频提取的运动特征接近彼此，有助于分解嘴唇特征。</p><p><strong>眼睛运动对比学习</strong>眼睛运动，是局部运动，对其他面部区域的影响有限。因此，从用一个人的眼部区域替换另一个人的眼部区域来合成的新图像提取的眼动特征应该与后一个人的眼动特征相同。</p><p>给定两个驱动帧，<span class="math inline">\(v_{1}\)</span> 和 <spanclass="math inline">\(v_{2}\)</span>，通过合成 <spanclass="math inline">\(v_{1}\)</span> 的眼睛区域和 <spanclass="math inline">\(v_{2}\)</span> 的其他区域来构造锚点帧 <spanclass="math inline">\(v_{a}\)</span>。使用编码器 <spanclass="math inline">\(E_{eye}\)</span>来从上述三帧对应的统一运动表示中提取眼部运动特征 <spanclass="math inline">\(f_{1}, f_{2}, f_{a}\)</span>，构造正对 <spanclass="math inline">\((f_{1}, f_{a})\)</span> 和负对 <spanclass="math inline">\((f_{2}, f_{a})\)</span>，引入对比学习损失： <spanclass="math display">\[\mathcal{L}_{eye}=-\mathrm{log}[\frac{\exp(\mathcal{S}(f_{1},f_{a}))}{\exp(\mathcal{S}(f_{1},f_{a}))+\exp(\mathcal{S}(f_{2},f_{a}))}]\]</span></p><p><strong>头部姿势学习</strong>头部姿势可以通过由三个欧拉角（即俯仰角、偏航角、滚动角）和 3D 平移组成的6D 参数来很好地定义，因此我们建议在 3D面部先验模型的指导下通过头部姿势编码器 <spanclass="math inline">\(E_{pose}\)</span> 直接对它们进行回归： <spanclass="math display">\[\mathcal{L}_{pose}=|\mathcal{P}_{pred}-\mathcal{P}_{gt}|_{1}\]</span>其中 <span class="math inline">\(\mathcal{P}_{pred}\)</span> 是 <spanclass="math inline">\(E_{pose}\)</span> 预测的姿态参数，<spanclass="math inline">\(\mathcal{P}_{gt}\)</span> 是通过现成的 3D人脸重建模型获得的真实姿态参数。</p><h4 id="表情解耦">表情解耦</h4><p><img src="../../../../image/paper/231030DISstage3.png" /></p><p>假设提取的表情特征独立于其他动作的特征，同时它与其他动作的组合仍然可以重建驱动信号中的所有面部动作，那么它就是地面表情的精确潜在表示。</p><p>提出了一种特征级去相关策略，以将表情与其他动作分开，以及驱动帧的自我重建，以互补的方式学习精确的表情表示。</p><p><strong>In-window decorrelation</strong>视频序列中的表情变化通常不如其他动作的变化频繁。因此，如果我们在一个时间窗口内取<strong>平均</strong>表情特征，那么存储在表情特征的特定维度中的其他运动信息应该被平均掉，从而得到与其他运动不相关的干净的表情特征。^PDFGCTHavg</p><p>给定一个驱动帧，我们在其周围定义一个大小为 <spanclass="math inline">\(K\)</span>的窗口，并通过随机旋转、缩放和颜色抖动来增强窗口内的帧。通过表情特征编码器<span class="math inline">\(E_{exp}\)</span>提取序列表情特征，取平均值作为<strong>中间驱动帧</strong>的<strong>表情特征</strong>。</p><p><strong>Lip-motion decorrelation</strong>引入了嘴唇运动去相关损失，通过强制表情特征和嘴唇运动特征之间的独立性来实现更好的表情解耦：<spanclass="math display">\[\mathcal{L}_{decor}={\frac{1}{D}}\sum_{B,D}cor(\bar{F^{e}},F^{a})^{2}\]</span>其中 <span class="math inline">\(\bar{F^{e}}\in \mathbb{R}^{B\timesD}\)</span> 是 <span class="math inline">\(B\)</span>个批次的平均表情特征组成的矩阵，<span class="math inline">\(F^{a}\in\mathbb{R}^{B\times D}\)</span> 是对应的音频特征矩阵，<spanclass="math inline">\(D\)</span> 是特征维度，<spanclass="math inline">\(cor(\cdot,\cdot)\)</span>计算两个矩阵之间的特征维度相关性。</p><p>计算两个变量之间的相关性需要大批量才能达到足够的精度。由于内存限制，在训练过程中很难做到足够大的批大小。</p><p>为了解决这个问题，为表情特征和音频特征维护两个存储库用于计算相关性，而不是仅使用当前批次的特征。存储体始终将<span class="math inline">\(M\)</span>个最新特征保存在内部以计算相关性。</p><p>训练期间，<span class="math inline">\(M\)</span>远大于每次迭代的批大小。梯度只会通过当前批次的特征反向传播来更新网络权重。</p><p><strong>Complementary learning via self-reconstruction</strong>上述两种去相关策略保证了表情与其他动作之间的特征<strong>独立性</strong>，但提取的表情特征仍然<strong>缺乏语义意义</strong>。</p><p>利用图像生成器<spanclass="math inline">\(G\)</span>将表情特征以及外观和其他运动特征作为输入，并通过驱动帧的自重建来合成具有所需面部运动的图像。</p><p>为了准确重建驱动帧，表情编码器被迫学习所有其他运动特征中未包含的补充信息，这正是表情信息。我们强制执行多个损失来学习表达编码器<span class="math inline">\(E_{exp}\)</span> 和图像生成器 <spanclass="math inline">\(G\)</span> : <spanclass="math display">\[\mathcal{L}_{vgg}=\sum_{i=1}^{N}{\parallelVGG_{i}(I_{f})-VGG_{i}(I_{g})\parallel_{1}}\]</span> <spanclass="math inline">\(VGGi(\cdot)\)</span> 是预训练 <spanclass="math inline">\(VGG19\)</span> 网络中第 <spanclass="math inline">\(i\)</span>层的特征图。引入对抗性损失和鉴别器特征匹配损失来提高合成图像质量。</p><p>为了确保合成图像很好地跟随驱动帧的所有面部运动，进一步引入了运动级一致性损失：<spanclass="math display">\[\mathcal{L}_{con}=\mathrm{exp}(-\mathcal{S}(\mathcal{V}_{lip}(I_{f}),E_{aud}(a_{g})))+\parallel\mathcal{G}(I_{f}),\mathcal{G}(I_{g})\parallel_{1}+\mathcal{L}_{mot}\]</span> <span class="math inline">\(E_{aud}\)</span>是前面训练的音频编码器，<spanclass="math inline">\(\mathcal{V}_{lip}\)</span>是预训练的从图像提取嘴唇运动特征的编码器，<spanclass="math inline">\(\mathcal{G}(I)\)</span> 是凝视估计器，<spanclass="math inline">\(I_{f},I_{g},a_{g}\)</span>分别是合成图像，真实图像以及对应的真实音频。</p><p>上述自重建过程与特征级去相关策略一起有助于将表情特征与统一运动特征分开。此外，这一步学习到的图像生成器<spanclass="math inline">\(G\)</span>自然地以所有解耦的运动特征和外观特征作为输入，实现了解耦的可控头部合成。因此，将<span class="math inline">\(G\)</span>作为头部合成的最终图像生成器。</p><h3 id="experiment">Experiment</h3><p><img src="../../../../image/paper/231030DISquantitative.png" /></p><p><spanclass="math display">\[NLSE-C=\frac{LSE\text{-}C^{gen}-LSE\text{-}C^{gt}}{LSE\text{-}C^{gt}}\]</span></p><p><img src="../../../../image/paper/231030DISacc.png" /></p><p><img src="../../../../image/paper/231030DISuser.png" /></p><h3 id="thinking">Thinking</h3><p>infoNCE Loss使得无监督在视觉领域能力大大提升。本文在对不同运动特征进行解耦时候使用了多次这个损失函数。作为对比学习损失的一种，通过巧妙设置正负样本对，可以实现灵活的功能。</p><p><ahref="用于细粒度可控头部说话合成的渐进式解耦表示学习.md#%5EPDFGCTHavg">窗口去关联</a>采用平均的方法，有一定道理。</p><p>在现有现有模型的帮助下充分利用视频数据中每个运动的固有属性。本文使用了多个现有模型，<spanclass="math inline">\(VGG19,\mathcal{G}(I),\mathcal{V}_{lip},\phi(\cdot),\psi(\cdot)\)</span>，充分使用了数据的信息。</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
      <category>语音驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>数字人</tag>
      
      <tag>2D</tag>
      
      <tag>talkingface</tag>
      
      <tag>disentangle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迁移学习</title>
    <link href="/posts/156/"/>
    <url>/posts/156/</url>
    
    <content type="html"><![CDATA[<p>迁移学习的两种极端形式是一次学习( one-shot learning)和零次学习(zero-shot learning)，有时也被称为零数据学习( zero-datalearning)。只有一个标注样本的迁移任务被称为一次学习，没有标注样本的迁移任务被称为零次学习。</p><h3 id="one-shot-learning">One-shot Learning</h3><p>"one-shotlearning"（一次学习）是一种特殊的监督学习方法，其主要目标是通过仅有<strong>一个或非常有限</strong>的示例来识别或分类<strong>新的对象</strong>或类别。在传统的机器学习方法中，通常需要大量的训练数据来训练模型，但在一些现实场景中，获取大量标记数据可能是不切实际的，或者新的类别可能会<strong>不断出现</strong>。</p><p>"One-shot learning"的核心挑战是使模型具有<strong>泛化能力</strong>，能够从极少的示例中学到关于<strong>新类别的特征和模式</strong>。</p><p>因为第一阶段学习出的表示就可以清楚地<strong>分离出潜在的类别</strong>，所以一次学习是可能的。在迁移学习阶段，仅需要一个标注样本来推断<strong>表示空间</strong>中聚集在相同点周围许多可能测试样本的标签。这使得在学成的表示空间中，对应于不变性的变化因子已经与其他因子完全分离，在区分某些类别的对象时，我们可以学习到哪些因素具有决定意义。</p><h3 id="zero-shot-learning">Zero-shot Learning</h3><p>考虑一个零次学习情景的例子，学习器已经读取了大量文本，然后要解决对象识别的问题。如果文本足够好地描述了对象，那么即使没有看到某对象的图像，也能识别出该对象的类别。例如，已知猫有四条腿和尖尖的耳朵，那么学习器可以在没有见过猫的情况下猜测该图像中是猫。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>AI/ML</tag>
      
      <tag>transfer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字人驱动</title>
    <link href="/posts/253c/"/>
    <url>/posts/253c/</url>
    
    <content type="html"><![CDATA[<p>语音驱动是一种常见的3D数字人驱动方式，就是将语音作为驱动源，三维人脸模型作为驱动目标，采用某种深度学习模型，产生三维人脸动画。具体的语音驱动方式有三种：</p><ol type="1"><li>语音驱动。将语音输入到深度模型，预测嘴型和面部微表情系数。该方法不受限于不同人、国家，但是受到语音特性（音色、强度、噪声等）影响较大，较难提升模型的泛化能力。<ol type="1"><li>直接预测mesh序列信息</li><li>预测表情系数或者blendshape系数，最后线性相加合成mesh序列</li></ol></li><li>音素驱动。文本作为驱动源头。将文本时间序列转换成音素时间序列，并输入到深度模型，预测嘴型和面部微表情系数。该此方法与语音无关，只与文本内容相关，不受语音特性变换影响。但是模型受限于不同国家的文本语言（中英等）；同一文本内容、不同类型的合成声音，最后合成的口型及面部表情相似度高，缺乏风格和特性。<ol type="1"><li>规则方法：按照不同音素发音的方式设定时间平滑规则，使得产生流畅的表情动作。</li><li>深度模型方法：和语音驱动方法类似，需要构建音素到表情系数的映射关系。</li></ol></li><li>语音和音素多模融合驱动。语音和音素同时作为驱动源头。该方法融合语音和文本两个模态的信息，驱动系数更准确，效果更好，但模型更复杂。</li></ol><h2 id="audio2face">Audio2face</h2><h3id="audio-driven-facial-animation-by-joint-end-to-end-learning-of-pose-and-emotion-2017">Audio-DrivenFacial Animation by Joint End-to-End Learning of Pose and Emotion2017</h3><p>该文提出了一种端到端的卷积网络，从输入的音频直接推断人脸表情变化对应的顶点位置的偏移量。为了解决声音驱动过程中，情绪变化对表情驱动效果的影响，网络自动从数据集中学习情绪状态潜变量。推理阶段，可将情绪潜变量作为用户输入控制参数，从而输出不同情绪下的说话表情。<img src="../../../../image/paper/231029010.png" alt="image.png" />输入：大约半秒的音频 输出：与音频窗口中心对应的固定拓扑网格的 3D顶点位置辅助输入：情绪状态（网络自动从数据集中学习情绪状态潜变量，无需任何形式的预先标记）</p><h3id="capture-learning-and-synthesis-of-3d-speaking-styles-2019">Capture,Learning, and Synthesis of 3D Speaking Styles 2019</h3><p><img src="../../../../image/paper/231029011.png" alt="image.png" />输入：音频、静态3D人脸模板 输出：60fps 3D mesh。语音特征提取：采用DeepSpeech模型。编码网络：加入了身份信息，拼接one-hot向量到语音特征上。解码网络：最后的fc层，输出5023*3个顶点的偏移量，加上模板平均脸，得到说话的表情脸。<img src="../../../../image/paper/231029012.png" alt="image.png" /></p><h3id="meshtalk-3d-face-animation-from-speech-using-cross-modality-disentanglement-2021">MeshTalk:3D Face Animation from Speech using Cross-Modality Disentanglement2021</h3><p>输入：一段音频，一个中性的3D人脸mesh输出：一段带嘴形和眼部运动的3D人脸动画核心是面部动画的分类潜在空间，它基于一种新的交叉模态损失来解耦音频相关和音频不相关的信息<img src="../../../../image/paper/231029013.png" alt="image.png" /></p><h3id="faceformer-speech-driven-3d-facial-animation-with-transformers-2022">FaceFormer:Speech-Driven 3D Facial Animation with Transformers 2022</h3><p>偏置交叉模态多头（MH）注意力和具有周期性位置编码策略的偏因果MH自注意。前者有效地对齐音频运动模式，而后者提供了推广到更长音频序列的能力。输入：一段音频，一个中性的3D人脸mesh 输出：一段带嘴形运动的3D人脸动画。<img src="../../../../image/paper/231029014.png" alt="image.png" /></p><h2 id="phoneme2face">Phoneme2face</h2><h3id="visemenet-audio-driven-animator-centric-speech-animation-2018">VisemeNet:Audio-Driven Animator-Centric Speech Animation 2018</h3><p><img src="../../../../image/paper/231029015.png" alt="image.png" />因此，我们提出了一个三阶段网络架构：一个学习从音频预测一系列音素组的架构;另一个学习从音频中预测重要面部特征点的几何位置;最后一个阶段是学习使用音素组和面部特征点来生成JA-LI 参数值和稀疏语音运动曲线，使面部动画化。</p><h3id="a-deep-learning-approach-for-generalized-speech-animation-2017">ADeep Learning Approach for Generalized Speech Animation 2017</h3><p><img src="../../../../image/paper/231029016.png" alt="image.png" />从音素 <span class="math inline">\(x\)</span> 的逐帧序列开始作为输入。</p><p>我们将 <span class="math inline">\(x\)</span>转换为一系列重叠的固定长度输入<spanclass="math inline">\((\hat{x_{1}},\hat{x_{2}},...)\)</span></p><p>我们应用学习到的预测器对每个<spanclass="math inline">\(\hat{x_{c}}\)</span>进行预测</p><p>导致一系列重叠的固定长度输出<spanclass="math inline">\((\hat{y_{1}},\hat{y_{2}},...)\)</span></p><p>我们通过逐帧平均来混合<spanclass="math inline">\((\hat{y_{1}},\hat{y_{2}},...)\)</span></p><p>以达到最终输出<span class="math inline">\(y\)</span></p><h3id="write-a-speaker-text-based-emotional-and-rhythmic-talking-head-generation">Write-a-speaker:Text-based Emotional and Rhythmic Talking-head Generation</h3><p>本文首次提出了从文字生成说话人脸视频的算法框架，除了音视频同步的口型，还同时生成了与说话内容匹配的面部表情和与说话节奏匹配度韵律头动。本文的算法由两个阶段组成：第一阶段与特定说话人无关，包括三个并行网络，分别用于生成口型、眉眼表情和头部运动三组动作参数；第二阶段合成特定说话人视频，基于三维人脸信息监督的自适应注意力网络来生成不同特定人的说话视频，此阶段以动作参数作为输入，生成注意力掩码来修改不同说话人的面部表情变化。<img src="../../../../image/paper/231029017.png" alt="image.png" />由于嘴巴动画主要有助于说出音素而不是语义结构，因此 Gmou 学习了从 ph 到mmou 的映射 第一步是在更灵活的空间中将 ph 从音素空间转换为嵌入向量Eph。我们构建了一个可训练的查找表（Tang等人，2014）Vph来实现目标，该表在训练阶段随机初始化和更新。然后，堆叠的Res1D层以Eph为输入，根据共发音效果输出合成口参数序列mmou。我们基于CNN而不是LSTM设计结构，以实现并行计算的好处。我们应用L1损失和LSGAN损失（Maoet al. 2017）来训练Gmou。</p><p><img src="../../../../image/paper/231029018.png" alt="image.png" />虽然嘴部动作有助于言语共同发音，但上面部表情和头部动作倾向于传达情感、意图和言语节奏。因此，Gupp和 Ghed 旨在从 w 而不是 ph捕获更长时间的依赖性。它们共享相同的网络，与Gmou的网络不同，如图5所示。与V ph 类似，可训练查找表 V txt 将 w 映射到嵌入向量Etxt。为了生成具有一致情绪的mupp，情绪标签（惊讶，愤怒，中性，幸福）要么由文本情感分类器检测（Yang等人，2019），要么明确分配给特定的情绪类型。另一个可训练的查找表V emo 将情感标签投影到嵌入向量Eemo。Etxt和Eemo被馈送到编码器-解码器网络以合成mupp。得益于较大的感受野，编码器-解码器结构可捕获单词之间的长期依赖关系。</p><h3id="listen-denoise-action-audio-driven-motion-synthesis-with-diffusion-models">Listen,Denoise, Action! Audio-Driven Motion Synthesis with DiffusionModels</h3>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
      <category>语音驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>3D</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>数字人</tag>
      
      <tag>2D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>唇读专家</title>
    <link href="/posts/5f49/"/>
    <url>/posts/5f49/</url>
    
    <content type="html"><![CDATA[<h2id="seeing-what-you-said-talking-face-generation-guided-by-a-lip-reading-expert">SeeingWhat You Said: Talking Face Generation Guided by a Lip ReadingExpert</h2><div class="line-block"><ahref="https://github.com/Sxjdwang/TalkLip">code</a> | <ahref="https://arxiv.org/abs/2303.17480">paper</a> |</div><p><img src="../../../../image/paper/231029008.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs citation">Jiadong Wang, Xinyuan Qian, Malu Zhang, Robby T. Tan, and Haizhou Li. 2023. Seeing What You Said: Talking Face Generation Guided by a Lip Reading Expert. DOI:[https://doi.org/10.48550/arXiv.2303.17480](https://doi.org/10.48550/arXiv.2303.17480)<br></code></pre></td></tr></table></figure><p>会说话的面部生成，也称为语音到嘴唇生成，在给定<strong>连贯的语音输入</strong>的情况下<strong>重建有关嘴唇的面部运动</strong>。</p><h3 id="motivation-and-contribution">Motivation and contribution</h3><p>先前的研究揭示了唇语同步和视觉质量的重要性，但他们很少关注嘴唇动作的内容，即<strong>所说单词的视觉清晰度</strong>。</p><ul><li>使用<strong>Lip-ReadingExpert</strong>通过<strong>惩罚不正确</strong>的生成结果来提高生成的唇部区域的清晰度。</li><li>为了弥补数据稀缺，我们以 audio-visual自监督的方式训练<strong>Lip-Reading Expert</strong>。</li><li>与<strong>Lip-ReadingExpert</strong>一起，提出了一种新颖的对比学习来增强唇语同步和一个Transformer Encoder来编码与视频同步的音频，同时考虑音频的全局时间依赖性</li></ul><figure><img src="../../../../image/paper/231029talklip.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>TalkLip网络的框图，该网络在给定连贯的语音输入、身份和姿势输入的情况下生成说话的面孔。该网络由：一个用于音素级特征提取的<strong>音频编码器</strong>；一个提取身份和姿势信息的<strong>视频编码器</strong>；一个以真实/合成的面部图像为条件的**GAN<strong>；一个来惩罚唇读错误的新颖的后端</strong>唇读专家<strong>组成。整个网络通过</strong>四重损失**进行优化，标记为黄色矩形。</p><h3 id="lip-reading-expert">lip-reading expert</h3><p>唇读系统的目标是从视频中的<strong>唇形动作转录单词</strong>序列。为了解决<strong>数据稀缺</strong>的问题，采用<strong>AV-Hubert</strong>来拥有可靠的唇读专家，这是一种<strong>自监督</strong>的方法，该方法在唇读，语音识别和视听语音识别方面产生了SOTA性能。</p><figure><img src="../../../../image/paper/231029avhubert.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>Visual frontend 由用于捕获局部唇部运动的3D　CNN　和2DResNet-18组成。Modality selector通过屏蔽无参与模态的特征来确定纯音频、纯视频或视听语音识别系统的训练。所有系统共享相同的TransformerEncoder，并使用相同的逐帧伪标签进行回归。因此，音频和视觉上下文功能是同步的。AV-Hubert还提供了一个<strong>同步语音识别系统</strong>，其编码器考虑了<strong>长期的时间依赖性</strong>，我们采用这种编码器对音频输入进行编码。</p><h3 id="audio-encoder">Audio encoder</h3><p>音频编码器用于对<strong>音素级嵌入</strong>进行编码，并将嵌入提供给生成器作为嘴型和嘴唇运动的参考。使用<strong>两个不同的音频编码器</strong>来提取嵌入。我们称它们为<strong>本地</strong>和<strong>全局</strong>音频嵌入。</p><figure><img src="../../../../image/paper/231029audio_encoder.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>本地音频嵌入是使用基于 CNN的网络提取的。一个0.2秒的音频片段，其中心与姿势参考同步，作为输入。但是，0.2秒的音频片段不包含整个语音的时间变化。采用与唇读专家共同训练的TransformerEncoder。TransformerEncoder将<strong>整个语音</strong>作为输入，以生成所有帧的音频上下文特征。然后，我们选择上下文特征的帧，这些帧与姿势参考在时间上对齐，作为全局音频嵌入。</p><h3 id="video-encoder">Video encoder</h3><p>视频编码器是从图像中提取身份和姿势信息以统一视觉嵌入，并将嵌入提供给生成器以合成与所提供的身份和姿势一致的图像。视觉嵌入是从两个图像中提取的：身份引用和姿势引用。姿势参考与目标面部图像相同，只是它遮盖了下半张脸，以防止我们的TalkLip网络学习嘴唇区域的动作。在同一视频序列中随机选取身份引用。两个参考在通道维度中连接起来作为视觉输入，并馈送到基于CNN 的视频编码器。</p><figure><img src="../../../../image/paper/231029video_encoder.png"alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="video-generation">Video generation</h3><p>生成器在给定音频嵌入和视频嵌入的情况下构建说话人脸图像。生成器由转置的CNN块组成。给定合成的说话人脸图像和地面实况图像，应用<strong>两重损耗</strong>来提高视频生成质量，即重建损耗，GAN损失。<spanclass="math display">\[\mathcal{L}_{rec}=\frac{1}{N_{i}}\sum_{i}^{N_{i}}\lvertv_{i}-v_{i}&#39; \rvert\]</span> <spanclass="math display">\[\mathcal{L}_{gen}=\mathbb{E}[\log{(1-D(v&#39;)}]\]</span><spanclass="math display">\[\mathcal{L}_{disc}=\mathbb{E}[\log{(1-D(v))}]+\mathbb{E}[\log{(D(v&#39;)}]\]</span></p><figure><img src="../../../../image/paper/231029con_loss.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="lip-reading-loss">Lip reading loss</h3><p>将所有帧以比例p随机采样一组起始帧，其后续M帧将被v′替换。通过这种方式，考虑了v′ 内以及 v 和 v′ 之间的嘴唇运动。<spanclass="math inline">\(\mathcal{L}_{lip}=-Y\log{P(\hat{Y}|V)}\)</span></p><figure><img src="../../../../image/paper/231029lip_loss.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h3 id="contrastive-loss">Contrastive loss</h3><p>给定来自音频编码器的音频嵌入 Ea 和来自唇读专家的视觉上下文特征R，计算对比损失 <spanclass="math display">\[\theta(x,x&#39;)=exp(\mathcal{F}(x)\cdot\mathcal{F}(x&#39;)/\tau),\]</span><span class="math display">\[\mathcal{L}_{av}=-\sum_{i\in\Upsilon}{\log{\frac{\theta(E_{i}^{a},R_{i})}{\theta(E_{i}^{a},R_{i})+\sum_{j\in\Upsilon\\i\neq j}\theta(E_{i}^{a},E_{j}^{a})}}} \]</span> <spanclass="math display">\[\mathcal{L}_{t}=\lambda_{l}\mathcal{L}_{lip}+\lambda_{c}\mathcal{L}_{av}+\lambda_{r}\mathcal{L}_{rec}+\lambda_{g}\mathcal{L}_{gan}\]</span></p><h3 id="experiment">Experiment</h3><p><img src="../../../../image/paper/231029data_result.png"alt="image.png" /> <imgsrc="../../../../image/paper/231029eval_result.png"alt="image.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
      <category>语音驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>数字人</tag>
      
      <tag>2D</tag>
      
      <tag>talkingface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SyncTalkFace</title>
    <link href="/posts/c16a/"/>
    <url>/posts/c16a/</url>
    
    <content type="html"><![CDATA[<h2 id="title">title</h2><div class="line-block">code | <ahref="https://ojs.aaai.org/index.php/AAAI/article/view/20102">paper</a>|</div><p><img src="../../../../image/synctalkface/231029SYNauthor.png" /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs citation">Park, S.J., Kim, M., Hong, J., Choi, J. and Ro, Y.M. 2022. SyncTalkFace: Talking Face Generation with Precise Lip-Syncing via Audio-Lip Memory. _Proceedings of the AAAI Conference on Artificial Intelligence_. 36, 2 (Jun. 2022), 2062-2070. DOI:https://doi.org/10.1609/aaai.v36i2.20102.<br></code></pre></td></tr></table></figure><h3 id="background-and-motivation">Background and Motivation</h3><p>从语音生成说话脸部的挑战在于<strong>对齐音频和视频</strong>，使得嘴部区域动作与输入的音频对应。</p><p>以前的方法要么利用视听表示学习，要么利用中间结构信息，例如 landmarks和 3D模型。然而，他们很难合成<strong>音素级别</strong>上变化的嘴唇的<strong>精细细节</strong>，因为它们在视频合成步骤中不能充分提供<strong>嘴唇的视觉信息</strong>。</p><h3 id="contribution-and-novelty">contribution and novelty</h3><ol type="1"><li>提出 Audio-Lip Memory ，它将来自连续 ground truth image的<strong>嘴唇运动特征</strong>存储在值存储器中，并将它们与相应的音频特征对齐，使用检索到的嘴唇运动特征作为视觉提示，可以在合成步骤中轻松地将音频与视觉动态相关联。</li><li>引入了 <strong>visual-visual同步损失</strong>，模型中的视听同步损失一起使用时，可以增强口型同步性能。</li><li>通过分析内存中学习到的表示，确认音频唇形存储器存储音素级别的<strong>代表性唇形特征</strong>在每个内存槽中，并且寻址槽的不同组合会产生唇形特征的<strong>各种组合</strong>，从而实现复杂且多样化的唇形运动。因此，使用内存地址直接操纵嘴唇运动是可能的。</li></ol><p><img src="../../../../image/synctalkface/231029SYNmodel.png" /></p><h4 id="流程说明">流程说明</h4><p>通过 Audio Encoder 可以将一段0.2s的音频编码为<spanclass="math inline">\(C\)</span>个通道的特征<spanclass="math inline">\(f_{aud}\)</span>。</p><p>通过 Lip Encoder 可以将连续的五张掩盖上面部的图像序列编码成<spanclass="math inline">\(C\)</span>个通道的特征<spanclass="math inline">\(f_{lip}\)</span>。</p><p><spanclass="math inline">\(\mathbf{M}_{lip}=\{m_{lip}^{i}\}_{i=1}^{S}\)</span>存储了<spanclass="math inline">\(S\)</span>个唇形特征，通过计算输入特征与存储的每个特征的<a href="../../../Concept/相似度/余弦相似度.md">余弦相似度</a>可以得到一组距离 <spanclass="math inline">\(\{d_{lip}^{i}\}_{i=1}^{S}\)</span>，再对这组距离使用 <ahref="../../../../BLOG/Concept/AI/神经网络/激活函数.md#Softmax">Softmax</a>，获取一组注意力权重 <spanclass="math inline">\(A_{lip}=\{\alpha_{lip}^{i}\}_{i=1}^{S}\)</span>，这样子，<strong>召回唇特征</strong>就可以表示为：<spanclass="math display">\[\hat{f}_{lip;valAdr}=A_{lip}\cdot\mathbf{M}_{lip}\]</span>为了召回特征的准确性，这里使用和原特征的重建损失来约束召回特征，学习将代表性特征嵌入Memory：<span class="math display">\[\mathcal{L}_{store}=\parallelf_{lip}-\hat{f}_{lip;valAdr}\parallel_{2}^{2}\]</span> <spanclass="math inline">\(\mathbf{M}_{aud}=\{m_{aud}^{i}\}_{i=1}^{S}\)</span>存储了<span class="math inline">\(S\)</span>个音频特征，计算输入的<spanclass="math inline">\(f_{aud}\)</span>与给个的距离并进行softmax得到音频的注意力权重<spanclass="math inline">\(A_{aud}=\{\alpha_{aud}^{i}\}_{i=1}^{S}\)</span></p><p>两个注意力权重其实就是地址索引，为了使得音视频对齐，可以通过两者分布的<a href="../../../Concept/相似度/KL散度.md">KL散度</a>来衡量两者相似度，从而通过训练对齐音视频： <span class="math display">\[\mathcal{L}_{align}=D_{KL}(A_{lip}\parallel A_{aud})\]</span> 这样子就可以通过音频特征的键去索引嘴唇特征的值： <spanclass="math display">\[\hat{f}_{lip;keyAdr}=A_{aud}\cdot\mathbf{M}_{lip}\]</span>将其与输入的音频链接作为解码器的一个输入，再将一个完整的面部和一个需要还原嘴部的上面部连接输入到Identity Encoder 获取身份信息 <span class="math inline">\(f_{I}\)</span>作为解码器另一个输入，这样子就可以生成新的帧；而将召回特征换成输入的唇部特征，就可以合成专注唇部编码的图像，用于训练Lip Encoder： <spanclass="math display">\[\hat{I}_{g}=G(\hat{f}_{lip;keyAdr}\oplusf_{aud},f_{I})\]</span> <spanclass="math display">\[\hat{I}_{G}=G(f_{lip}\oplusf_{aud},f_{I})\]</span> 引入重建损失来衡量生成图像与原图的相似性： <spanclass="math display">\[\mathcal{L}_{recon}=\frac{1}{N}\sum_{i=1}^{N}{(\parallel\hat{I}_{g}^{i}-I^{i}\parallel_{1}+\parallel\hat{I}_{G}^{i}-I^{i}\parallel_{1})}\]</span> 引入对抗损失来衡量图像真实性： <spanclass="math display">\[\mathcal{L}_{gan}=\mathbb{E}_{\hat{I}\in[\hat{I}_{G},\hat{I}_{g}]}{[\log{(1-D(\hat{I}))}]}\]</span><spanclass="math display">\[\mathcal{L}_{disc}=\mathbb{E}_{I}{[\log{(1-D(I))}]}+\mathbb{E}_{\hat{I}\in[\hat{I}_{G},\hat{I}_{g}]}{[\log{D(\hat{I})}]}\]</span>引入视听同步模块 <spanclass="math inline">\(\mathcal{F}_{a},\mathcal{F}_{v}\)</span>分别需要一段音频和五帧对应图像序列作为输入得到特征，用 <spanclass="math inline">\(d_{sync}(f_{a},f_{v})\)</span>表示两者的余弦相似度，引入视听同步损失： <span class="math display">\[\mathcal{L}_{a-v}=-\frac{1}{N}\sum_{i=1}^{N}(\log{(d_{sync}(\mathcal{F}_{a}(a_{i}),\mathcal{F}_{v}(\hat{I}_{g}^{i})))}+\log{(d_{sync}(\mathcal{F}_{a}(a_{i}),\mathcal{F}_{v}(\hat{I}_{G}^{i})))})\]</span>视觉-视觉同步损失，可以通过鼓励视觉领域的连贯性来补充视听同步损失；使用之前的Lip Encoder 可以提取视觉特征，因此可以作为视觉同步模块： <spanclass="math display">\[\mathcal{L}_{v-v}=\frac{1}{N}\sum_{i=1}^{N}{(\parallelE_{lip}(\hat{I}_{g}^{i})-E_{lip}(\hat{I})\parallel_{1}+\parallel E_{lip}(\hat{I}_{G}^{i})-E_{lip}(\hat{I})\parallel_{1})}\]</span> 最后对各部分进行加权，得到最后的价值函数： <spanclass="math display">\[\mathcal{L}=\lambda_{1}\mathcal{L}_{recon}+\lambda_{2}\mathcal{L}_{a-v}+\lambda_{3}\mathcal{L}_{v-v}+\lambda_{4}\mathcal{L}_{gan}+\lambda_{5}\mathcal{L}_{disc}+\lambda_{6}\mathcal{L}_{align}\]</span></p><h3 id="experiment">Experiment</h3><p><img src="../../../../image/synctalkface/231029SYNquantitative.png"alt="Quantitative results on LRW and LRS2" /> PSNR 和 SSIM测量视觉质量，LMD、LSE-D 和 LSE-C 测量唇形同步质量。 LMD 是 ground truth帧和生成帧的唇部标志（使用 dlib (King 2009) 检测到的）之间的距离。(Prajwal et al. 2020) 提出的 LSE-C 和 LSE-D 分别是来自 SyncNet (Chung 和Zisserman 2016b)的音频和视频特征之间的置信度得分（越高越好）和距离得分​​（越低越好）。LSE-C 和 LSE-D 测量音频和视觉特征之间的对应性，而 LMD直接测量视觉到视觉的一致性。为了公平比较，根据 ATVGnet中使用的人脸检测器评估人脸的裁剪区域（Chen et al. 2019）</p><p><img src="../../../../image/synctalkface/231029SYNhumman.png" /></p><p><img src="../../../../image/synctalkface/231029SYNmemory.png" /></p><p><imgsrc="../../../../image/synctalkface/231029SYNablation.png" /></p><h3 id="thinking">Thinking</h3><p>最有趣的就是引入了 <span class="math inline">\(\mathbf{M}\)</span>用于索引不同的代表性唇形特征，进一步的融合就可以组合出丰富的唇形动作。也可由此进行唇部动作的编辑和驱动。</p><p>有一个思考是，对于同步指标的思考。文中指出： &gt; Wav2Lip 在 LSE-D 和LSE-C 指标上表现更好，甚至优于真实数据。然而，正如（Zhou et al.2021）中所指出的，它只是证明了他们的口型同步结果几乎与地面事实相当，而不是更好。我们的LSE-D 和 LSE-C 分数确实更接近真实分数，并且我们在 LMD指标上表现更好，LMD 指标是衡量视觉领域对应性的另一个同步指标。</p><p>因此对比指标不能仅仅看绝对的大小，还需要和真实值进行对比。</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
      <category>语音驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>数字人</tag>
      
      <tag>2D</tag>
      
      <tag>talkingface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2D数字人驱动合集</title>
    <link href="/posts/be41/"/>
    <url>/posts/be41/</url>
    
    <content type="html"><![CDATA[<p>主要目标：以假乱真的语音驱动2D真人视频讲话 业界产品：硅基，剪映，如影</p><h2 id="论文梳理">论文梳理</h2><h2id="a-lip-sync-expert-is-all-you-need-for-speech-to-lip-generation-in-the-wild">ALip Sync Expert Is All You Need for Speech to Lip Generation In TheWild</h2><div class="line-block"><ahref="https://github.com/Rudrabha/Wav2Lip">code</a> | <ahref="https://arxiv.org/abs/2008.10010">paper</a> |</div><p><img src="../../../../image/paper/231029007.png" /> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs citation">K R Prajwal, Rudrabha Mukhopadhyay, Vinay P. Namboodiri, and C.V. Jawahar. 2020. A Lip Sync Expert Is All You Need for Speech to Lip Generation In the Wild. In Proceedings of the 28th ACM International Conference on Multimedia (MM &#x27;20). Association for Computing Machinery, New York, NY, USA, 484–492. https://doi.org/10.1145/3394171.3413532<br></code></pre></td></tr></table></figure></p><p>这项工作研究的问题是合成一个任意身份说话的脸的嘴唇动作视频，以匹配一个目标语音段。目前的工作擅长在训练过程中看到的<strong>特定人的静态图像或视频</strong>上产生准确的嘴唇动作。然而，它们无法在<strong>动态、无约束的人脸视频</strong>中准确地变形<strong>任意身份</strong>的嘴唇运动，<strong>导致视频</strong>中的重要部分与<strong>新音频不同步</strong>。</p><ul><li>我们确定了与此相关的关键原因，并通过学习一个强大的<strong>唇合成判别器</strong>来解决这些问题。</li><li>接下来，我们提出了新的、严格的<strong>评估基准和度量标准</strong>，以准确地衡量非约束视频中的唇动同步性。</li></ul><p>现实世界中的视频包含<strong>快速的姿态、尺度和光照变化</strong>，生成的人脸结果也必须无缝地融合到原始目标视频中。<img src="../../../../image/paper/231029009.png" alt="image.png" /></p><h2id="videoretalking-audio-based-lip-synchronization-for-talking-head-video-editing-in-the-wild">VideoReTalking:Audio-based Lip Synchronization for Talking Head Video Editing In theWild</h2><div class="line-block"><ahref="https://github.com/OpenTalker/video-retalking">code</a> | <ahref="https://arxiv.org/abs/2211.14758">paper</a> |</div><h3id="stylesync-high-fidelity-generalized-and-personalized-lip-sync-in-style-based-generator">StyleSync:High-Fidelity Generalized and Personalized Lip Sync in Style-basedGenerator</h3><div class="line-block"><ahref="https://github.com/guanjz20/StyleSync">code</a> | <ahref="https://hangz-nju-cuhk.github.io/projects/StyleSync">project</a>|</div><h3id="selftalk-a-self-supervised-commutative-training-diagram-to-comprehend-3d-talking-faces">SelfTalk:A Self-Supervised Commutative Training Diagram to Comprehend 3D TalkingFaces</h3><div class="line-block"><ahref="https://github.com/psyai-net/SelfTalk_release">code</a> | <ahref="https://arxiv.org/abs/2306.10799">paper</a> |</div>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
      <category>语音驱动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>数字人</tag>
      
      <tag>2D</tag>
      
      <tag>talkingface</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字人编辑</title>
    <link href="/posts/6d7d/"/>
    <url>/posts/6d7d/</url>
    
    <content type="html"><![CDATA[<h1 id="结合-stable-diffusion-的人体编辑以及驱动">结合 Stable Diffusion的人体编辑以及驱动</h1><h2id="text-guided-reconstruction-of-lifelike-clothed-humans">Text-guidedReconstruction of Lifelike Clothed Humans</h2><figure><img src="../../../image/paper/2310292Dtwo3D.png" alt="2Dtwo3D" /><figcaption aria-hidden="true">2Dtwo3D</figcaption></figure><h3 id="background">background</h3><p>从单个图像中重建穿着衣物的人物时，准确还原“看不见的区域”并保留高级细节仍然是一个未解决的具有较少关注的挑战。现有方法通常会生成过于平滑的背面表面和模糊的纹理。</p><p>从单一图像重建衣着的人类方面取得了进展，但准确地恢复具有高级细节的"看不见的区域"仍然是一个尚未解决的挑战，缺乏关注。现有的方法往往生成纹理模糊的过度平滑的背面表面。但是如何有效地从单张图像中捕获个体的所有视觉属性，这些视觉属性足以重建出看不见的区域(例如,后视图)</p><h3 id="motivation">motivation</h3><p>给定一幅图像，TeCH重建出一个逼真的3D衣服人体，"Lifelike"是指：</p><ol type="1"><li>在额区和看不见的区域都有详细的全身几何图形，包括面部特征和服装皱纹；</li><li>颜色一致、图案错综复杂的高质量纹理。</li></ol><p>关键的insight是：</p><ol type="1"><li>通过garment parsing model和Visual QuestioningAnswering（VQA）自动生成的描述性文本提示（例如服装，颜色，发型）来重建3D人;</li><li>个性化的微调Text-to-Image (T2I) diffusionmodel，赋能该模型学习“难以形容”的外观。</li></ol><p>为了以可承受的成本表示高分辨率的3D穿衣服的人，我们提出了一种基于DMTet的混合3D表示，它由明确的身体形状网格和一个隐式距离场组成。在描述性提示+个性化T2I扩散模型的指导下，通过multi-view ScoreDistillationSampling（SDS）和基于原始观测的重建损失来优化3D人的几何形状和纹理。TeCH生产高保真3D服装人，具有一致和细腻的纹理，以及详细的全身几何形状。定量和定性实验表明，TeCH在重建精度和渲染质量方面优于最先进的方法。</p><h3 id="method">Method</h3><p><img src="../../../image/paper/231029prompt.png" alt="image.png" />人体解析模型SegFormer和视觉问答模型BLIP用于生成图像中的人物的描述信息<span class="math inline">\(P_{VQA}\)</span>。 DreamBooth是一种通过少量镜头调整（3∼5 张图像）来“个性化”扩散模型的方法。 描述信息<span class="math inline">\(P_{VQA}\)</span>用于指导DreamBooth的生成过程，获得涵盖独特外观的标识符token <spanclass="math inline">\([V]\)</span>。 将 <spanclass="math inline">\([V]\)</span> 结合 <spanclass="math inline">\(P_{VQA}\)</span> 获得最终的提示 <spanclass="math inline">\(P\)</span>，用于指导个性化的DreamBooth <spanclass="math inline">\(D&#39;\)</span>。</p><p><img src="../../../image/paper/2310293Dmodel.png" alt="image.png" />初始化人体<spanclass="math inline">\(M_{body}\)</span>,通过网格膨胀和上下采样创建<spanclass="math inline">\(M_{shell}\)</span>。 多层感知机<spanclass="math inline">\(\Psi_{g},\Psi_{c}\)</span>学习几何和颜色的知识。多阶段、从粗到细的优化过程，按顺序恢复主体的几何形状和纹理。利用四面体表示来模拟主体的几何形状，使用从四面体网格中提取的网格恢复外观这两个阶段都使用个性化的DreamBooth模型利用基于SDS的损失，该模型通过对新的摄像机视图进行采样来提供多视图监督。</p><h3 id="experiment">Experiment</h3><p><img src="../../../image/paper/231029result.png" alt="image.png" />TeCH在3D指标和2D图像质量指标方面都超过了SOTA基线。这证明了其在精确重建具有复杂细节的服装人体几何形状以及产生具有一致外观的高质量纹理方面的卓越性能。使用倒角（Chamfer，双向点到面）和 P2S（1向点到面）距离定量评估几何体和外观的重建质量，以测量重建网格和真实网格之间的差异。从两个网格渲染的L2Normal误差，以通过将相机旋转{0◦，90◦，180◦，270◦}w.r.t.到输入视图来测量局部表面细节的一致性和精细度。为了评估纹理的质量，我们在以与正常图像相同的方式渲染的多视图彩色图像上报告了2D图像质量指标，包括PSNR（峰值信噪比），SSIM（结构相似性）和LPIPS（学习的感知图像路径相似性）。TeCH 在 CAPE 上的所有 2D 指标和 3D指标上都表现出卓越的性能。这表明TeCH可以准确地重建几何形状和纹理，即使是具有挑战性的姿势（CAPE）或宽松的衣服（THuman2.0）。然而，在THuman2.0上，它实现了与基于先前的方法相当的重建精度。这可以归因于这样一个事实，即幻觉的背面可能与真相不同，但仍然看起来很真实。<img src="../../../image/paper/231029favor.png" alt="image.png" />报告了与其他基线相比，用户对TeCH的偏好百分比。大多数参与者在几何和彩色渲染（纹理）方面都更喜欢TeCH。<img src="../../../image/paper/231029compare.png" alt="image.png" />为了评估TeCH在野外图像上的泛化并评估结果的感知质量，我们使用来自SHHQ数据集的90张随机采样图像进行了一项感知研究。向参与者展示了由TeCH重建的旋转3D人类的视频，以及基线（PaMIR[136]，PIFu [103]，ICON[120]，ECON [121]和PHORHUM[5]）。他们被要求根据输入图像选择更真实和一致的结果。我们从63名参与者那里收集了总共3，150个成对比较，均匀地涵盖了90个SHHQ受试者。选项卡2 中的结果表明，在几何形状和纹理方面，TeCH都是首选。如图8所示，与其他倾向于重建过于光滑的表面和模糊纹理的方法不同，TeCH在应用于具有不同服装风格和手势的野外图像时表现出显着的泛化性。它可以产生更逼真的服装、发型和面部细节，即使是看不见的背面视图。</p><p><img src="../../../image/paper/231029Ablation.png" alt="image.png" />VQA 提示有助于恢复服装的整体结构，而 DreamBooth增强了纹理图案的精细细节</p><h2 id="editing-conditional-radiance-fields">Editing ConditionalRadiance Fields</h2><p>神经辐射场 （NeRF）是支持高质量视图合成的场景模型，并针对每个场景进行优化。在本文中，我们探讨了允许用户编辑在形状类别上训练的类别级NeRF（也称为条件辐射场）。具体来说，我们介绍了一种将粗略的2D用户涂鸦传播到3D空间的方法，以修改局部区域的颜色或形状。</p><p>首先，我们提出了一个条件辐射场，其中包含新的模块化网络组件，包括跨对象实例共享的形状分支。通过观察同一类别的多个实例，我们的模型在没有任何监督的情况下学习底层部分语义，从而允许将粗略的2D用户涂鸦传播到整个3D区域（例如，椅子座位）。接下来，我们提出了一种针对特定网络组件的混合网络更新策略，以平衡效率和准确性。在用户交互过程中，我们制定了一个既满足用户约束又保留原始对象结构的优化问题。我们在三个形状数据集的渲染视图上演示了我们的编辑方法，并表明它优于以前的神经编辑方法。最后，我们编辑单视图真实照片的外观和形状，并显示编辑传播到外推的新视图。</p><h3 id="background-1">background</h3><p>3D内容创建通常涉及为视觉效果或增强现实应用程序操作高质量的3D资产，3D艺术家工作流程的一部分包括对3D场景的外观和形状进行局部调整。显式表示使艺术家能够控制 3D场景的不同元素。例如，艺术家可以使用网格处理工具对场景几何形状进行局部调整，或通过操纵纹理图集来更改表面外观。在艺术家的工作流程中，这种明确的表示通常是手工创建或程序生成的。虽然显式表示功能强大，但由于依赖于视图的外观、复杂的场景拓扑和不同的表面不透明度，在自动获取真实场景的高质量显式表示方面仍然存在重大技术挑战。最近，隐式连续体积表示显示了各种3D场景的高保真捕获和渲染，并克服了上述许多技术挑战。这种表示以神经网络的权重对捕获的场景进行编码。神经网络学习从点样本沿投射光线渲染与视图相关的颜色，并通过alpha 合成获得最终渲染 。这种表示支持许多逼真的视图合成应用。然而，我们缺乏关于如何使艺术家在这种表现形式中进行控制和编辑的关键知识。</p><h3 id="motivation-1">motivation</h3><p>编辑隐式连续体积表示具有挑战性。首先，我们如何有效地传播稀疏的 2D用户编辑以填充此表示中的整个相应 3D区域？其次，隐式表示的神经网络有数百万个参数。目前尚不清楚哪些参数控制渲染形状的不同方面，以及如何根据稀疏的本地用户输入更改参数。虽然3D编辑的先前工作主要集中在编辑显式表示，但它们不适用于神经表示。<img src="../../../image/paper/2310293conditions.png" alt="image.png" />在本文中，我们研究了如何使用户能够编辑和控制3D对象的隐式连续体积表示。如图1 所示，我们考虑了三种类型的用户编辑： 1.将局部部件的外观更改为新的目标颜色（例如，将椅子座椅的颜色从米色更改为红色），2. 修改局部形状（例如，移除椅子的轮子或从不同的椅子换入新手臂）， 3.从目标对象实例转移颜色或形状。用户通过在编辑应进行的位置的所需位置上涂鸦并选择目标颜色或局部形状来执行2D 本地编辑。</p><h3 id="method-1">method</h3><p>我们通过研究如何有效地更新条件辐射场以与目标本地用户编辑保持一致来解决编辑隐式连续表示的挑战。我们做出以下贡献。首先，我们学习整个对象类上的条件辐射场，以模拟看似合理的对象的丰富先验。出乎意料的是，此先验通常允许传播稀疏的用户涂鸦编辑以填充所选区域。我们演示了复杂的编辑，而无需施加明确的空间或边界约束。此外，当从不同视点渲染对象时，编辑显示一致。其次，为了更准确地重建形状实例，我们在条件辐射字段中引入了一个在对象实例之间共享的形状分支，这隐式地偏向网络以尽可能编码共享表示。第三，我们研究了条件辐射场网络的哪些部分影响不同的编辑任务。我们表明，形状和颜色编辑可以有效地在网络的后期层中进行。这一发现促使我们只更新这些图层，并使我们能够以显着的计算速度生成有效的用户编辑。最后，我们引入了颜色和形状编辑损失，以满足用户指定的目标，同时保留原始对象结构。我们提出的解决方案，如图2 ( c)所示，通过更新网络的特定层来实现精度和效率。为了减少计算量，我们只对网络的后几层进行微调。这些选择只计算后面层的梯度，而不是整个网络的梯度，从而加快了优化的速度。在编辑颜色时，只更新网络中的Frad和z( c )，比优化整个网络(从972秒到260秒)减少了3.7×的优化时间。在编辑形状时，只更新Ffuse和Fdens，优化时间减少了3.2 × ( 1081 ~ 342s)。在4.3节中，我们进一步量化了编辑精度和效率之间的权衡。为了进一步减少计算量，我们在编辑过程中增加了两个步骤。</p><h3 id="experiment-1">experiment</h3><p><img src="../../../image/paper/231029evaluation.png"alt="image.png" />我们评估了我们的模型和几个关于视图重建的消融。注意形状和颜色编码的分离以及共享/实例网络的使用是如何提高视图合成质量的。我们的模型甚至优于单实例NeRF模型(每个人在一个对象上进行训练)。<img src="../../../image/paper/231029benchmark.png" alt="image.png" />我们评估源对象实例的颜色编辑，以匹配目标实例。值得注意的是，我们的方法在所有标准上都优于基线。<img src="../../../image/paper/231029edit.png" alt="image.png" />我们将颜色编辑结果可视化，目标是将源实例的颜色与目标匹配。我们的方法在一个视图上进行涂鸦的情况下，准确地捕获了目标实例的颜色。注意到(c )编辑单实例NeRF会导致视觉伪影，( d)重写GAN无法将编辑传播到看不见的视图并产生不切实际的输出。</p><p><img src="../../../image/paper/231029para.png" alt="image.png" />注意到我们的混合网络更新方法如何在平衡计算成本的同时实现高视觉编辑质量。<img src="../../../image/paper/231029combine.png" alt="image.png" />我们的方法成功地移除了手臂并填充了椅子的孔洞。注意，仅仅优化形状代码或分支是无法同时适应这两种编辑的。优化整个网络是缓慢的，并且会导致实例中不必要的变化。</p><p>我们在三个形状数据集的渲染视图上演示了结果，这些数据集具有不同级别的外观、形状和训练视图复杂性。与以前的神经编辑方法相比，我们展示了我们的方法在对象视图合成以及颜色和形状编辑方面的有效性。此外，我们展示了我们可以编辑真实单视图照片的外观和形状，并且编辑传播到外推的新视图。我们强烈建议观看我们的视频，看看我们的编辑演示。代码和更多结果可在我们的GitHub 存储库和网站上找到。</p><p>我们介绍了一种从3D物体集合中学习条件辐射场的方法。此外，我们还展示了如何使用我们学习到的解耦表示来执行直观的编辑操作。我们方法的一个局限性是形状编辑的交互性。目前，用户需要花费超过一分钟的时间来获得形状编辑的反馈。编辑操作计算的大部分花费在绘制视图上，而不是编辑本身。我们乐观地认为，NeRF渲染时间的改进将有助于[46、75]。另一个限制是我们的方法未能重建出与其他类实例有很大差异的新对象实例。尽管存在这些局限性，我们的方法为探索其他高级编辑操作开辟了新的途径，例如r</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>media/text</tag>
      
      <tag>model/difussion</tag>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人编辑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NeRF</title>
    <link href="/posts/a5bb/"/>
    <url>/posts/a5bb/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://arxiv.org/abs/2003.08934">NeRF: Representing Scenesas Neural Radiance Fields for View Synthesis</a></p><p>2023.09.11</p><p>神经辐射场表示场景来做新视角合成</p></blockquote><p><img src="../../../../image/paper/231029004.png" /></p><p><img src="../../../../image/paper/231029005.png" /></p><p>体渲染中的光学模型：<spanclass="math inline">\(T(t)\)</span>是一个衰减函数，从光线遇到物体表面开始迅速衰减，避免透视的出现。<span class="math inline">\(r(t)=o+td\)</span>，o是观测点位置坐标光线的视角方向 <span class="math inline">\(d=(\theta,\phi)\)</span></p><p><img src="../../../../image/paper/231029006.png" /></p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Reading</category>
      
    </categories>
    
    
    <tags>
      
      <tag>paper</tag>
      
      <tag>3D</tag>
      
      <tag>display</tag>
      
      <tag>渲染</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用数据集</title>
    <link href="/posts/8e9f/"/>
    <url>/posts/8e9f/</url>
    
    <content type="html"><![CDATA[<h3 id="英文">英文</h3><p>AVSpeech</p><p>VoxCeleb</p><p>VoxCeleb2</p><p>LRW</p><p><ahref="https://www.robots.ox.ac.uk/~vgg/data/lip_reading/lrs2.html">LRS2-BBC</a></p><p>LRS_TED</p><h3 id="中文">中文</h3><p><a href="http://cnceleb.org/">CN-CVS</a></p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Experiment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>media/video</tag>
      
      <tag>数字人/数字人驱动</tag>
      
      <tag>media/audio</tag>
      
      <tag>data/dataset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我与地坛笔记</title>
    <link href="/posts/1520/"/>
    <url>/posts/1520/</url>
    
    <content type="html"><![CDATA[<p><a href="https://book.douban.com/subject/5910656/">我与地坛</a></p><p>但是太阳，他每时每刻都是夕阳也都是旭日。当他熄灭着走下山去收尽<strong>苍凉残照</strong>之际，正是他在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。</p><p>有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。</p><p><strong>当然，那不是我。</strong></p><p><strong>但是，那不是我吗？</strong></p><p>宇宙以其不息的欲望将一个歌舞炼为<strong>永恒</strong>。这欲望有怎样一个人间的姓名，大可忽略不计。</p>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>读万卷书</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>文学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>余弦相似度</title>
    <link href="/posts/f19a/"/>
    <url>/posts/f19a/</url>
    
    <content type="html"><![CDATA[<p>Cosine Similarity</p><p>维空间中两个n维向量之间角度的余弦。它等于两个向量的点积（向量积）除以两个向量长度（或大小）的乘积。</p><p>通过夹角的大小，来判断向量的相似程度。夹角越小，就代表越相似。</p><p><span class="math display">\[cosine(\bf{a},\bf{b})=\frac{\bf{a}\cdot\bf{b}}{\parallel\bf{a}\parallel\times\parallel\bf{b}\parallel}=\frac{\sum_{i=1}^{n}{(a_{i}\times b_{i})}}{\sqrt{\sum_{i=1}^{n}{a_{i}^{2}}}\times\sqrt{\sum_{i=1}^{n}{a_{i}^{2}}}}\in [-1,1]\]</span></p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>相似度</category>
      
    </categories>
    
    
    <tags>
      
      <tag>similarity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KL散度</title>
    <link href="/posts/f512/"/>
    <url>/posts/f512/</url>
    
    <content type="html"><![CDATA[<p>Kullback-Leibler divergence，简称 <ahref="https://zh.wikipedia.org/wiki/%E7%9B%B8%E5%AF%B9%E7%86%B5#cite_note-:0-1">KLD</a>，是两个几率分布<span class="math inline">\(P\)</span>和<spanclass="math inline">\(Q\)</span>差别的非对称性的度量。KL散度是用来度量使用基于<spanclass="math inline">\(Q\)</span>的分布来编码服从<spanclass="math inline">\(P\)</span>的分布的样本所需的额外的平均比特数。典型情况下，<spanclass="math inline">\(P\)</span>表示数据的真实分布，<spanclass="math inline">\(Q\)</span>表示数据的理论分布、估计的模型分布、或<spanclass="math inline">\(P\)</span>的近似分布。</p><p>离散形式： <span class="math display">\[D_{KL}(P\parallel Q)=-\sum_{i}{P(i)\ln{\frac{Q(i)}{P(i)}}}=\sum_{i}{P_{i}\ln\frac{P(i)}{Q(i)}}\]</span></p><p>连续形式： <span class="math display">\[D_{KL}(P\parallel Q)=\int_{-\infty}^{\infty}{p(x)\ln\frac{p(x)}{q(x)}}\mathbf{d}x\]</span></p><p>性质： <span class="math display">\[D_{KL}(P\parallel Q)\ge0\]</span> <span class="math display">\[D_{KL}(P\parallel Q)\neD_{KL}(Q\parallel P)\]</span></p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>相似度</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distribution</tag>
      
      <tag>similarity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>体渲染</title>
    <link href="/posts/efcb/"/>
    <url>/posts/efcb/</url>
    
    <content type="html"><![CDATA[<p>对光线进行追踪和积分以生成图像 3D-&gt;2D</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>CG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3D</tag>
      
      <tag>渲染</tag>
      
      <tag>2D</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三种坐标系</title>
    <link href="/posts/1dd2/"/>
    <url>/posts/1dd2/</url>
    
    <content type="html"><![CDATA[<p>世界坐标系 相机坐标系 像素坐标系</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>CG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CG</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TetGen</title>
    <link href="/posts/8540/"/>
    <url>/posts/8540/</url>
    
    <content type="html"><![CDATA[<p>TetGen是一个用于三维四面体网格生成的开源软件工具，它采用了一些先进的算法和技术来实现高质量的四面体网格生成。以下是TetGen实现的一般步骤和主要技术：</p><ol type="1"><li>输入几何体描述：TetGen首先需要一个描述三维几何体的输入文件。这个输入可以是多边形边界表示、点云数据、或者其他合适的几何描述。输入几何体可以通过常见的文件格式（如STL、OFF等）提供。</li><li>Delaunay 三角化：TetGen使用Delaunay三角化算法来将输入几何体的边界进行三角剖分。Delaunay三角化是一种用于将点集连接成不包含任何点在内接圆内的三角形集合的算法。这一步骤将几何体的边界划分为一系列的三角形。</li><li>四面体化：接下来，TetGen使用四面体化算法将三角形网格转化为四面体网格。这一步骤的目标是将空间划分成四面体元素，以适应输入几何体的形状，同时确保生成的四面体网格满足Delaunay条件。Delaunay条件确保了四面体的顶点不会位于其外接球内。</li><li>质量优化：TetGen通常会进行一些质量优化步骤，以改善生成的四面体网格的质量。质量优化的目标是使四面体的形状更均匀，以减少模拟和分析中的数值不稳定性。这通常包括优化四面体的体积、角度和椭圆性等方面的指标。</li><li>输出生成的四面体网格：最后，TetGen将生成的四面体网格保存到输出文件中，以供后续的计算、渲染或分析使用。输出文件通常包含四面体的顶点坐标和连接信息。TetGen的强大之处在于它的算法能够处理复杂的三维几何体，并生成高质量的四面体网格。它在科学计算、工程分析、计算机图形学等领域都有广泛的应用。TetGen的开源性质意味着它可以被研究人员和工程师自由使用和扩展，以满足各种应用的需求。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>CG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3D</tag>
      
      <tag>四面体</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SMPL-X</title>
    <link href="/posts/10ec/"/>
    <url>/posts/10ec/</url>
    
    <content type="html"><![CDATA[<p>SMPL-X（Skinned Multi-Person Linear model -eXtended）模型由多个组成部分构建而成，这些组成部分共同用于表示人体的形状和姿势。以下是SMPL-X模型的主要组成部分：</p><ol type="1"><li>身体形状参数（ShapeParameters）：这些参数用于描述人体的整体形状，包括身高、体型等。形状参数通过一个低维度的参数向量表示，允许对不同身体形状进行建模。</li><li>身体姿势参数（PoseParameters）：姿势参数用于表示人体的关节和肌肉的姿势。这些参数描述了身体的骨骼姿势以及关节的旋转。姿势参数也以一个低维度的参数向量的形式表示。</li><li>身体模型（BodyModel）：这是SMPL-X模型的核心部分，它由一个三维人体网格表示，该网格由顶点、边和面组成。身体模型捕捉了人体的几何形状，并将形状参数和姿势参数应用于该模型，以生成逼真的人体形状和姿势。</li><li>蒙皮模型（SkinningModel）：蒙皮模型将身体模型上的顶点与骨骼关联起来，以实现逼真的动画效果。它定义了顶点如何随着骨骼的动作而变形，从而实现了人体的运动。</li><li>关节角度限制（Joint AngleLimits）：这些参数定义了关节的可移动范围，以确保生成的姿势在生物学上是合理的。这有助于避免不自然的姿势。</li><li>表情参数（ExpressionParameters）：SMPL-X还可以包括表情参数，用于表示面部表情的变化。这些参数允许模型生成不同的面部表情。</li><li>身体部位分割（Body PartSegmentation）：模型通常还包括一个用于将人体分割成不同部位的信息，这对于识别和处理不同身体部位的动作和特征很有用。总的来说，SMPL-X模型的关键组成部分包括形状参数、姿势参数、身体模型、蒙皮模型、关节角度限制、表情参数和身体部位分割等，它们协同工作以生成逼真的人体形状和姿势，并支持各种计算机图形学和计算机视觉应用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>CG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3D</tag>
      
      <tag>model</tag>
      
      <tag>数字人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quadric_Decimation</title>
    <link href="/posts/9319/"/>
    <url>/posts/9319/</url>
    
    <content type="html"><![CDATA[<p>QuadricDecimation（四面体减少）是计算机图形学领域中的一种三维模型简化技术，用于减少三维模型中的多边形（通常是三角形或四边形）数量，以降低模型的复杂性，减小文件大小，提高渲染性能或简化模型以便后续处理。</p><p>Quadric Decimation的核心思想是将三维模型的多边形分成一系列四边形，并通过合并相邻的四边形来减少模型中的多边形数量。这一过程的目标是尽量保持模型的外观和几何特征，同时减少多边形的数量。这种技术通常用于高细节的三维模型，例如来自3D扫描、计算机游戏、虚拟现实应用等领域。</p><p>Quadric Decimation 的实现通常包括以下步骤：</p><ol type="1"><li>Quadric Error Metric 计算：对于每个四边形，计算一个称为"QuadricErrorMetric"的度量值，用于表示合并该四边形的成本。这个度量值考虑了四边形的形状、大小和与相邻四边形的光滑度等因素。</li><li>四边形合并：选择具有最低 Quadric Error Metric值的四边形，并将其与相邻的四边形合并成一个更大的四边形或者三角形。这一过程通常需要确保合并后的模型仍然是合法的、封闭的，并且不会引入明显的几何瑕疵。</li><li>迭代处理：重复进行 Quadric Error Metric计算和四边形合并，直到达到所需的多边形数量或者合并不再明显改善模型。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>CG</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3D</tag>
      
      <tag>CG</tag>
      
      <tag>simplify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DreamBooth</title>
    <link href="/posts/27f2/"/>
    <url>/posts/27f2/</url>
    
    <content type="html"><![CDATA[<p>DreamBooth是一种用于个性化的文本到图像生成模型，它可以通过向扩散模型（比如StableDiffusion）中注入少量主体对象，从而达到对基础模型的微调。具体来说，DreamBooth可以学习难以通过文本描述的视觉特征，并使用这些特征来生成与给定文本提示相关的图像。DreamBooth在文本到图像生成、图像编辑和3D建模方面具有广泛的应用前景。</p><p>在文中所提到的，要获得个性化的Dreambooth模型，需要进行以下步骤：</p><ol type="1"><li>预训练模型的训练：首先需要训练一个文本到图像的扩散模型，如StableDiffusion模型。这个模型可以接受文本作为输入，并生成相应的图像作为输出。</li><li>文本嵌入：然后，为了使模型能够理解和表达<strong>特定的主题或对象</strong>，需要使用特定的文本嵌入方法。在文中的例子中，提到了使用DreamBooth模型，该模型可以通过少量样本（3~5个图像），学习难以通过文本描述的视觉特征，通过微调对基础模型进行个性化定制。</li><li>微调模型：使用微调后的文本嵌入方法对预训练的扩散模型进行微调，以使其能够更好地理解和表达特定主题或对象的外观。</li><li>生成所需的输入：为了生成所需的输入，需要使用特定的数据增强方法来处理输入文本，并将其转换为扩散模型可以接受的格式。</li></ol><p>最终得到的Dreambooth模型就能够理解和表达特定主题或对象的外观，从而进行个性化的图像生成。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>生成模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>3D</tag>
      
      <tag>media/text</tag>
      
      <tag>model/difussion</tag>
      
      <tag>model</tag>
      
      <tag>media/image</tag>
      
      <tag>model/generative</tag>
      
      <tag>feature</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概率分布的基本采样方法</title>
    <link href="/posts/b23/"/>
    <url>/posts/b23/</url>
    
    <content type="html"><![CDATA[<p>待研究 概率分布的基本采样方法可以分为以下几种：</p><ol type="1"><li><strong>逆变换采样（Inverse Transform Sampling）：</strong>这是一种常见的基本采样方法，适用于任何分布，只要你知道它的累积分布函数（CDF）。具体步骤如下：<ol type="a"><li>计算概率分布的累积分布函数（CDF）。</li><li>生成一个均匀分布的随机数（通常在 [0, 1] 区间内）。</li><li>使用逆变换方法，将均匀随机数通过CDF的逆函数转换为符合目标概率分布的随机数。</li></ol></li><li><strong>拒绝采样（Rejection Sampling）：</strong>适用于复杂的分布，其中逆变换采样不容易实现。它涉及到在一个辅助分布上采样，并根据某个接受概率条件来接受或拒绝样本。具体步骤如下：<ol type="a"><li>选择一个容易采样的辅助分布（通常是一个比目标分布简单的分布）。</li><li>在辅助分布上采样一个样本。</li><li>根据接受概率条件接受或拒绝样本。如果被接受，则该样本符合目标分布。</li></ol></li><li><strong>马尔可夫链蒙特卡洛（Markov Chain MonteCarlo，MCMC）：</strong>这是一组强大的采样方法，用于从复杂的分布中采样。MCMC算法的核心思想是通过构建马尔可夫链，使其平稳分布等于目标概率分布，然后从该链中采样。常见的MCMC算法包括Metropolis-Hastings算法和Gibbs采样。</li><li><strong>重要性采样（Importance Sampling）：</strong>这是一种用于估计期望值的采样方法，特别适用于计算复杂分布的统计量。它通过从一个已知的重要分布中采样，然后根据权重来修正样本以估计目标分布的期望。</li></ol><p>这些是一些基本的概率分布采样方法，选择采样方法通常取决于目标分布的特性和计算资源的可用性。在实际应用中，通常会使用现有的采样库或工具来执行这些采样任务，因为这些库已经实现了各种采样方法，可以更方便地处理不同的分布。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>distribution</tag>
      
      <tag>sample</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人间喜剧精选集（全10册|读客三个圈经典文库）</title>
    <link href="/posts/62b3/"/>
    <url>/posts/62b3/</url>
    
    <content type="html"><![CDATA[<hr /><h1 id="元数据">元数据</h1><blockquote><p>[!abstract] 人间喜剧精选集（全10册|读客三个圈经典文库） - <imgsrc="https://cdn.weread.qq.com/weread/cover/93/YueWen_22247769/t7_YueWen_22247769.jpg"alt="人间喜剧精选集（全10册|读客三个圈经典文库）|200" /> - 书名：人间喜剧精选集（全10册|读客三个圈经典文库） - 作者： 巴尔扎克 - 简介：一部人性百科全书，写尽你一生可能遇到的所有人！法语翻译界泰斗傅雷历时25年，精选精译15篇，全收录！遗失的一篇《猫球商店》由“傅译传人”罗新璋精译精校。作者巴尔扎克，文学界的拿破仑、法国社会的一面镜子，雨果、普鲁斯特、茨威格、哈代、毛姆、木心等众多文学大家的精神领袖！在人类共同的精神世界，《人间喜剧》用91部小说、2400多个典型形象，融汇人间百态，写尽你一生可能遇到的所有人。这是一部人性百科全书，一座罕见的文学丰碑！- 出版时间 2018-04-01 00:00:00 - ISBN： - 分类： 文学-经典作品 -出版社： 文汇出版社 -PC地址：https://weread.qq.com/web/reader/5a132560715379595a1db00</p></blockquote><h1 id="高亮划线">高亮划线</h1><h2 id="高老头1">高老头(1)</h2><ul><li>📌 到处是真苦难，空欢喜 ^22247769-2-401-411<ul><li>⏱ 2023-10-18 14:41:03</li></ul></li><li>📌 谁又能说，枯萎的心灵和空无一物的骷髅，究竟哪一样看上去更可怕呢？^22247769-2-1161-1193<ul><li>⏱ 2023-10-18 14:40:34 ## 高老头(2)</li></ul></li><li>📌 饱经忧患的结果，大家对最惨痛的苦难都冷了心。^22247769-3-3681-3703<ul><li>⏱ 2023-10-21 11:42:06</li></ul></li><li>📌这些牢房是属于她的。她喂养那批终身做苦役的囚犯，他们尊重她的威权。以她所定的价目，这些可怜虫在巴黎哪儿还能找到充足而卫生的饭食，以及即使不能安排得高雅舒适、至少可以收拾得干干净净的房间？哪怕她做出极不公道的事来，人家也只能忍受，不敢叫屈。^22247769-3-3822-3941<ul><li>⏱ 2023-10-21 11:42:13 ## 高老头(4)</li></ul></li><li>📌 能够在那些金碧辉煌的客厅中露面，就等于一纸阀阅世家的证书。^22247769-5-3092-3121<ul><li>⏱ 2023-10-29 11:09:35 ## 高老头(5)</li></ul></li><li>📌 “那是浓雾作怪，浓得用刀劈也劈不开。” ^22247769-6-1237-1256<ul><li>⏱ 2023-10-29 11:17:05 # 读书笔记</li></ul></li></ul><h1 id="本书评论">本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>读万卷书</category>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>文学-经典作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现多端同步</title>
    <link href="/posts/8ba1/"/>
    <url>/posts/8ba1/</url>
    
    <content type="html"><![CDATA[<h2 id="背景介绍">背景介绍</h2><p>为了在多个设备上实现内容的同步，这次是同步 Obisidian仓库，同时也可以当作一个备份。</p><p>关于Git的安装和连接远程平台，参考 <ahref="../../../BLOG/Softwares/Git/Git安装以及Github连接本地.md">Git安装以及Github连接本地</a>。</p><p>避免偶尔出现的 Github 不能访问的情况，选择 Gitee作为同步和备份平台，同时将 Github 作为备份平台。 ## 设置方法</p><p>现状是已经有了 Obsidian 笔记仓库，但是没有添加 Git 使用，因此可以在Gitee 和 Github分别建立私有的空仓库，不添加任何文件，只获取两个仓库的链接。</p><p>进入 Obsidian 的根目录，右键打开 Git Bash，打开 Git的执行终端，执行下面命令。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化仓库</span><br>git init<br><span class="hljs-comment"># 添加远程仓库，地址例如：git@gitee.com:Yu-Qi-hang/obsidian.git</span><br>git remote add origin &lt;你的Gitee仓库地址&gt;<br><span class="hljs-comment"># 添加github仓库做备份使用</span><br>git remote set-url --add origin &lt;Github仓库地址&gt;<br></code></pre></td></tr></table></figure>此时已经设置完毕，下面可以查看设置是否正确 <imgsrc="../../../image/paper/231029003.png" /> 可以看到有一个 fetch的地址，用于拉去远程仓库的内容用于更新本地仓库 两个 push的地址，用于每次更新完本地推送备份到远程。</p><h2 id="使用方法">使用方法</h2><p>为了避免遗忘，每次打开某个端的时候，首先在仓库根目录打开 Git Bash执行拉取，实现本地更新。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull<br></code></pre></td></tr></table></figure>每次本地执行完之后，推送远程仓库进行同步。 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;update&quot;</span><br>git push<br></code></pre></td></tr></table></figure>这样子就实现了同步和备份。</p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>environment</tag>
      
      <tag>Git</tag>
      
      <tag>同步</tag>
      
      <tag>obsidian</tag>
      
      <tag>Git/Github</tag>
      
      <tag>Git/Gitee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>块引用</title>
    <link href="/posts/c36d/"/>
    <url>/posts/c36d/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是一个块">什么是一个块</h2><p>在 obsidian中，只要在源码中上下有空行包围的内容就是块。块可以是一个段落、引用、表格等等等等。</p><table style="width:6%;"><tbody><tr class="odd"><td>## 怎么引用块 在引用文件时候，可以输入 <code>[[</code>来打开搜索弹窗，而选定文件之后，输入 <code>^</code>即可进行块的选择。而全局块搜索，可以输入 <code>[[^^</code> 来实现。</td></tr><tr class="even"><td>此时文件中会出现一个引用链接，而在引用部分前面加上 <code>!</code>即可实现块的嵌入。</td></tr></tbody></table><h2 id="自定义块序号">自定义块序号</h2><p>自动生成的块序号没有可读性，但是可以自定义块名称。定义的位置通常在段落后多个空格处，而对于表格这些复杂的内容，需要在块之后且该定义前后皆为空行。</p><p>块的序号支持：字母、数字、破折号。</p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>note</category>
      
      <category>Obsidian</category>
      
    </categories>
    
    
    <tags>
      
      <tag>obsidian</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>丰筐行其祀</title>
    <link href="/posts/38b5/"/>
    <url>/posts/38b5/</url>
    
    <content type="html"><![CDATA[<p>威国两年半，天下大旱，民不聊生。一日早朝，皇帝开腔询问：“天下大灾，众爱卿可有妙计救天下苍生。”满朝文武战战兢兢不敢言语，正在此时，右相陈言：“陛下，臣有一门客谓姬。姬善做法，必有妙计！”皇帝闻言大喜：“速速昭姬入朝！”</p><p>姬信步入朝，皇帝开腔：“姬可有妙法可救天下苍生，延我国运？”姬曰：”陛下，此事易甚。草民有筐一，须得财宝丰之，待草民负之而祀，国运通达，天下大兴！“姬探手入袖，其筐甚微，不过五寸。皇帝大喜：”速速执行！“姬抬手掷筐，迎风而长，大一丈有余。皇帝怒，责姬入狱。</p><p>威国渐弱，皇帝愁苦，郁郁而终。二世肯登基，大赦天下，昭姬入朝：”姬，昔事莫议。若姬可做法救天下苍生，朕赐黄金万两，位及人臣！“姬曰：”陛下，待草民负筐而祀，国运通达，可兴五世！“肯虽怒,仍言：”善。"</p><p>姬掷其筐，肯遣朝臣取财宝丰之。姬负而行其祀，威国昌盛，五世而衰。史官执笔曰：肯得姬丰筐行其祀，威沃五世。</p>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>胡言乱语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>rubbish</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你来人间一趟，你要看看太阳</title>
    <link href="/posts/8cf7/"/>
    <url>/posts/8cf7/</url>
    
    <content type="html"><![CDATA[<hr /><h1 id="元数据">元数据</h1><blockquote><p>[!abstract] 你来人间一趟，你要看看太阳 - <imgsrc="https://cdn.weread.qq.com/weread/cover/34/YueWen_25444612/t7_YueWen_25444612.jpg"alt="你来人间一趟，你要看看太阳|200" /> - 书名：你来人间一趟，你要看看太阳 - 作者： 海子 - 简介：在诗人海子去世30周年之际，我们推出了这本诗歌选集，以表达对诗人的怀念，也尝试用一种新的方式去感知和解读不朽的诗篇。本书精选100首海子创作的抒情短诗，按照情绪和意蕴分为六个板块，同时创新地提出了“朗读版”的概念。我们希望号召每个热爱海子诗歌的读者，用朗读的方式，用诗歌最天然的形式，去体会这些作品背后的情感与故事。同时，在每首诗的右下角放置相应二维码，扫码即可听到这首诗的“领读版声音”，为读者参与共读提供示例和引导。你来人间一趟，你要看看太阳。愿你能在朗读中有所得。愿你能在诗中有所得。即使没有，也愿你爱上海子。- 出版时间 2019-03-01 00:00:00 - ISBN： 9787540489601 - 分类：文学-现代诗歌 - 出版社： 湖南文艺出版社 -PC地址：https://weread.qq.com/web/reader/b5c3233071844104b5ccfaa</p></blockquote><h1 id="高亮划线">高亮划线</h1><h2 id="夏天的太阳">夏天的太阳</h2><ul><li>📌 你来人间一趟你要看看太阳和你的心上人一起走在街上^25444612-24-763-874<ul><li>⏱ 2023-10-22 17:00:10 ## 活在珍贵的人间</li></ul></li><li>📌 活在这珍贵的人间太阳强烈水波温柔 ^25444612-25-549-623<ul><li>⏱ 2023-10-22 17:00:04 ## 十四行：玫瑰花园</li></ul></li><li>📌 明亮的夜晚我来到玫瑰花园我脱下诗歌的王冠和沉重的土地的盔甲^25444612-27-550-666<ul><li>⏱ 2023-10-22 17:01:37 # 读书笔记</li></ul></li></ul><h1 id="本书评论">本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>读万卷书</category>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>文学-现代诗歌</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小孩</title>
    <link href="/posts/22d0/"/>
    <url>/posts/22d0/</url>
    
    <content type="html"><![CDATA[<hr /><h1 id="元数据">元数据</h1><blockquote><p>[!abstract] 小孩 - <imgsrc="https://cdn.weread.qq.com/weread/cover/20/YueWen_27058200/t7_YueWen_27058200.jpg"alt="小孩|200" /> - 书名： 小孩 - 作者： 大冰 - 简介：他是个野生作家，也是个说书人，继超级畅销书《乖，摸摸头》《阿弥陀佛么么哒》之后，他漂到了南极，写下了《好吗好的》；2017年，他又带着他的亲生读者大梦，一路北上邂逅北极光，写下了《我不》；2018年他淬火重生的大姑娘《你坏》向你说声“你好”！2019年，蛰伏闭关9个月后，他的六姑娘——赤诚干净坦荡明媚的《小孩》，轻轻问你一句：你是哪一种小孩，你是否还是个小孩。大冰是个性情老小孩。他会自费摆流水席请读者吃饭，会自费包场请读者看电影，会在签名时动不动就给读者签“酒吧免单”，他还曾背着吉他忽然间出现在某一个城市的某一个读者身边，请他吃一顿烛光晚餐。2019年，他还要任性地把送你的1500场免费音乐会变成更多场！他说：我不过是个走江湖的说书人罢了，野生作家而已。只想讲故事，只会讲故事，只是讲故事。他说：纸价飞涨，我尽力了。你读了我的书就是我的人。我曾经历过的，永不要在你身上重演。都好好的。他说：走过的路越多，越喜欢宅着。见过的人越多，越喜欢孩子。他说：于无常处知有情，于有情处知众生。我书中所有的故事，这14个字便可概述。他说：未来未知的某一天，我希望你们忘记大冰这个名字。他说：有一天你会明白，人生底色是悲凉。有一天你会明白，悲凉之上，有自修自证的温暖。所以，如果可以，去试着当个小孩。- 出版时间 2019-07-01 00:00:00 - ISBN： 9787540492380 - 分类：文学-经典作品 - 出版社： 湖南文艺出版社 -PC地址：https://weread.qq.com/web/reader/fb332e10719ce018fb3b907</p></blockquote><h1 id="高亮划线">高亮划线</h1><h2 id="送你一棵树">送你一棵树</h2><ul><li>📌 就是因为遥远才要送啊。就是因为陌生才不送不行。^27058200-13-412-466<ul><li>⏱ 2023-09-28 16:25:40</li></ul></li><li>📌 他的梦想是一路徒步去拉萨……去那里当保安！ ^27058200-13-20839-20860<ul><li>⏱ 2023-09-29 11:03:19</li></ul></li><li>📌 他甚至不去勉励瓶罐好好读书什么的，帮了就是帮了，光风霁月。^27058200-13-32513-32542<ul><li>⏱ 2023-09-29 11:58:05 ## 兄弟</li></ul></li><li>📌大松友好地向我道了早安，告诉我其实人生就是一场迷途，每个迷路的人都在找寻自己的出口……又告诉我很快就能到拜县了，就快找到出口了，他确定只需要再翻过两三个山头。^27058200-14-5930-6009<ul><li>⏱ 2023-09-30 18:19:04 ## 天津往事</li></ul></li><li>📌年轻时代的喜欢，要么轻易认为是爱，要么轻易不肯承认是爱。该记的记不住，该忘的忘不了。该走的没走出去，该留的没留下来。^27058200-15-769-885<ul><li>⏱ 2023-10-12 12:24:42 ## 台北儿子</li></ul></li><li>📌他回家跟阿宏讲：没觉得大家让我干的是杂事啊，大家对我都很好耶，宁可把自己搞得很闲，也要给我那么多机会去锻炼。^27058200-16-5868-5922<ul><li>⏱ 2023-10-12 14:10:35</li></ul></li><li>📌 前途当几许，未知止泊处， ^27058200-16-10996-11008<ul><li>⏱ 2023-10-12 14:18:33</li></ul></li><li>📌应该是很久没笑了，老人终于捕捉住一点笑的理由，紧紧拽着，怎么也不舍得它飞去。^27058200-16-16910-16948<ul><li>⏱ 2023-10-12 14:26:56</li></ul></li><li>📌越怕什么越不能躲，忌讳的东西说惯了嘴，渐渐也就一点都不可怖。一个死字，也就稀里糊涂地变成了玩笑。^27058200-16-18048-18125<ul><li>⏱ 2023-10-12 14:30:41 ## 客家姑娘</li></ul></li><li>📌 每个人拥抱生命的姿势都各不相同 ^27058200-17-17667-17682<ul><li>⏱ 2023-10-12 19:18:48</li></ul></li><li>📌一生中最年轻美丽的那几年，她是个国际义工，游走在那片古老大陆的稀树草原。寂寥而充实，孤独而热烈。在那里，她曾爱与被爱。^27058200-17-46120-46237<ul><li>⏱ 2023-10-12 20:24:57</li></ul></li><li>📌 他抬起手在脖子上示意了一下，慈祥极了。 ^27058200-17-52036-52055<ul><li>⏱ 2023-10-12 20:30:24 ## 说书人</li></ul></li><li>📌 愿你知行合一，愿你能心安。愿你永远有心力，去当个小孩。^27058200-21-10573-10629<ul><li>⏱ 2023-10-17 19:36:46 # 读书笔记</li></ul></li></ul><h1 id="本书评论">本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>读万卷书</category>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>文学-经典作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>穿越人海拥抱你</title>
    <link href="/posts/9a74/"/>
    <url>/posts/9a74/</url>
    
    <content type="html"><![CDATA[<hr /><h1 id="元数据">元数据</h1><blockquote><p>[!abstract] 穿越人海拥抱你 - <imgsrc="https://cdn.weread.qq.com/weread/cover/39/YueWen_26914564/t7_YueWen_26914564.jpg"alt="穿越人海拥抱你|200" /> - 书名： 穿越人海拥抱你 - 作者： 苑子文苑子豪 - 简介：青年作家苑子文、苑子豪畅销书《穿越人海拥抱你》全新修订纪念版。本书包含12个温暖治愈的晚安故事，内附温暖系兄弟生活照，送给所有饱经磨砺却依然温暖的你。每个人都有这样的时刻：孤独、落寞、沮丧、失望，怀疑着自己，对抗着生活……愿你永远不要为失去而伤心；永远因得到过而知足。梦想遥不可及，路途艰难险阻，希望你我能穿越人海拥抱彼此，继续奔向明日征程。同名影视剧《穿越人海拥抱你》即将开播。- 出版时间 2019-11-01 00:00:00 - ISBN： 9787559637697 - 分类：文学-经典作品 - 出版社： 北京联合出版公司 -PC地址：https://weread.qq.com/web/reader/d6932770719aaf04d6992ed</p></blockquote><h1 id="高亮划线">高亮划线</h1><h2id="前言一切看似末日的终将被证明只是过程">前言：一切看似末日的，终将被证明只是过程</h2><ul><li>📌这世界人潮拥挤，所有人都拼了命地想挤上一列开往好日子的列车，他们觉得年轻的时候不用力地闯一闯，到老了就更没机会了。^26914564-4-2425-2482<ul><li>⏱ 2023-09-28 15:39:35</li></ul></li><li>📌 她睁眼是春天，闭眼有满山的星星。 ^26914564-4-3111-3127<ul><li>⏱ 2023-09-28 15:39:07</li></ul></li><li>📌她相信爱情，相信地久天长，相信真心会换来珍惜，相信所有甜言蜜语和誓言，结果却被爱情打败，被时间打败，被辜负打败，被花言巧语和背后的残酷现实打败。输了就是输了，不认输，又能怎样呢？我宁愿你是一个在不顺遂的时候可以接受失败的人。但你千万不要认命。愿赌就要服输，输了这一局，还有下一局，错过这个人，还可以等到更好的人。对于那个不爱你的人，要将最好的祝福送给他。说不定在转角处的路口，你遇到的下一个人，会歪打正着地进入你的生命里。^26914564-4-4078<ul><li>⏱ 2023-09-28 15:41:36</li></ul></li><li>📌 爱情需要修炼，当一个人独处的时候，应该努力修炼自己。^26914564-4-4475-4501<ul><li>⏱ 2023-09-28 15:41:10 # 读书笔记</li></ul></li></ul><h1 id="本书评论">本书评论</h1>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>读万卷书</category>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>阅读</tag>
      
      <tag>文学-经典作品</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始使用服务器</title>
    <link href="/posts/f111/"/>
    <url>/posts/f111/</url>
    
    <content type="html"><![CDATA[<blockquote><p>进入实验室，分配到服务器用户名和密码，记录一下配置过程</p></blockquote><h3 id="服务器信息">服务器信息</h3><p>在用户文件夹下的 .ssh 文件夹下的config文件中，保存服务器信息</p><pre><code class="hljs">Host aliasHostName hostnameUser userPort port</code></pre><p>系统：Linux 硬盘空间：系统盘，数据盘</p><ul><li>/home 下的用户名文件夹是系统盘下个人空间</li><li>/data 下的用户名文件夹是数据盘下个人空间</li></ul><h3 id="服务器连接">服务器连接</h3><p>喜欢使用VSCode连接，可以一边看文件，一边在终端执行操作</p><ol type="1"><li>只需要在VSCode插件市场搜索RemoteDevelopment进行安装，就会安装一系列连接服务器需要的插件<imgsrc="../../../../image/server/plugin.png" alt="image.png" /></li><li>左边会出现<strong>远程资源管理器</strong>栏目<imgsrc="../../../../image/server/source.png"alt="image.png" />，左下角会出现<strong>打开远程窗口</strong>按钮<imgsrc="../../../../image/server/remote.png" alt="image.png" /></li><li>点击按钮即可按照要求进行连接。如果按照上一节保存了信息，只需要选择对应的服务器，输入密码即可。</li><li>初次连接资源管理器是空的，可以打开自己的文件夹，要添加更多文件夹，可以右键资源管理器的空白处添加文件夹到工作区。</li></ol><h3 id="服务器配置">服务器配置</h3><h4 id="结构安排">结构安排</h4><p>为了不影响使用的速度，存储性的功能放在数据盘，只在系统盘保留软件安装和正在使用的项目代码，架构图如下：系统盘存放项目和软件，数据盘存放数据集，模型以及实验结果</p><figure><img src="../../../../image/server/tree.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><h4 id="conda安装">conda安装</h4><p>首先下载安装包到服务器，进入到想下载的地方之后，可以使用wget命令，这里进入到softwares文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 浙大源，内网超级快</span><br>wget https://mirror.zju.edu.cn/anaconda/archive/Anaconda3-2023.09-0-Linux-x86_64.sh<br><span class="hljs-comment"># 官网，超级慢</span><br>wget https://repo.anaconda.com/archive/Anaconda3-2023.09-0-Linux-x86_64.sh<br></code></pre></td></tr></table></figure><p>运行安装包，名字好长，可以通配符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash Ana*.sh<br></code></pre></td></tr></table></figure><p>回车开始阅读协议，空格下翻，输入<code>yes</code>同意协议可以输入自定义安装目录，为了便于管理，这里选择安装在<code>/softwares/anaconda3</code>文件夹下安装完成之后开始配置，根据需求自行选择，回到<strong>用户目录</strong>执行下面命令，初始化命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p>安装完成，检查是否成功，显示版本信息，就是成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda --version<br></code></pre></td></tr></table></figure><p>然后进行换源以实现加速</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开始没有配置文件，执行下面命令生成，会位于用户根目录下</span><br>conda config --<span class="hljs-built_in">set</span> show_channel_urls <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 此时已经生成 .condarc，我们打开它</span><br>code .condarc<br><span class="hljs-comment"># 修改内容为以下内容</span><br>channels:<br>  - defaults<br>show_channel_urls: <span class="hljs-literal">true</span><br>default_channels:<br>  - https://mirrors.zju.edu.cn/anaconda/pkgs/main<br>  - https://mirrors.zju.edu.cn/anaconda/pkgs/r<br>  - https://mirrors.zju.edu.cn/anaconda/pkgs/msys2<br>custom_channels:<br>  conda-forge: https://mirrors.zju.edu.cn/anaconda/cloud<br>  msys2: https://mirrors.zju.edu.cn/anaconda/cloud<br>  bioconda: https://mirrors.zju.edu.cn/anaconda/cloud<br>  menpo: https://mirrors.zju.edu.cn/anaconda/cloud<br>  pytorch: https://mirrors.zju.edu.cn/anaconda/cloud<br>  pytorch-lts: https://mirrors.zju.edu.cn/anaconda/cloud<br>  simpleitk: https://mirrors.zju.edu.cn/anaconda/cloud<br></code></pre></td></tr></table></figure><p>为了避免环境占用过多系统盘资源，将环境移动到数据盘</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看conda信息，envs directories表示当前环境存储位置</span><br>conda info<br><span class="hljs-comment"># 在.condarc末尾增加以下内容</span><br>envs_dirs:<br>  - /data/yuqihang/envs/envs<br>pkgs_dirs:<br>  - /data/yuqihang/envs/pkgs<br></code></pre></td></tr></table></figure><p>其余配置参考<ahref="../../Softwares/Environment/Anaconda下载安装与使用.md">Anaconda下载安装与使用</a>]</p><h4 id="git配置">git配置</h4><p>git已经预安装，只需要配置一下连接到自己的远程仓库即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Yu-Qi-hang&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;2659464450@qq.com&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;2659464450@qq.com&quot;</span><br></code></pre></td></tr></table></figure><p>执行之后一直回车即可，此时已经生成了公钥文件在<code>~/.ssh/id_rsa.pub</code>，参考<ahref="..\Windows相关\Git安装以及Github连接本地.md">Git安装以及Github连接本地</a>连接并验证</p><h3 id="命令速查">命令速查</h3><p>查看服务器的系统：uname -a</p><p>查看显卡当前状态：nvidia-smi</p><p>持续监控显卡状态：watch nvidia-smi</p><p>程序执行指定CPU：taskset -c 1 python main.py</p><p>程序执行指定GPU：</p><p>下载某个链接的文件：wget --user 《可能需要的用户名》 --password《可能需要的密码》 《链接》</p><p>后台运行指令：nohup 《原指令》&gt; 《输出信息的文件》 2&gt;&amp;1&amp;</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Experiment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>server</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行程序控制</title>
    <link href="/posts/7a22/"/>
    <url>/posts/7a22/</url>
    
    <content type="html"><![CDATA[<table><thead><tr class="header"><th>command</th><th>hints</th></tr></thead><tbody><tr class="odd"><td>Ctrl+C</td><td>停止程序</td></tr><tr class="even"><td>Ctrl+Z</td><td>暂停进程并放入后台</td></tr><tr class="odd"><td>jobs</td><td>显示当前暂停的进程</td></tr><tr class="even"><td>bg N</td><td>使第N个任务在后台运行</td></tr><tr class="odd"><td>fg N</td><td>使第N个任务在前台运行</td></tr><tr class="even"><td>bg, fg</td><td>不带 N 时表示对最后一个进程操作</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Experiment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>terminal</tag>
      
      <tag>task</tag>
      
      <tag>process</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络训练中的train和eval模式</title>
    <link href="/posts/aac5/"/>
    <url>/posts/aac5/</url>
    
    <content type="html"><![CDATA[<h3 id="model.train">model.train()</h3><p>model.train()的作用是<strong>启用 Batch Normalization 和Dropout</strong>。</p><p>如果模型中有BN层(BatchNormalization）和Dropout，需要在训练时添加model.train()。</p><p>model.train()是保证BN层能够用到每一批数据的均值和方差。对于Dropout，model.train()是随机取一部分网络连接来训练更新参数。</p><h3 id="model.eval">model.eval()</h3><p>model.eval()的作用是<strong>不启用 Batch Normalization 和Dropout</strong>。</p><p>如果模型中有BN层(BatchNormalization）和Dropout，在测试时添加model.eval()。</p><p>model.eval()是保证BN层能够<strong>用全部训练数据</strong>的均值和方差，即测试过程中要保证BN层的均值和方差不变。对于Dropout，model.eval()是利用到了<strong>所有网络连接</strong>，即不进行随机舍弃神经元。</p><h3 id="测试时候的设定">测试时候的设定</h3><p>训练完train_datasets之后，model要来测试样本了。在model(test_datasets)之前，需要<strong>加上model.eval()</strong>.否则的话，<strong>有输入数据，即使不训练，它也会改变权值</strong>。这是model中含有batchnormalization层所带来的的性质。</p><p>eval()时，pytorch会自动把BN和DropOut固定住，不会取平均，而是用训练好的值。不然的话，一旦test的batch_size过小，很容易就会被BN层导致生成图片颜色失真极大。</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Experiment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Pytorch</tag>
      
      <tag>Python</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model/模型训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络训练中的eval与no_grad</title>
    <link href="/posts/be0b/"/>
    <url>/posts/be0b/</url>
    
    <content type="html"><![CDATA[<h3 id="model.eval">model.eval()</h3><p>model.eval()不会影响各层的gradient计算行为，即gradient计算和存储与training模式一样，只是不进行反向传播(backprobagation)</p><p>具体参考 <ahref="网络训练中的train和eval模式.md">网络训练中的train和eval模式</a></p><h3 id="torch.no_grad">torch.no_grad()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> torch.no_grad()：<br><span class="hljs-comment"># 代码块</span><br></code></pre></td></tr></table></figure><ol type="1"><li>用于停止autograd模块的工作，起到加速和节省显存的作用（具体行为就是停止gradient计算，从而节省了GPU算力和显存）</li><li>不会影响dropout和batchnorm层的行为</li></ol><h3 id="使用">使用</h3><p>可以同时使用，仅使用model.eval()已足够得到正确的validation的结果；</p><p>而withtorch.zero_grad()则是更进一步加速和节省gpu空间（因为不用计算和存储gradient），从而可以更快计算，也可以跑更大的batch来测试。</p>]]></content>
    
    
    <categories>
      
      <category>Research</category>
      
      <category>Experiment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>Pytorch</tag>
      
      <tag>Python</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model/模型训练</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主成分分析PCA</title>
    <link href="/posts/408/"/>
    <url>/posts/408/</url>
    
    <content type="html"><![CDATA[<p>PCA（Principal components analysis）的思想是构建 n_e<strong>新的独立特征</strong>，这些特征是 n_d旧特征的<strong>线性组合</strong>，以便这些新特征定义的子空间上的数据投影尽可能接近初始数据（以欧几里得距离表示）。</p><p>换句话说，PCA正在寻找初始空间的<strong>最佳线性子空间</strong>（由新特征的正交基描述），以便通过其在此子空间上的<strong>投影</strong>逼近数据的<strong>误差</strong>尽可能小。</p><figure><img src="../../../image/paper/231029PCA.png" alt="PCA" /><figcaption aria-hidden="true">PCA</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>降维</tag>
      
      <tag>data/数据处理</tag>
      
      <tag>特征提取</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多模态跨模态</title>
    <link href="/posts/2116/"/>
    <url>/posts/2116/</url>
    
    <content type="html"><![CDATA[<h3 id="多模态multimodal">多模态（multimodal）</h3><p>指的是涉及<strong>多种感官模式</strong>（例如视觉、听觉、触觉等）的<strong>信息或输入</strong>。在计算机科学和人工智能领域，多模态系统通常是指使用多种传感器或输入源来捕捉和处理多种感官信息的系统。例如，一个多模态语音识别系统可以同时利用声音信号和嘴部运动图像来提高语音识别的准确性。多模态技术在计算机视觉、自然语言处理、人机交互、机器学习等领域都有广泛的应用。</p><p>目前大多数工作中，只处理<strong>图像和文本</strong>形式的数据，即把视频数据转为图像，把音频数据转为文本格式。</p><p>多模态是把要检索的模态融合起来，做整体的检索，<strong>查询和检索的必须至少有一个模态是相同的</strong>，也就是要查询和检索的模态都已经在融合模态里了。</p><h3 id="跨模态cross-modal">跨模态（cross-modal）</h3><p>通常是指在多个感官模式之间建立<strong>联系或转换</strong>。跨模态技术可以让不同的感官模式之间进行交互和信息共享，从而实现更高级别的信息处理和分析。例如，将视觉和听觉信息进行跨模态匹配，可以帮助识别音乐视频中的音乐类型和情感状态。跨模态技术也可以应用于自然语言处理中，例如将文本描述转换为图像或视频，或者将图像或视频中的内容转换为自然语言描述。跨模态技术在人工智能、虚拟现实、增强现实、智能交互等领域都有广泛的应用。</p><p>跨模态是检索结果和查询的模态是不同，如图像检索文本，视频和音频。跨模态检索的关键在于对不同模态的关系进行建模，难点就是<strong>语义对齐</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>media/modal</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DRO</title>
    <link href="/posts/813c/"/>
    <url>/posts/813c/</url>
    
    <content type="html"><![CDATA[<p>DRO（Distributionally RobustOptimization）是一种优化方法，旨在解决数据分布偏移（distributionshift）问题。</p><p>传统的机器学习模型都是基于<strong>训练数据</strong>的经验分布进行优化，但实际应用中，测试数据往往与训练数据的分布有所不同，这会导致模型的性能下降。</p><p>DRO的目标是在优化模型的同时，<strong>考虑测试数据与训练数据分布的偏移</strong>，从而提高模型的鲁棒性。</p><p>DRO的基本思想是在优化目标中加入一个<strong>分布约束</strong>，该约束表示模型在训练数据和测试数据之间应该具有一定的相似性。具体而言，DRO优化的是一个多个分布的凸组合，其中<strong>每个分布</strong>表示训练数据的一个<strong>子集</strong>，而凸组合则表示对所有分布进行<strong>加权平均后得到的一个新的分布</strong>。这样，模型就可以通过最小化经验分布与凸组合之间的距离来同时考虑所有可能的分布偏移情况，从而得到更加鲁棒的模型。</p><p>DRO已经在一些领域取得了成功的应用，例如自然语言处理、计算机视觉、推荐系统等。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>distribution</tag>
      
      <tag>AI/ML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>人类反馈学习</title>
    <link href="/posts/926e/"/>
    <url>/posts/926e/</url>
    
    <content type="html"><![CDATA[<p>人类反馈学习（human feedbacklearning）是一种机器学习方法，它使用人类反馈来指导模型的学习过程。在人类反馈学习中，模型在<strong>完成任务或生成输出后</strong>，会<strong>接收到人类的反馈或指导</strong>，并<strong>根据反馈调整其预测或输出</strong>。这种方法通常用于<strong>监督学习或强化学习</strong>中，可以帮助模型<strong>更快速、更准确地学习任务</strong>，并提高模型的性能和鲁棒性。人类反馈可以采用不同的形式，如<strong>标签、注释、评分、建议</strong>等，也可以通过人机交互的方式进行交互式学习。此外，人类反馈学习还可以通过<strong>集成多个人类反馈</strong>，实现模型的群体学习和协同学习，从而进一步提高模型的性能。人类反馈学习在很多领域都有广泛的应用，如自然语言处理、计算机视觉、智能推荐、机器人学习等。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>AI/ML</tag>
      
      <tag>feedback</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>提示学习</title>
    <link href="/posts/5340/"/>
    <url>/posts/5340/</url>
    
    <content type="html"><![CDATA[<p>提示学习（prompt-basedlearning）是一种机器学习方法，它通过<strong>提供文本或指令来指导模型完成特定的任务或问题</strong>。在提示学习中，模型接收一个问题或任务描述，并使用该描述来生成预测或生成输出。这种方法通常用于语言生成、文本分类、问答系统和语言翻译等自然语言处理任务。与传统的无监督学习或监督学习相比，提示学习更加灵活和高效，因为它可以<strong>通过不同的提示来定制模型的输出</strong>。此外，提示学习还可以利用预训练模型和自适应学习等技术来提高模型的性能和适应性。近年来，提示学习在人工智能领域得到了广泛的应用和关注。其中，OpenAI的GPT系列模型就是使用提示学习方法进行训练的。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>AI/ML</tag>
      
      <tag>prompt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无监督域适应UDA</title>
    <link href="/posts/55a8/"/>
    <url>/posts/55a8/</url>
    
    <content type="html"><![CDATA[<p>UDA，全称为Unsupervised DomainAdaptation，即无监督域适应，是一种机器学习中的技术，用于解决在目标领域中缺乏标记数据的情况下进行有监督学习的问题。</p><p>在有监督学习中，我们通常会有一组标记数据（即有标签的数据），并使用这些数据来训练我们的模型。但在现实中，由于多种原因（例如数据收集成本高昂，标注困难等），我们可能无法获取足够数量的标记数据来训练我们的模型。这时候，就需要使用无监督域适应技术。</p><p>UDA的基本思想是使用已有的标记数据和未标记数据来训练模型。我们先在<strong>源领域</strong>中使用<strong>标记数据训练模型</strong>，然后将该模型应用于<strong>目标领域</strong>中的<strong>未标记数据</strong>，利用目标领域中的数据来<strong>调整模型的参数</strong>，使得模型在目标领域中的性能更好。这种方法的优点是可以<strong>充分利用</strong>目标领域中的未标记数据，从而提高模型的<strong>泛化能力和性能</strong>。</p><p>UDA的一些常见方法包括DANN（Domain Adversarial NeuralNetworks）、MMD（Maximum Mean Discrepancy）、CORAL（CORrelationALignment）、CDAN（Conditional Domain AdversarialNetworks）等。这些方法基于不同的思想和原理，但它们的共同目标都是通过将源领域和目标领域的分布对齐，使得模型在目标领域中的表现更好。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>distribution</tag>
      
      <tag>AI/ML</tag>
      
      <tag>Adaptation</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无监督学习与数据增强UDA</title>
    <link href="/posts/2a86/"/>
    <url>/posts/2a86/</url>
    
    <content type="html"><![CDATA[<p>Unsupervised DataAugmentation（UDA）是一种用于无监督学习的数据增强技术。它可以帮助我们更好地利用未标记数据，提高模型的泛化能力。</p><p>当我们使用监督学习训练模型时，通常需要大量的标记数据。然而，标记数据的获取和标注成本很高，而且有时可能无法覆盖整个数据分布。这就导致了一个问题：如何在没有<strong>足够的标记数据</strong>的情况下训练具有良好泛化能力的模型？</p><p>一种解决方案是使用无监督学习和数据增强来利用未标记数据。数据增强技术可以生成大量的虚拟数据，从而增加训练数据的多样性，而无监督学习则可以使用未标记数据进行自学习，从而减少对标记数据的依赖。</p><p>Unsupervised DataAugmentation（UDA）将这两个技术结合起来，使用数据增强技术生成<strong>虚拟数据</strong>，并使用无监督学习方法自学习。其基本思想是：</p><ol type="1"><li>使用一个自监督模型，如自编码器、生成对抗网络等，对未标记数据进行自学习。</li><li>使用数据增强技术，如旋转、翻转、剪切等操作，生成多样的虚拟数据。</li><li>将虚拟数据和自监督模型生成的标签一起用于训练模型，以提高模型的泛化能力。</li></ol><p>UDA有许多不同的变体，但它们的核心思想都是相似的。例如，MixMatch和FixMatch是两种UDA方法，它们都使用了数据增强和自监督学习。MixMatch使用了多个不同的数据增强操作和标签平滑技术，而FixMatch使用了一个强制匹配策略和一个弱监督的学习过程，以更好地利用未标记数据。</p><p>UDA已经在许多领域中被证明是有效的，如计算机视觉、自然语言处理等。通过结合无监督学习和数据增强技术，UDA可以利用更多的未标记数据，提高模型的性能，并减少对标记数据的依赖。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>data/数据处理</tag>
      
      <tag>AI/ML</tag>
      
      <tag>data/数据增强</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dropout</title>
    <link href="/posts/b5d6/"/>
    <url>/posts/b5d6/</url>
    
    <content type="html"><![CDATA[<p>Dropout是一种正则化技术，用于在神经网络的训练过程中<strong>减少过拟合</strong>。它在每次训练迭代中<strong>随机丢弃</strong>一些神经元，从而降低它们对特定输入的依赖性，并增加网络的泛化能力。</p><p>具体来说，Dropout将每个神经元的输出以概率p（通常为0.5）设置为0，这意味着该神经元在该迭代中不会对前向传递的输出进行贡献。在反向传播期间，只有那些没有被设置为0的神经元才会更新其权重。这使得神经元不能过分依赖其它神经元的输出，从而防止过拟合。</p><p>使用Dropout时，通常在<strong>训练阶段启用</strong>它，在<strong>测试阶段禁用</strong>它。这是因为在测试阶段，我们希望使用整个网络来进行预测，而不是对每个神经元都进行随机丢弃。在PyTorch中，可以使用<code>nn.Dropout</code>模块来添加Dropout层，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">dropout = nn.Dropout(p=<span class="hljs-number">0.5</span>) <span class="hljs-comment"># 创建一个丢弃概率为0.5的Dropout层</span><br>x = dropout(x) <span class="hljs-comment"># 对输入进行Dropout</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>model/神经网络</tag>
      
      <tag>data/正则化</tag>
      
      <tag>overfitting</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积反卷积计算</title>
    <link href="/posts/775/"/>
    <url>/posts/775/</url>
    
    <content type="html"><![CDATA[<h3 id="卷积">卷积</h3><p>输入图片大小 <span class="math inline">\(W\times W\)</span></p><p>kernel 卷积核大小 <span class="math inline">\(K\times K\)</span></p><p>stride 步长 <span class="math inline">\(S\)</span></p><p>padding 的像素数 <span class="math inline">\(P\)</span></p><p>于是我们可以得出计算公式为：</p><p><span class="math inline">\(N = (W − K + 2P )/S+1\)</span></p><h3 id="反卷积">反卷积</h3><p>输入图片大小 <span class="math inline">\(W\times W\)</span></p><p>kernel 卷积核大小 <span class="math inline">\(K\times K\)</span></p><p>stride 步长 <span class="math inline">\(S\)</span></p><p>padding 的像素数 <span class="math inline">\(P\)</span></p><p>output_padding 周边补充像素数</p><p>于是我们可以得出计算公式为：</p><p><span class="math inline">\(N =S(W-1)+K-2P+output\_padding\)</span></p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model/神经网络/CNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>激活函数</title>
    <link href="/posts/7401/"/>
    <url>/posts/7401/</url>
    
    <content type="html"><![CDATA[<p>激活函数本质是向神经网络中<strong>引入非线性因素</strong>，通过激活函数，神经网络可以<strong>拟合各种曲线</strong>。如果不用激活函数，每一层输出都会是上一层输入的线性函数，引入非线性函数作为激活函数，输出将可以<strong>逼近任意函数</strong>。</p><h3 id="sigmoid">Sigmoid</h3><p><strong>公式</strong>：<spanclass="math inline">\(f(x)=\frac{1}{1+e^{-x}}\)</span></p><p><strong>梯度</strong>：<spanclass="math inline">\(f&#39;(x)=\frac{e^{-x}}{(1+e^{-x})^2}=\frac{1}{1+e^{-x}}-(\frac{1}{1+e^{-x}})^2=f(x)-f^2(x)\)</span></p><p><strong>图像以及梯度图像</strong>：</p><figure><img src="../../../../image/ActivateFunction/231029sigmoid.png"alt="sigmoid" /><figcaption aria-hidden="true">sigmoid</figcaption></figure><p>Sigmoid函数的输出<strong>值域在0到1之间</strong>，具有连续可导、单调递增的性质。但是，当输入值较大或较小的时候，Sigmoid函数的梯度会趋近于0，导致<strong>梯度消失</strong>的问题，从而影响模型的训练效果。而且，Sigmoid函数的输出恒为正值，不是以零为中心的，这会导致权值更新时只能朝一个方向更新，从而<strong>影响收敛速度</strong>。</p><p>一般Sigmoid函数只用于<strong>二分类的输出层</strong>。</p><h3 id="relu">ReLU</h3><p><strong>公式</strong>：<span class="math inline">\(f(x) = max(0,x)\)</span></p><p><strong>梯度</strong>：<spanclass="math inline">\(f&#39;(x)=\begin{cases}0,&amp;x&lt;0\\1,&amp;x&gt;0\end{cases}\)</span></p><p><strong>函数图像</strong>：</p><figure><img src="../../../../image/ActivateFunction/231029relu.png"alt="ReLU" /><figcaption aria-hidden="true">ReLU</figcaption></figure><p>ReLU是一种常用的激活函数，ReLU提出就是为了解决梯度消失问题。它将输入值在<strong>负数区域输出0</strong>，在<strong>正数区域输出该数值</strong>本身。</p><p>ReLU函数具有以下几个优点：</p><ol type="1"><li>加速收敛：ReLU函数的导数在输入大于0时恒等于1，使得网络的<strong>反向传播更加稳定</strong>，可以加速模型的训练。</li><li>稀疏性：ReLU函数的输出值在负数区域恒等于0，可以使得网络的隐藏层的神经元出现稀疏性，进一步<strong>减少计算量和存储空间</strong>。</li><li>解决梯度消失问题：在较深的网络结构中，使用Sigmoid或tanh等激活函数容易导致梯度消失的问题，而ReLU可以有效地避免这个问题。</li></ol><p>ReLU函数在深度学习中得到广泛应用，但是它也存在一些问题，例如输出为0的区域梯度为0，这会导致<strong>梯度更新停止</strong>，进而导致<strong>神经元“死亡”</strong>的问题。因此，一些变种的ReLU函数被提出，例如LeakyReLU和ELU等。</p><h3 id="leakyrelu">LeakyReLU</h3><p><strong>公式</strong>：<span class="math inline">\(f(x)=\begin{cases}x, &amp; x&gt;0 \\ \alpha x, &amp; x\leq 0 \end{cases}\)</span></p><p><strong>梯度</strong>：<spanclass="math inline">\(f&#39;(x)=\begin{cases} 1, &amp; x&gt;0 \\ \alpha, &amp; x\leq 0 \end{cases}\)</span></p><p><strong>图像如下</strong>： <imgsrc="../../../../image/ActivateFunction/231029leakyrelu.png"alt="LeakyReLU" /></p><p>LeakyReLU的提出就是为了解决神经元”死亡“问题，LeakyReLU与ReLU很相似，仅在输入小于0的部分有差别，ReLU输入小于0的部分值都为0，而LeakyReLU输入小于0的部分，值为负，且有微小的梯度，从而增加模型的<strong>稳定性</strong>。实际中，LeakyReLU的α取值一般为<strong>0.01</strong>。</p><p>超参数α的取值也已经被很多实验研究过，有一种取值方法是对α随机取值，α的分布满足均值为0,标准差为1的正态分布，该方法叫做<strong>随机LeakyReLU</strong>(RandomizedLeakyReLU)。原论文指出随机LeakyReLU相比LeakyReLU能得更好的结果，且给出了参数α的经验值<strong>1/5.5</strong>(好于0.01)。至于为什么随机LeakyReLU能取得更好的结果，解释之一就是随机LeakyReLU小于0部分的随机梯度，为优化方法引入了随机性，这些随机噪声可以帮助参数取值跳出局部最优和鞍点。正是由于α的取值至关重要，人们不满足与随机取样α，有论文将α作为了需要学习的参数，该激活函数为<strong>PReLU</strong>(ParametrizedReLU)。</p><h3 id="tanh">Tanh</h3><p><strong>公式</strong>：<spanclass="math inline">\(f(x)=\frac{e^x-e^{-x}}{e^x+e^{-x}}\)</span></p><p><strong>梯度</strong>：</p><p><strong>图像</strong>：</p><figure><img src="../../../../image/ActivateFunction/231029tanh.png"alt="Tanh" /><figcaption aria-hidden="true">Tanh</figcaption></figure><p>Tanh函数的优点在于它的<strong>输出值在[-1,1]</strong>之间，比Sigmoid函数的输出范围更广，因此可以更好地避免梯度消失问题，当输入的值趋于正无穷或负无穷时，tanh的梯度同样会趋近零，造成<strong>梯度消失</strong>。与Sigmoid函数相似，Tanh函数也具有Sigmoid函数的非线性特性，能够帮助模型学习<strong>非线性关系</strong>。同时，Tanh函数也具有零均值，这使得其收敛速度比Sigmoid快，也可以对数据进行中心化。</p><p>在深度学习中，Tanh函数通常作为激活函数使用在<strong>隐藏层</strong>中，而不是输出层中，因为输出层通常需要正值或者是概率。</p><p>^tanh</p><h3 id="softmax">Softmax</h3><p><strong>公式</strong>：<spanclass="math inline">\(f(x_i)=\frac{e^{x_i/\tau}}{\sum_{j}e^{x_j/\tau}}\)</span></p><p><strong>梯度</strong>：<span class="math inline">\(\frac{\partialf(x_i)}{\partial x_i}=\frac{e^{x_i}\sum_{j}e^{x_j}-e^{x_i}e^{x_i}}{(\sum_{j}e^{x_j})^2}=\frac{e^{x_i}}{\sum_{j}e^{x_j}}(1-\frac{e^{x_i}}{\sum_{j}e^{x_j}})=f(x_i)(1-f(x_i))\)</span></p><p>Softmax常用于<strong>多分类</strong>问题中，他是二分类函数Sigmoid在多分类上的推广，目的是将多分类的结果<strong>以概率的形式</strong>展现出来，同时，可以将为负值的输出转化为正的概率值。它将一个K维的向量（K为类别数量）映射到一个概率分布上，使得每个元素的取值在0和1之间，而且它们的<strong>和等于1</strong>。</p><p><spanclass="math inline">\(\tau\)</span>是温度参数，可以调整分布的平滑程度。</p><p>Softmax函数的输出具有归一化性质，即各个类别的概率和为1。因此，在进行多分类问题时，输入数据需要进行one-hot编码，而在计算损失时，使用交叉熵损失函数。</p><p>^softmax</p><h3 id="eluexponential-linear-unit">ELU(Exponential Linear Unit)</h3><p><strong>公式</strong>：<spanclass="math inline">\(f(x)=\begin{cases}x,&amp;x&gt;0\\\alpha(e^x-1),&amp;x&lt;0\end{cases}\)</span></p><p><strong>梯度</strong>：<spanclass="math inline">\(f&#39;(x)=\begin{cases}1,&amp;x&gt;0\\\alphae^x,&amp;x&lt;0\end{cases}\)</span></p><p><strong>图像</strong>：</p><figure><img src="../../../../image/ActivateFunction/231029ELU.png" alt="ELU" /><figcaption aria-hidden="true">ELU</figcaption></figure><p>输入大于0部分的梯度为1,输入小于0的部分无限趋近于-α，超参数取值一般为1.ELU相比于ReLU和LeakyReLU的优点在于：</p><ol type="1"><li>对于负数的输出，ELU可以使梯度<strong>不会变得太小</strong>，因为当x小于0时，导数会趋近于0而不是被截断为一个常数值。</li><li>当x的值较大时，ELU仍然可以保持一个较大的导数，从而<strong>加速学习过程</strong>。</li></ol><p>但是，ELU的缺点在于，<strong>计算复杂度</strong>比ReLU和LeakyReLU高，因为它涉及到指数运算。总的来说，如果网络需要处理的数据集有很多负数，或者你需要防止梯度消失或爆炸，那么可以尝试使用ELU。</p><h3 id="选择方式">选择方式</h3><p><strong>隐藏层：</strong> 1.优先选择ReLu函数，如果效果不好，尝试其他，比如LeakyReLu； 2.不要使用Sigmoid函数，可以尝试Tanh函数。</p><p><strong>输出层：</strong> 1. 二分类问题选择Sigmoid函数； 2.多分类问题选择Softmax函数； 3. 回归问题选择Identity函数。<spanclass="math inline">\(（f(x)=x）\)</span></p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model/模型训练</tag>
      
      <tag>model/激活函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>超网络</title>
    <link href="/posts/c64/"/>
    <url>/posts/c64/</url>
    
    <content type="html"><![CDATA[<p>超网络（Meta-network）是一种神经网络结构，用于生成其他神经网络的权重或结构。通常情况下，超网络<strong>自身也是一个神经网络</strong>，其输入是一个或多个<strong>描述目标网络结构的参数或超参数</strong>，输出是<strong>目标网络的权重或结构</strong>。</p><p>在训练阶段，超网络接收一个目标网络的结构描述，例如层数、节点数、卷积核大小等超参数，然后使用这些超参数来生成目标网络的权重。通过在目标任务上对生成的网络进行训练，可以优化超网络的参数，使其能够生成更优秀的目标网络。</p><p>超网络可以用于自动设计神经网络的结构或者对神经网络进行架构搜索，从而实现更好的模型性能。此外，超网络还可以用于<strong>模型压缩</strong>和加速等应用，通过生成轻量级的模型来满足不同场景的需求。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>神经网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model/模型训练</tag>
      
      <tag>model</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变分自编码器VAE</title>
    <link href="/posts/ad84/"/>
    <url>/posts/ad84/</url>
    
    <content type="html"><![CDATA[<p>变分自编码器（Variational Auto-Encoder，VAE），希望构建一个从<strong>隐变量Z</strong> 生成 <strong>目标数据X</strong>的模型。更准确地讲，VAE是一个自动编码器，其编码分布在训练期间被正则化（正态分布），训练一个模型<spanclass="math inline">\(X=g(Z)\)</span>，这个模型能够将原来的概率分布映射到训练集的概率分布，以确保其潜在空间具有良好的属性，使我们能够生成一些新数据。</p><h3 id="ae">AE</h3><p>encoder：从“旧特征”表示生成“新特征”表示，降维</p><p>decoder：encoder相反</p><figure><img src="../../../../../image/VAE/Encoder_Decoder.png" alt="image-1" /><figcaption aria-hidden="true">image-1</figcaption></figure><p>找到一组最合适的编码解码器使得重建的数据与原始数据误差测量最小。</p><p><span class="math display">\[loss =\parallel{x-\hat{x}}\parallel^{2}=\parallel{x-d(z)}\parallel^{2}=\parallel{x-e(d(x))}\parallel^{2}\]</span></p><p>将编码器和解码器设置为<strong>神经网络</strong>并使用迭代优化过程学习最佳编码-解码方案，在每次迭代中，我们都会向<strong>Auto-Encoder</strong>架构（编码器后跟解码器）提供一些数据，我们将编码-解码输出与初始数据进行比较，并通过架构<strong>反向传播</strong>误差以更新网络的权重。</p><p>一旦自动编码器被训练，我们既有编码器又有解码器，但仍然没有真正的方法来产生任何<strong>新内容</strong>。乍一看，我们可能会认为，如果<strong>潜在空间足够规则</strong>（在训练过程中由编码器很好地“组织”），我们可以从该潜在空间中随机获取一个点并对其进行解码以获得新内容。然后，解码器的行为或多或少类似于生成对抗网络的生成器。然而，自动编码器的潜在空间的规律性是一个难题，它取决于初始空间中数据的分布、潜在空间的维度和编码器的架构。</p><figure><img src="../../../../../image/VAE/latent_space.png" alt="image-2" /><figcaption aria-hidden="true">image-2</figcaption></figure><h3 id="vae">VAE</h3><p>为了能够将自动编码器的解码器用于<strong>生成目的</strong>，我们必须确保潜在空间足够规则。获得这种规律性的一种可能的解决方案是在训练过程中引入<strong>明确的正则化</strong>。因此，变分自编码器可以定义为一个自动编码器，其训练被正则化以避免过度拟合并确保潜在空间具有良好的属性，从而实现生成过程。</p><p>为了引入一些潜在空间的正则化，我们对编码-解码过程进行了轻微的修改：我们不是将输入编码为单个点，而是将其<strong>编码为潜在空间上的分布</strong>。</p><ol type="1"><li>首先，将输入编码为在潜在空间上的<strong>分布</strong></li><li>其次，从该分布中<strong>采样</strong>来自潜在空间的点</li><li>第三，对采样点进行<strong>解码</strong>并计算重建误差</li><li>最后，<strong>重建误差</strong>通过网络反向传播</li></ol><figure><img src="../../../../../image/VAE/data_flow.png" alt="image-3" /><figcaption aria-hidden="true">image-3</figcaption></figure><p>编码分布被选择为<strong>正态分布</strong>，以便可以训练编码器返回描述这些高斯的<strong>均值和协方差矩阵</strong>。我们以这种方式确保潜在空间的局部和全局正则化（局部因为方差控制，全局因为均值控制）。</p><p>训练VAE时最小化的损失函数由“重建项”（在最后一层）和“正则化项”（在潜伏层上）组成，前者倾向于使编码-解码方案尽可能<strong>高性能</strong>，后者通过使编码器返回的分布<strong>接近标准正态分布</strong>来正则化潜在空间的组织。</p><figure><img src="../../../../../image/VAE/VAE_loss.png" alt="image-4" /><figcaption aria-hidden="true">image-4</figcaption></figure><p><span class="math display">\[loss =\parallel{x-\hat{x}}\parallel^{2}+KL[N(\mu_{x},\sigma_{x}),N(0,1)]=\parallel{x-d(z)}\parallel^{2}+KL[N(\mu_{x},\sigma_{x}),N(0,1)]\]</span></p><p>为了使生成过程成为可能而期望从潜在空间获得的规律性可以通过两个主要属性来表示：<strong>连续性</strong>（潜在空间中的两个接近点在解码后不应给出两个完全不同的内容）和<strong>完整性</strong>（对于选定的分布，从潜在空间采样的点在解码后应该给出“有意义的”内容）。</p><figure><img src="../../../../../image/VAE/latent_sample.png" alt="image-5" /><figcaption aria-hidden="true">image-5</figcaption></figure><p>通过正则化项，我们可以满足预期的连续性和完整性条件，但这是以训练数据上更高的重建误差为代价的。然而，重建误差和KL散度之间的权重是可以调整的。</p><figure><img src="../../../../../image/VAE/reparameter.png" alt="image-6" /><figcaption aria-hidden="true">image-6</figcaption></figure><p><span class="math display">\[loss =C\parallel{x-\hat{x}}\parallel^{2}+KL[N(\mu_{x},\sigma_{x}),N(0,1)]=C\parallel{x-f(z)}\parallel^{2}+KL[N(g(x),h(x))),N(0,1)]\]</span></p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>生成模型</category>
      
      <category>VAE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model</tag>
      
      <tag>distribution</tag>
      
      <tag>model/VAE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StackGAN</title>
    <link href="/posts/2a1/"/>
    <url>/posts/2a1/</url>
    
    <content type="html"><![CDATA[<p>StackGAN（Stacked Generative AdversarialNetworks）是一种生成对抗网络（GAN）模型，由中国香港科技大学的HanZhang等人在2017年提出。StackGAN是一种多尺度图像生成模型，可以生成高分辨率的真实感图像。</p><p>StackGAN的网络结构包括<strong>两个生成器网络</strong>和<strong>两个判别器网络</strong>，其中第一个生成器网络用于<strong>生成低分辨率</strong>的图像，第二个生成器网络则用于将<strong>低分辨率图像转换成高分辨率</strong>的真实感图像。而两个判别器网络则用于区分生成的图像与真实的图像之间的差异。</p><p>为了提高模型的性能，StackGAN还使用了条件变分自编码器（conditionalvariational autoencoder，CVAE）和循环一致性损失（cycle consistencyloss）等技术。CVAE可以通过潜在向量和条件信息来生成<strong>高质量的图像</strong>，而循环一致性损失则可以确保生成的图像与真实图像之间的<strong>转换是可逆的</strong>。</p><p>StackGAN可以应用于许多领域，如计算机视觉、图像处理、虚拟现实等。它可以生成高质量、高分辨率的真实感图像，具有很高的应用价值。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>生成模型</category>
      
      <category>生成对抗网络GAN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model</tag>
      
      <tag>model/GAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>条件变分自编码器CVAE</title>
    <link href="/posts/276c/"/>
    <url>/posts/276c/</url>
    
    <content type="html"><![CDATA[<p>CVAE是一种条件变分自编码器（Conditional VariationalAutoencoder）模型，它是基于<ahref="变分自编码器VAE.md">变分自编码器VAE</a>的一个变种。CVAE能够将外部给定的<strong>条件信息</strong>（如类别标签）融合到潜在空间中的分布中，从而实现对生成样本的控制。相比于传统的VAE模型，CVAE在学习过程中引入了额外的条件信息，并通过在生成器和判别器中添加相应的条件特征，来实现对条件信息的利用。</p><p>具体来说，在CVAE模型中，给定一个条件信息y和输入数据x，模型的目标是学习到一个潜在变量z的后验分布<spanclass="math inline">\(q(z|x, y)\)</span>和生成分布<spanclass="math inline">\(p(x|z,y)\)</span>。与传统的VAE模型类似，CVAE模型也包含了编码器和解码器两个部分。编码器将输入数据和条件信息映射到潜在变量的分布中，即<spanclass="math inline">\(q(z|x,y)\)</span>；解码器则将潜在变量和条件信息映射到生成数据的分布中，即<spanclass="math inline">\(p(x|z, y)\)</span>。</p><p>在CVAE模型的训练中，除了原来的重构误差和KL散度项之外，还需要考虑<strong>条件信息的损失</strong>。常用的条件信息损失包括<strong>分类损失和辅助信息损失</strong>。分类损失用于学习条件信息的判别能力，而辅助信息损失则通过引入额外的监督信息，帮助CVAE模型更好地学习到数据的潜在特征。</p><p>总体来说，CVAE模型可以通过引入条件信息，来实现对生成样本的控制，从而更好地适应实际应用场景。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>生成模型</category>
      
      <category>VAE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model</tag>
      
      <tag>distribution</tag>
      
      <tag>model/VAE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StarGAN</title>
    <link href="/posts/70cf/"/>
    <url>/posts/70cf/</url>
    
    <content type="html"><![CDATA[<p>StarGAN（Star Generative AdversarialNetworks）是一种生成对抗网络（GAN）模型，由韩国KAIST大学的YunjeyChoi等人在2018年提出。StarGAN是一种<strong>多域图像转换模型</strong>，它可以<strong>将输入图像转换为多个目标域的图像</strong>。与传统的单一域的图像转换模型不同，StarGAN可以处理多个领域的图像转换，例如将马转换成斑马、将男性转换成女性等。这种多域图像转换可以通过一个<strong>统一的生成器网络</strong>来实现，使得模型更加简单和高效。</p><p>StarGAN的网络结构包括<strong>一个生成器网络</strong>和<strong>一个判别器网络</strong>。生成器网络通过<strong>输入一张源域图像和目标域的标签</strong>，生成一张目标域的图像。而判别器网络则用于区分生成的图像与真实的目标域图像之间的差异。为了提高模型的性能，StarGAN还使用了<strong>循环一致性损失</strong>（cycleconsistency loss）和<strong>域一致性损失</strong>（domain consistencyloss）等技术，使得生成的图像与真实图像之间的转换更加准确和自然。</p><p>StarGAN可以应用于许多领域，例如计算机视觉、图像处理、虚拟现实等。它不仅可以用于图像转换，还可以用于音频、视频等多种类型的跨域数据转换。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>生成模型</category>
      
      <category>生成对抗网络GAN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model</tag>
      
      <tag>model/GAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生成对抗网络</title>
    <link href="/posts/94dc/"/>
    <url>/posts/94dc/</url>
    
    <content type="html"><![CDATA[<p><strong>GAN</strong>指的是生成对抗网络（Generative AdversarialNetworks），是由伊恩·古德费洛等人于2014年提出的一种<strong>深度学习模型</strong>，用于生成<strong>逼真的新数据</strong>，如图像、音频、视频等。</p><p>GAN由两个神经网络组成：<strong>生成器网络</strong>和<strong>判别器网络</strong>。</p><ol type="1"><li>生成器网络通过<strong>学习真实数据的分布</strong>，生成伪造的数据。</li><li>判别器网络则用于<strong>区分生成的数据和真实的数据</strong>，并将其分类为真实数据或伪造数据。</li></ol><p>在训练过程中，生成器和判别器网络<strong>相互博弈</strong>，生成器网络通过<strong>反向传播</strong>算法不断优化生成的数据，使其更接近真实数据的分布；判别器网络也通过<strong>反向传播</strong>算法不断优化对生成的数据和真实数据的分类准确度。</p><p>GAN的一个主要优点是可以生成逼真的数据，具有很高的创造性和想象力，可以用于许多领域，如计算机视觉、自然语言处理、音频处理等。GAN也有一些变体，如DCGAN（DeepConvolutional GAN）、WGAN（WassersteinGAN）等，它们通过改进GAN的结构和算法，进一步提高了GAN的性能和稳定性。</p>]]></content>
    
    
    <categories>
      
      <category>Concept</category>
      
      <category>AI</category>
      
      <category>生成模型</category>
      
      <category>生成对抗网络GAN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AI</tag>
      
      <tag>model/神经网络</tag>
      
      <tag>model</tag>
      
      <tag>model/GAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/3eeb/"/>
    <url>/posts/3eeb/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="quick-start">Quick Start</h2><h3 id="公式">公式</h3><p><span class="math display">\[\lim_{x\rightarrow 0^{+}}{\frac{1}{x^{a}}}\]</span></p><p><span class="math inline">\(\lim_{x\rightarrow0^{+}}{\frac{1}{x^{a}}}\)</span></p><h3 id="代码">代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="图片">图片</h3><figure><img src="../../image/hello-world/about.png"alt="image-20230219204217865" /><figcaption aria-hidden="true">image-20230219204217865</figcaption></figure><h3 id="视频">视频</h3><iframe src="//player.bilibili.com/player.html?aid=990700650&amp;bvid=BV1cx4y1M7ci&amp;cid=975414937&amp;page=1" scrolling="no" border="0" allowfullscreen="true"></iframe><h3 id="绘图">绘图</h3><pre><code class=" mermaid">graph LRA(test)--&gt;B(result);A--&gt;C(return);</code></pre><p><a href="https://yu-qi-hang.github.io/posts/4a17b156/">切换主题</a></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AddThis分享文章</title>
    <link href="/posts/3aa1/"/>
    <url>/posts/3aa1/</url>
    
    <content type="html"><![CDATA[<p>Next中集成了 <code>AddThis Share</code> ，但是需要进行配置。</p><p>下面是配置的步骤。</p><ol type="1"><li>来到 <a href="https://www.addthis.com/">Addthis 官网</a>完成注册。</li><li>选择工具选择 <code>Share Buttons</code> <span id="more"></span><imgsrc="../../../../image/AddThis/button.png"alt="image-20230214131030077" /></li><li>选择一种工具类型，一共有七种样式，我选择 <code>Expanding</code>，然后 continue。</li><li>四个栏目分别设置分享的目标，颜色，分享按钮位置以及隐藏分享的页面，配置完成。</li><li>获取配置所需ID，也就是模糊部分 <imgsrc="../../../../image/AddThis/id.png"alt="image-20230214132749541" /></li><li>点击定位规则添加定位规则配置，配置设备，博客地址，名字以及隐藏的页面<imgsrc="../../../../image/AddThis/settings.png"alt="image-20230214133816494" /> <imgsrc="../../../../image/AddThis/more_settings.png"alt="image-20230214133905902" /></li><li>打开主题配置文件，将刚刚的pubid配置到 <code>add_this_id</code>。</li></ol><p>完成了，但是好像不太好用，不会自动唤起QQ和微信，还需要扫码之类，太麻烦了，去掉了。</p><p>参考：<ahref="https://jasonssun.github.io/2019/06/15/Hexo搭建博客NexT主题之AddThis分享文章的配置/">Hexo搭建博客NexT主题之AddThis分享文章的配置</a></p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog/Hexo/Next</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指定页面侧边栏不显示目录</title>
    <link href="/posts/66a1/"/>
    <url>/posts/66a1/</url>
    
    <content type="html"><![CDATA[<h3 id="一背景">一、背景</h3><p>由于添加的小记页面是自建的page，所以会显示目录，但是从功能考虑并不需要目录。于是考虑删除该页面的目录部分。</p><span id="more"></span><h3 id="二实现">二、实现</h3><p>我的next版本为8.x，其余版本可能略有不同。</p><p>打开文件 <code>themes/next/layout/_macro/sidebar.njk</code>，可以找到如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;%- set display_toc = toc<span class="hljs-selector-class">.length</span> &gt; <span class="hljs-number">1</span> and display_toc%&#125;<br></code></pre></td></tr></table></figure><p>这是出现目录的判断条件，我们额外增加一个条件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;%- set display_toc = toc<span class="hljs-selector-class">.length</span> &gt; <span class="hljs-number">1</span> and display_toc and not page<span class="hljs-selector-class">.notoc</span>%&#125;<br></code></pre></td></tr></table></figure><p>增加的部分意思是 <code>page.notoc</code> 不为 <code>true</code>时才会出现目录。所以我们在需要关闭目录的文件的Front-matter中加上</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">notoc:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>即可关闭该页面的目录页。</p><h3 id="参考">参考</h3><p><ahref="https://blog.csdn.net/qq_44766883/article/details/113478757">在HexoNexT主题中关闭指定文章的Table of Contents</a></p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog/Hexo/Next</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加小记页面</title>
    <link href="/posts/a8c2/"/>
    <url>/posts/a8c2/</url>
    
    <content type="html"><![CDATA[<h3 id="一作用">一、作用</h3><p>用于记录一些小的，无法成篇的小碎片。为在线编辑提供一个入口。</p><h3 id="二实现">二、实现</h3><p>首先新建一个 <code>page</code> <span id="more"></span></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo n page write<br></code></pre></td></tr></table></figure><p>这样子我们在 <code>blog/source</code> 文件夹下面就得到一个<code>write</code> 文件夹，同时里面有一个 <code>index.md</code>。只需要编辑该文件即可配置小记页面。</p><p>在小记页面采取了 <code>html</code> 格式书写，方便自定义一些样式。在<code>write</code> 文件夹下新建 <code>card.css</code> 作为样式文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span>一些小的碎片记录<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>---<br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;card.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--start--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span>  <span class="hljs-attr">scale</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">width</span>=<span class="hljs-string">100%</span>  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index/a.jpg&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;false&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>测试标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>海内存知己，天涯若比邻<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>2023-02-13<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card-text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>吃夜宵1：没有蒸饺<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>上次在学校，出去吃夜宵。<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>：老板，蒸饺什么馅的？<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>老板：猪肉馅的。<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>：好的来一份！<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>老板：没有蒸饺。<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>2022-02-13<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--end--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果如下，增加 <code>card</code> 的数量就可以继续增加卡片。</p><figure><img src="../../../../image/addwrit/card.png"alt="image-20230214214310073" /><figcaption aria-hidden="true">image-20230214214310073</figcaption></figure><p><code>card.css</code> 文件主要内容如下，<code>card</code> 元素的<code>scale="true"</code> 意味着图像等比缩小，不加此参数则独占一行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.card</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">vertical-align</span>: top;    <br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0.7</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">15</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">2</span>), <span class="hljs-number">0</span> <span class="hljs-number">12px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">15</span>);<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0rem</span> <span class="hljs-number">0.5rem</span> <span class="hljs-number">2.5rem</span> <span class="hljs-number">0.5rem</span>;<br>    <span class="hljs-attribute">transition</span>: box-shadow .<span class="hljs-number">2s</span> ease-in-out;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br><span class="hljs-selector-class">.card</span><span class="hljs-selector-attr">[draggable=true]</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: move;<br>&#125;<br><span class="hljs-selector-class">.card</span><span class="hljs-selector-attr">[draggable=false]</span> &#123;<br>    <span class="hljs-attribute">cursor</span>: not-allowed;<br>&#125;<br><span class="hljs-selector-class">.card</span><span class="hljs-selector-attr">[scale=true]</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;<br>&#125;<br><span class="hljs-selector-class">.card</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">18px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">1</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">36px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">15</span>), <span class="hljs-number">0</span> <span class="hljs-number">36px</span> <span class="hljs-number">36px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-selector-class">.card</span> &gt; <span class="hljs-selector-tag">img</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.card-text</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.75rem</span>;<br>&#125;<br><span class="hljs-selector-class">.card-text</span> &gt; <span class="hljs-selector-tag">h3</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0.25rem</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.05rem</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1.5rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">600</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>    <span class="hljs-attribute">transition</span>: color .<span class="hljs-number">2s</span> ease-in-out;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.8</span>);<br>&#125;<br><span class="hljs-selector-class">.card-text</span> &gt; <span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">28</span>, <span class="hljs-number">87</span>, <span class="hljs-number">127</span>);<br>&#125;<br><span class="hljs-selector-class">.card-text</span> &gt; <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.9rem</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">0.8</span>);<br>&#125;<br><br><span class="hljs-selector-class">.card-text</span> &gt; <span class="hljs-selector-tag">h4</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.95rem</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.7</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog/Hexo/Next</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo实现在线编辑</title>
    <link href="/posts/c96c/"/>
    <url>/posts/c96c/</url>
    
    <content type="html"><![CDATA[<h3 id="一配置git-action">一、配置Git Action</h3><h4 id="什么是git-action">1. 什么是Git Action</h4><p><strong>Git Action</strong> 是Github提供的一个功能，只要做好配置文件，就能够自动将该仓库的代码拉取到服务器进行执行。</p><p>基于此，可以将hexo博客的部署进行自动化，只需要每次上传源代码文件即可自动部署。<span id="more"></span></p><p>具体的讲解可以参考官方文档 <ahref="https://docs.github.com/en/actions/learn-github-actions/understanding-github-actions">UnderstandingGitHub Actions - GitHub Docs</a> 。</p><h4 id="配置yml">2. 配置yml</h4><p>在博客根目录下面新建 <code>.github/workflows/随便什么名字.yml</code>配置好yml文件之后，每次只要push到remote就会自动识别执行。</p><p>在网上找了很多配置教程，但是都失败了，查看<font color=red>ERROR</font> 发现的原因有如下：</p><ol type="1"><li>Windows系统下的文件转到Linux之后无法正常识别。我的电脑是Windows，但是找到的教程全部都是使用的<code>runs-on: ubuntu-latest</code> 。</li><li>配置的私钥无法被正常识别，导致action服务器无法正确访问GitHub服务器。</li></ol><p>我的配置代码如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># workflow name</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Blog</span> <span class="hljs-string">CI</span><br><br><span class="hljs-comment"># main branch on push, auto run</span><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><br><span class="hljs-attr">env:</span><br>  <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span> <br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">windows-latest</span> <br>        <br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-comment"># check it to your workflow can access it</span><br>    <span class="hljs-comment"># from: https://github.com/actions/checkout</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Repository</span> <span class="hljs-string">main</span> <span class="hljs-string">branch</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@main</span><br>      <br>    <span class="hljs-comment"># from: https://github.com/actions/setup-node  </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">18.</span><span class="hljs-string">x</span> <br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@main</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;18.x&quot;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Dependencies</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install hexo-cli -g</span><br><span class="hljs-string"></span>      <span class="hljs-comment">#  npm install</span><br>    <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Generate</span> <span class="hljs-string">files</span><br>      <span class="hljs-comment"># 编译 markdown 文件</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        hexo clean</span><br><span class="hljs-string">        hexo generate</span><br><span class="hljs-string"></span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">hexo</span> <span class="hljs-string">blog</span><br>      <span class="hljs-comment"># 将编译后的博客文件推送到指定仓库</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        cd ./public &amp;&amp; git init &amp;&amp; git add .</span><br><span class="hljs-string">        git config --global user.name &#x27;&lt;用户名&gt;&#x27; </span><br><span class="hljs-string">        git config --global user.email &#x27;&lt;注册邮箱&gt;&#x27;</span><br><span class="hljs-string">        git add .</span><br><span class="hljs-string">        git commit -m &quot;GitHub Actions Auto Builder at $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span><br><span class="hljs-string">        git push -f --quiet &quot;https://$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;@github.com/&lt;用户名&gt;/&lt;用户名&gt;.github.io&quot; master:master</span><br></code></pre></td></tr></table></figure><p>下面解释一下：</p><ol type="1"><li><code>&lt;&gt;</code> 以及之间的内容是需要自己填写的，例如我的就是<code>git config --global user.name 'Yu-Qi-hang'</code></li><li>我的源代码和静态网页代码都存在 <code>&lt;用户名&gt;.github.io</code>仓库，源代码在 <code>main</code> 分支，所以最前面是main，部署在<code>master</code> 分支，所以最后是 <code>master</code> 。</li><li>一些插件新版本或者 <code>npm</code>直接下载的版本有问题，所以我push时候没有在 <code>igitignore</code>中添加 <code>node_modules</code> 因此我注释了 <code>npm install</code>因为这是安装这些东西的命令。</li><li><code>$&#123;&#123; secrets.ACCESS_TOKEN &#125;&#125;</code>是需要配置的一项，下面阐述如何配置。</li></ol><h4 id="配置token">3. 配置Token</h4><ol type="1"><li>参考 <ahref="../Git/Git安装以及Github连接本地.md">Git安装以及Github连接本地</a>获取Token。</li><li>进到源代码仓库，点击仓库的settings，展开左侧侧栏的<code>Secrets and variables</code> ，点击<code>Action</code> .</li><li>点击<code>New repository secrets</code> ，Name处输入<code>ACCESS_TOKEN</code>也就是配置文件中的名字，如果其他名字，对应更换即可，Secret处输入获得的Token，add即可。</li></ol><h3 id="二添加入口">二、添加入口</h3><p>已经完成了自动部署的配置，那么实现在线编辑只需要一个入口，指向GitHub仓库，我在小记页面底部添加了如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align: center&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://github.com/Yu-Qi-hang/Yu-Qi-hang.github.io/tree/main/source/write/index.md&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas fa-feather-alt&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这就是一个显示为羽毛笔的样式，点击即可跳转到我的write页面源码位置。只需要进行编辑在提交，就会自动部署更新。<imgsrc="../../../../image/HexoEditOnline/in.png"alt="image-20230214134912679" /></p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>blog/Hexo</tag>
      
      <tag>Git</tag>
      
      <tag>Git/GitAction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>添加文末感谢阅读</title>
    <link href="/posts/e307/"/>
    <url>/posts/e307/</url>
    
    <content type="html"><![CDATA[<h3 id="一目的">一、目的</h3><p>在文末添加阅读完成的提示，效果如下</p><figure><img src="../../../../image/thankslater/image-20230210225417851.png"alt="image-20230210225417851" /><figcaption aria-hidden="true">image-20230210225417851</figcaption></figure><span id="more"></span><h3 id="二方法">二、方法</h3><ol type="1"><li><p>在 <code>themes/next/layout/_macro/</code> 中新建<code>passage-ebd-tag.njk</code> 写入以下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span>&gt;<br>    &#123;% if not is_index %&#125;<br>        &lt;<span class="hljs-selector-tag">div</span> style=&quot;<span class="hljs-attribute">text-align</span>:center;<span class="hljs-attribute">color</span>: <span class="hljs-number">#ccc</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;&quot;&gt;-------------本文结束&lt;<span class="hljs-selector-tag">i</span> class=&quot;fab fa-angellist&quot;&gt;&lt;/<span class="hljs-selector-tag">i</span>&gt;感谢您的阅读-------------&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>    &#123;% endif %&#125;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>打开 <code>themes/next/layout/_macro/post.njk</code> ，在post-body和post-footer之间添加如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span>&gt;<br>  &#123;% if not is_index %&#125;<br>    &#123;% include &#x27;passage-end-tag<span class="hljs-selector-class">.njk</span>&#x27; %&#125;<br>  &#123;% endif %&#125;<br>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>在主题配置文件中添加如下代码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 文章末尾添加“本文结束”标记</span><br><span class="hljs-attr">passage_end_tag:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="参考">参考</h3><p><ahref="https://blog.csdn.net/Awt_FuDongLai/article/details/107430942">hexo笔记七：next主题添加版权声明_小镇攻城狮的博客-CSDN博客_next版权声明</a></p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog/Hexo/Next</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nodejs安装以及更新</title>
    <link href="/posts/efdd/"/>
    <url>/posts/efdd/</url>
    
    <content type="html"><![CDATA[<h3 id="安装">安装</h3><ol type="1"><li>Windows系统不能直接通过命令行安装Node.js，需要下载安装包进行安装。</li><li>官网下载非常缓慢，因此推荐到 <ahref="http://nodejs.cn/download/">Node.js中文网</a>进行下载。<span id="more"></span></li><li>下载之后除了安装路径可以自己选择一下，其他默认即可。</li><li>安装完成之后win+r呼出运行，输入cmd回车，输入 <code>node -v</code>查看是否安装成功。<img src="../../../../image/Nodejs/node_version.png"alt="image.png" />这样子就是成功了。</li><li>npm服务器在国外，使用非常慢，进行换源，换成阿里的</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org　<span class="hljs-comment">#换源</span><br>npm config list<span class="hljs-comment">#查看是否换源成功</span><br></code></pre></td></tr></table></figure><h3 id="更新">更新</h3><ol type="1"><li>更新就是和安装一样，下载新版本安装包，安装到旧版本安装位置自动覆盖即可。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>Environment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>environment</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git安装以及Github连接本地</title>
    <link href="/posts/f446/"/>
    <url>/posts/f446/</url>
    
    <content type="html"><![CDATA[<h3 id="一windows安装git">一、Windows安装Git</h3><p>到<a href="https://git-scm.com/download/">Git官网</a>下载对应版本进行安装。除了想更改安装路径的，全部默认即可。<span id="more"></span></p><h3 id="二-github连接本地">二、 Github连接本地</h3><p>右键打开Git Bash，注意用自己的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#配置注册Github的用户名和邮箱到本地</span><br><span class="hljs-comment">#在用户文件夹下的.gitconfig文件可以看到</span><br><br>git config --global user.name <span class="hljs-string">&quot;guest&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;email@xx.com&quot;</span><br><br><span class="hljs-comment">#生成密钥</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;email@xx.com&quot;</span><br><br><span class="hljs-comment">#回车默认存储位置，回车默认空密码，此时已经生成</span><br><span class="hljs-comment">#可以在用户文件夹的.ssh文件夹里面查看</span><br><br><span class="hljs-comment">#我们将其复制到粘贴板，方便等会粘贴</span><br>clip &lt; ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>在Github头像下面点击Settings，再点击SSH and GPGkeys，新建一个SSH，粘贴刚刚复制的密钥即可，名称自己定。</p><table><tbody><tr class="odd"><td><img src="../../../../image/Git/settings.png" alt="image-1" /></td><td><img src="../../../../image/Git/ssh_keys.png" alt="image-2" /></td></tr></tbody></table><p>回到Git Bash测试连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>连接成功 <img src="../../../../image/Git/connect.png"alt="image-3" /></p><h3 id="三github-token-生成">三、Github Token 生成</h3><p>TODO</p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>environment</tag>
      
      <tag>Git</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Microsoft_store消失</title>
    <link href="/posts/5911/"/>
    <url>/posts/5911/</url>
    
    <content type="html"><![CDATA[<h3 id="背景">背景</h3><p>由于Microsoftstore太卡了，照着网上教程乱弄，一次重启之后发现商店消失。<span id="more"></span></p><h3 id="步骤">步骤</h3><ol type="1"><li>win键之后输入<code>windows powershell</code>，点击用管理员打开。<imgsrc="../../../../image/Microsoft_store/open_with_admin.png"alt="image-1" /></li><li>输入<code>Get-AppxPackage -allusers | Select Name, PackageFullName</code>，查看Microsoft.WindowsStore右侧对应的文件名，复制下来<imgsrc="../../../../image/Microsoft_store/windows_store.png"alt="image-2" /></li><li>输入<code>Add-appxpackage -register "C:\Program Files\WindowsApps\刚刚复制的文件名\appxmanifest.xml" -disabledevelopmentmode</code>，回车。出现一闪而逝的绿色，表面部署完成，可以发现已经安装。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>增加右键文件夹打开方式</title>
    <link href="/posts/d435/"/>
    <url>/posts/d435/</url>
    
    <content type="html"><![CDATA[<p>在win系统中，右键文件有一个选项为打开方式，点击可以选择打开文件的方式，但是右键文件夹没有此功能。下面介绍一下如何增添此功能。<span id="more"></span></p><ol type="1"><li><strong>win+r</strong> 打开运行</li><li>输入 <strong>regedit</strong> 回车进入注册表</li><li>找到这个目录 **HKEY_CLASSES_ROOT*<imgsrc="../../../../image/RightClick/dict.png" alt="image-1" /></li><li>右键shell新建项，命名为openwith，在右边那一栏里双击默认那两个字，在出来的文本框里输入“打开方式”或者其他什么想要右键能看到的提示。</li><li>右键openwith新建项，命名为<strong>command</strong>，在右边那一栏里有个默认，双击它，在数值数据那里输入<ol type="1"><li>“C:32.exe Shell32.dll,OpenAs_RunDLL %1”或者</li><li>“C:32.exe Shell32.dll,OpenAs_RunDLL %1”</li></ol></li><li>到底输入哪个的话，自己搜索电脑里面哪个位置存在<strong>rundll32.exe</strong></li><li>效果如下：<img src="../../../../image/RightClick/result.png"alt="image-2" />只需要点击该项就会弹出选择窗口，选择打开方式。</li></ol><p>想法的产生开始于对文件夹增加右键的VSCode打开方式之后，又增加Typora打开方式。想到这样子如果之后还要加，显得过于累赘，为什么不能像右键文件一样可以选择打开方式呢？于是借鉴了右键文件增加打开方式的方法，实现了该功能。</p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云盘挂载</title>
    <link href="/posts/c68c/"/>
    <url>/posts/c68c/</url>
    
    <content type="html"><![CDATA[<h3 id="背景">背景</h3><p>使用阿里云盘自带的视频播放有很多限制，而且使用体验极差。但是potplayer可以有很多个性化播放设置。想在本地播放阿里云盘中的视频需要下载的话很麻烦，因此借助alist将云盘挂载到本地，再调用potplayer的网络媒体播放功能直接播放。<span id="more"></span></p><h3 id="更新">更新</h3><p>阿里云盘开发官方api通道，到https://github.com/alist-org/alist/releases下载最新版进行安装，Windows的是直接覆盖即可，如何按照官方文档的阿里云盘open进行配置即可。</p><h3 id="实现步骤">实现步骤</h3><h4 id="alist下载安装与运行">1. Alist下载安装与运行</h4><p><a href="https://www.aliyundrive.com/s/dLPP5VxLpTN">提取码：2u88</a>下载之后拖动到自己喜欢的地方存起来，比如我存在这里<imgsrc="../../../../image/AliDrive/save.png" alt="image.png" />点击资源管理器路径位置输入<strong>cmd</strong> 回车打开终端<imgsrc="../../../../image/AliDrive/open_terminal.png" alt="image.png" />输入 <strong>alist.exe server</strong>回车运行程序，记住密码和端口号<img src="../../../../image/AliDrive/run.png" alt="image.png" /> <imgsrc="../../../../image/AliDrive/port.png" alt="image.png" /></p><h4 id="alist配置">2. Alist配置</h4><blockquote><p>浏览器输入<strong>127.0.0.1:5244</strong>进入配置界面，用户名为admin，密码为刚才终端显示的密码，登录。可以在管理面板修改密码，按照<ahref="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">阿里云盘</a>进行配置如下：</p></blockquote><figure><img src="../../../../image/AliDrive/info.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><img src="../../../../image/AliDrive/add_drive.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><figure><img src="../../../../image/AliDrive/settings.png" alt="image.png" /><figcaption aria-hidden="true">image.png</figcaption></figure><p>关于挂载路径，可以自己定义，我挂载了多个云盘，就选择把阿里云盘的两个账号分别设置为<code>/aliyun/0</code> 和 <code>/aliyun/1</code>。下面介绍根文件夹和刷新令牌获取方式</p><ol type="1"><li>刷新令牌：登录网页版阿里云盘，f12打开开发者模式，按照如同方式找到<imgsrc="../../../../image/AliDrive/tokens.png" alt="image.png" /></li><li>根文件夹：进入自己希望挂载的文件夹，我想挂的是video那么进入之后地址folder/后面的一串就是<imgsrc="../../../../image/AliDrive/roots.png" alt="image.png" /></li></ol><p>对于<strong>阿里云盘分享</strong>挂载，好处是不用转存到自己的云盘，占用空间，缺点是他人解除分享之后会失效。操作和上述过程相同，但是多一项叫做<strong>分享ID</strong>的项目，是指<strong>/s/.../folder</strong>中的...部分。<imgsrc="../../../../image/AliDrive/share.png" alt="image.png" /></p><h4 id="potplayer添加播放">3. potplayer添加播放</h4><p><a href="https://www.aliyundrive.com/s/motNMUBjym6">提取码：1p6i</a>下载完成之后双击解压即可使用，是便携版软件。把文件夹放到喜欢的地方，创建PotPlayerMini64.exe的快捷方式，放到</p><p>C:Menu</p><p>里面</p><p>如图配置，账号密码为自己刚刚保存的账号密码，即可完成如果上一步的挂载路径是其他形式，以我的<code>/aliyun/1</code>为例，这路的路径就应该改为<code>127.0.0.1/dav/aliyun/1</code>。 <imgsrc="../../../../image/AliDrive/add_list.png" alt="image.png" /></p><h4 id="开机自启挂载程序">4. 开机自启挂载程序</h4><p><a href="https://www.aliyundrive.com/s/GWGGZuckdpF">提取码：62ow</a>下载这个脚本和alist.exe放到一个文件夹里面，创建这个脚本的快捷方式，电脑win+r输入shell:startup，将快捷方式放进电脑的启动文件夹内。</p><table><tbody><tr class="odd"><td><img src="../../../../image/AliDrive/startup.png"alt="image.png" /></td><td><img src="../../../../image/AliDrive/quickstart.png"alt="image.png" /></td></tr></tbody></table><h3 id="参考资料">参考资料</h3><ol type="1"><li><ahref="https://www.bilibili.com/video/BV1vd4y117CV/?spm_id_from=333.999.0.0&amp;vd_source=bab75b3ccf1b5ff4356ab5c39c33eca7">【Alist网盘挂载】电脑端Alist挂载网盘资源并实现webdav播放_哔哩哔哩_bilibili</a></li><li><ahref="https://alist.nn.ci/zh/guide/drivers/aliyundrive.html">阿里云盘</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>alist</tag>
      
      <tag>webdav</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绳结技术</title>
    <link href="/posts/639b/"/>
    <url>/posts/639b/</url>
    
    <content type="html"><![CDATA[<h3 id="认识绳子">认识绳子</h3><p>部位：绳头，绳尾，主绳 <imgsrc="../../../image/shengjie/231029shengjie1.png" alt="image-1" />弯个弯：绳👂 <img src="../../../image/shengjie/231029shengjie2.png"alt="image-2" /> 打个结：绳结 绳结的圈圈：绳环 绳结的节：节目 <imgsrc="../../../image/shengjie/231029shengjie3.png" alt="image-3" /></p><h3 id="绳结">绳结</h3><h4 id="简单结">简单结</h4><p>简称单结 <img src="../../../image/shengjie/231029shengjie4.png"alt="image-4" /></p><h4 id="平节妈妈结">平节/妈妈结</h4><ol type="1"><li>绳尾从外向内穿过绳耳，再从从上到下从外侧下来，最后再次穿过绳耳，将绳头绳尾和主绳一起往外拉</li></ol><figure><img src="../../../image/shengjie/231029shengjie5.png" alt="image-5" /><figcaption aria-hidden="true">image-5</figcaption></figure><ol type="1"><li>绕在腰上，左搭右一个简单结，右搭左再一个</li></ol><figure><img src="../../../image/shengjie/231029shengjie6.png" alt="image-6" /><figcaption aria-hidden="true">image-6</figcaption></figure><h4 id="接绳结">接绳结</h4><p>绳尾从外向内穿过绳耳，再从从上到下从外侧下来，最后从两环之间穿过，将绳头绳尾和主绳一起往外拉<img src="../../../image/shengjie/231029shengjie7.png"alt="image-7" /></p><h4 id="水手结渔人结">水手结/渔人结</h4><p>绳头绳尾对向重叠一部分，分别绕着主绳打一个单结 <imgsrc="../../../image/shengjie/231029shengjie8.png" alt="image-8" /></p><h4 id="双重水手结">双重水手结</h4><p>绳头绳尾对向重叠一部分，分别绕着主绳打一个绕两圈的单结（向内绕） <imgsrc="../../../image/shengjie/231029shengjie9.png" alt="image-9" /></p><h4 id="双套结">双套结</h4><p>双手拉着主绳，一个向前绕，一个向后，叠起来 <imgsrc="../../../image/shengjie/231029shengjie10.png" alt="image-10" /></p><h4 id="双环结不用记">双环结/不用记</h4><p>双手拉着主绳，同方向绕，叠起来</p><h4 id="水结">水结</h4><p>一个单结，然后绳尾顺着绳头逆向走一遍 <imgsrc="../../../image/shengjie/231029shengjie11.png" alt="image-11" /></p><h4 id="工程蝴蝶结">工程蝴蝶结</h4><p>主绳搭在手上，外侧顺势在手上绕一圈，然后再绕到虎口处，中间一圈从上侧外拉一部分，从手掌和绳子之间穿出，取下绳子，收紧。<img src="../../../image/shengjie/231029shengjie12.png"alt="image-12" /></p><h4 id="八字结">八字结</h4><p>主绳搭载手上，绳尾绕主绳一圈半后穿过绳环 <imgsrc="../../../image/shengjie/231029shengjie13.png" alt="image-13" /></p><h4id="八字结系统双重八字结防滑结绳尾结">八字结系统：双重八字结+防滑结+绳尾结</h4><p><img src="../../../image/shengjie/231029shengjie14.png"alt="image-14" /> <imgsrc="../../../image/shengjie/231029shengjie15.png" alt="image-15" /></p><h4 id="布林结">布林结</h4><figure><img src="../../../image/shengjie/231029shengjie16.png"alt="image-16" /><figcaption aria-hidden="true">image-16</figcaption></figure><h4 id="单手布林结">单手布林结</h4><p>忘记了，没法更新</p>]]></content>
    
    
    <categories>
      
      <category>Enjoy</category>
      
      <category>天工开物</category>
      
    </categories>
    
    
    <tags>
      
      <tag>livelihood</tag>
      
      <tag>绳结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Anaconda下载、安装与使用</title>
    <link href="/posts/8c26/"/>
    <url>/posts/8c26/</url>
    
    <content type="html"><![CDATA[<h3 id="下载安装">1. 下载安装</h3><ol type="1"><li><p>来到 <a href="https://www.anaconda.com/">anaconda官网</a>点击download进行下载。嫌慢的可以来 <ahref="https://mirrors.zju.edu.cn/">镜像站</a> 下载。</p></li><li><p>运行下载好的程序开始安装，next-&gt;agree-&gt;next，选择自己希望的安装位置后一路默认完成。</p><figure><img src="../../../../image/Anaconda/install_place.png" alt="image-1" /><figcaption aria-hidden="true">image-1</figcaption></figure></li><li><p>配置环境变量。右键此电脑打开属性，打开高级系统设置，打开环境变量</p><table><thead><tr class="header"><th><img src="../../../../image/Anaconda/attribute.png"alt="image-2" /></th><th><img src="../../../../image/Anaconda/advanced_setting.png"alt="image-3" /></th><th><img src="../../../../image/Anaconda/env_para.png"alt="image-4" /></th></tr></thead><tbody></tbody></table><p>选中系统变量中的Path点击编辑，新建，增加两条路径 <imgsrc="../../../../image/Anaconda/edit.png" alt="image-5" /><imgsrc="../../../../image/Anaconda/add_path.png" alt="image-6" /></p></li><li><p>检验win+R打开运行，cmd回车打开终端，如下说明安装成功。</p><p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">conda <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure></p><figure><img src="../../../../image/Anaconda/conda_version.png" alt="image-7" /><figcaption aria-hidden="true">image-7</figcaption></figure></li><li><p>换源，增加国内下载源以加快速度。可以参考<ahref="https://mirror.zju.edu.cn/docs/anaconda/">浙大镜像站</a></p><p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#添加下载源</span><br>conda config --add channels http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/free/</span><br>conda config --add channels http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>pkgs<span class="hljs-regexp">/main/</span><br>conda config --add channels http:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/anaconda/</span>cloud<span class="hljs-regexp">/conda-forge/</span><br><span class="hljs-comment">#删除默认源</span><br>conda config --remove channels defaults<br></code></pre></td></tr></table></figure></p></li><li><p>查看通道地址 <figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">conda <span class="hljs-built_in">config</span> <span class="hljs-comment">--show channels</span><br></code></pre></td></tr></table></figure></p><p>此时显示如下 <img src="../../../../image/Anaconda/channels.png"alt="image-8" /> 需要关闭defaults通道。找到 .condarc 文件。我的位于<code>C:\Users\26594\</code>文件夹下，用记事本打开，在-defaults前加一个#，保存即可。</p><table><thead><tr class="header"><th><img src="../../../../image/Anaconda/condarc.png"alt="image-9" /></th><th><img src="../../../../image/Anaconda/new_channels.png"alt="image-10" /></th></tr></thead><tbody></tbody></table></li></ol><h3 id="使用">2. 使用</h3><ol type="1"><li><p>常用命令</p><table><thead><tr class="header"><th>查看所有虚拟环境</th><th>conda env list</th></tr></thead><tbody><tr class="odd"><td>创建XXX 环境</td><td>conda create -n XXX：</td></tr><tr class="even"><td>激活/启用 XXX环境</td><td>activate XXX</td></tr><tr class="odd"><td>移除XXX环境</td><td>conda env remove -n XXX</td></tr><tr class="even"><td>退出当前环境</td><td>conda deactivate</td></tr><tr class="odd"><td>列出当前环境所以包</td><td>conda list</td></tr><tr class="even"><td>安装XXX包</td><td>conda install XXX</td></tr><tr class="odd"><td>移除XXX包</td><td>conda remove XXX</td></tr><tr class="even"><td></td><td></td></tr><tr class="odd"><td></td><td></td></tr></tbody></table></li><li><p>在VSCode中使用conda环境</p><p>cmd中执行</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda init powershell<br></code></pre></td></tr></table></figure></p><p>选择一个文件夹用vscode打开，<strong>ctrl+`</strong>打开终端，执行condaactivate XXX即可。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>Environment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>conda</tag>
      
      <tag>environment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 更新软件源</title>
    <link href="/posts/15d3/"/>
    <url>/posts/15d3/</url>
    
    <content type="html"><![CDATA[<h3 id="一备份软件源配置">一、备份软件源配置</h3><p><code>ctrl+alt+t</code>打开终端，执行下面代码备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br></code></pre></td></tr></table></figure><h3 id="二更换软件源">二、更换软件源</h3><p>在终端中执行下面命令打开配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure><p>按下 <code>i</code>进入编辑模式，将文件内容替换为需要使用的文件源，国内常见如下依次按下<code>ESC</code> <code>:</code>之后输入<code>wq</code>回车保存</p><h3 id="三更新">三、更新</h3><p>执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<span class="hljs-comment">#更新软件源</span><br>apt-get upgrade<span class="hljs-comment">#更新软件</span><br></code></pre></td></tr></table></figure><h3 id="常见国内镜像">常见国内镜像</h3><p><strong>阿里源</strong>地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p><strong>华为源</strong>地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb https://repo.huaweicloud.com/ubuntu/ focal main restricted<br>deb https://repo.huaweicloud.com/ubuntu/ focal-updates main restricted<br>deb https://repo.huaweicloud.com/ubuntu/ focal universe<br>deb https://repo.huaweicloud.com/ubuntu/ focal-updates universe<br>deb https://repo.huaweicloud.com/ubuntu/ focal-backports main restricted universe<br>deb https://repo.huaweicloud.com/ubuntu/ focal-security main restricted<br>deb https://repo.huaweicloud.com/ubuntu/ focal-security universe<br></code></pre></td></tr></table></figure><p><strong>清华源</strong>地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe ultiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe ultiverse<br></code></pre></td></tr></table></figure><p><strong>中科大源</strong>地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse<br>deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse<br></code></pre></td></tr></table></figure><p><strong>163源</strong>地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">deb http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.163.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>Environment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GithubPages_Hexo搭建个人博客</title>
    <link href="/posts/fa96/"/>
    <url>/posts/fa96/</url>
    
    <content type="html"><![CDATA[<h3 id="一hexo搭建本地博客">一、hexo搭建本地博客</h3><h4 id="快速搭建hexo博客">1. 快速搭建hexo博客</h4><p>需要安装好node.js，可以参考<ahref="../Environment/Nodejs安装以及更新.md">Nodejs安装以及更新</a>，也需要安装好Git，可以参考<ahref="../Git/Git安装以及Github连接本地.md">Git安装以及Github连接本地</a>，之后随便位置右键打开GitBash。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g hexo-cli <span class="hljs-comment">#安装hexo模块</span><br><span class="hljs-built_in">cd</span> /myfiles <span class="hljs-comment">#进到希望存放的目录，我是C盘下的Myfiles文件夹</span><br>hexo init BLOG <span class="hljs-comment">#初始化配置</span><br><span class="hljs-built_in">cd</span> BLOG <span class="hljs-comment">#进入博客根目录</span><br>npm install <span class="hljs-comment">#安装配置插件</span><br>hexo g <span class="hljs-comment">#生成博客</span><br>hexo s <span class="hljs-comment">#本地预览博客</span><br></code></pre></td></tr></table></figure><p>此时浏览器输入 <code>127.0.0.1:4000</code>就看到了最初的界面<imgsrc="../../../../image/GithubPages_Hexo/home.png" alt="image.png" /></p><h4 id="hexo常用命令介绍">2. hexo常用命令介绍</h4><table><thead><tr class="header"><th>hexo g</th><th>generate生成静态网页</th></tr></thead><tbody><tr class="odd"><td>hexo s</td><td>server本地挂载预览网页</td></tr><tr class="even"><td>hexo d</td><td>deploy部署网页到远程服务器</td></tr><tr class="odd"><td>hexo clean</td><td>清理已生成的网页</td></tr></tbody></table><h4 id="hexo博客美化">3. hexo博客美化</h4><p>内容比较多，另外开一篇。</p><h3 id="二hexo博客部署到github-pages">二、hexo博客部署到GithubPages</h3><h4 id="连接github和本地">1. 连接Github和本地</h4><p>参考<ahref="../Git/Git安装以及Github连接本地.md">Git安装以及Github连接本地</a></p><h4 id="新建github的仓库用于部署网页">2.新建Github的仓库用于部署网页</h4><ol type="1"><li>登录Github新建一个名为<code>&lt;username&gt;.github.io</code>的仓库，这里<username>是指用户名。这样子之后的网页地址就是<code>&lt;username&gt;.github.io</code>，其他名称也可以，不过会变成<code>&lt;username&gt;.github.io/repo_name</code>，记得勾选初始化README。</li><li>点击仓库的Settings而不是头像下面的，进入仓库的设置，点击左侧Pages进行配置。<img src="../../../../image/GithubPages_Hexo/pagesetting.png"alt="image.png" /></li></ol><h4 id="配置本地博客">3. 配置本地博客</h4><p>打开博客根目录的 <strong>_config.yml</strong>文件，将最后面部分的进行修改配置，具体仓库地址按照图中复制得到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:Yu-Qi-hang/Yu-Qi-hang.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p><img src="../../../../image/GithubPages_Hexo/ssh.png"alt="image.png" /> 另外GiteePages操作类似，但是需要实名认证和申请，另外需要改成。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span><br>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:Yu-Qi-hang/Yu-Qi-hang.github.io.git</span><br>    <span class="hljs-attr">gitee:</span> <span class="hljs-string">git@gitee.com:Yu-Qi-hang/yu-qi-hang.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h4 id="部署到远程仓库">4. 部署到远程仓库</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#安装部署工具</span><br><span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-deployer-git</span> <span class="hljs-string">--save</span><br><span class="hljs-comment">#生成网页，进行部署</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">g</span><br><span class="hljs-string">hexo</span> <span class="hljs-string">d</span><br></code></pre></td></tr></table></figure><p>每次更新，Github会自动部署，Gitee需要手动点击更新，可以看到部署成功<imgsrc="Github%20Pages+Hexo搭建个人博客/1672908846691-b412dc41-e7fa-42dd-9774-021eb6130385.png"alt="image.png" /></p><h3 id="三保存源码到github">三、保存源码到Github</h3><p>之前的部署是在master分支，但是现在Github的默认分支是main，因此可以将源码推送到main进行备份。将当前博客的名称进行修改，随便什么名字。之后，进入到博客所在目录，执行下面操作</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">clone</span> <span class="hljs-string">&lt;你的博客所在仓库的链接&gt;</span> <span class="hljs-string">&lt;你原先的博客文件夹名称&gt;</span><br></code></pre></td></tr></table></figure><p>拉取成功之后，cd 进入该目录，可以发现处于main分支 <imgsrc="Github%20Pages+Hexo搭建个人博客/1672929691216-6a9ae5c4-e5d7-4fcd-8378-a7830d6661d4.png"alt="image.png" />我们把原先博客目录下的东西全部复制到这里，执行下列操作即可推送</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">.</span><br><span class="hljs-string">git</span> <span class="hljs-string">commit</span> <span class="hljs-string">-m</span> <span class="hljs-string">&quot;000&quot;</span><br><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">-f</span><br></code></pre></td></tr></table></figure><p>同时执行hexo的命令可以进行部署。</p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo_Typora实现相对路径图片显示</title>
    <link href="/posts/5934/"/>
    <url>/posts/5934/</url>
    
    <content type="html"><![CDATA[<h3 id="背景">背景</h3><p>之前都是使用的图床，但是有时候加载不稳定，所以现在都是把图片存在本地一起使用。但是hexo生成的静态网页会无法识别路径，因此需要插件辅助实现。hexo文档有提及方法，但是不是不方便，就是失效。</p><h3 id="实现">实现</h3><ol type="1"><li>安装插件 <code>npm install hexo-asset-img --save</code>这是在github找到的可用插件</li><li>打开配置文件，将 <code>post_asset_folder</code> 设置为<code>true</code></li><li>打开typora偏好设置的图像一栏如下图设置，这样子复制的图片就会自动保存到文件同名同目录的文件夹里面，并且自动转义成相对路径<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片标签]</span>(文件名/图片名)<br></code></pre></td></tr></table></figure> <img src="../../../../image/Hexo_Typora/path.png"alt="image.png" /></li></ol>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo主题选择以及自定义配置</title>
    <link href="/posts/2cc5/"/>
    <url>/posts/2cc5/</url>
    
    <content type="html"><![CDATA[<h3 id="一hexo主题选择">一、Hexo主题选择</h3><p>进入主题网站 <a href="https://hexo.io/themes/"class="uri">https://hexo.io/themes/</a>选择自己喜欢的主题，我选择的是Next主题，比较简洁美观，而且不需要封面图片。参考github的仓库 <a href="https://github.com/next-theme/hexo-theme-next"class="uri">https://github.com/next-theme/hexo-theme-next</a>可以进行安装。</p><ol type="1"><li><p>进入博客根目录</p></li><li><p>执行下面代码。</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">git</span> <span class="hljs-string">clone</span> <span class="hljs-string">https://github.com/next-theme/hexo-theme-next</span> <span class="hljs-string">themes/next</span><br></code></pre></td></tr></table></figure></p></li><li><p>这时候进入 <strong>themes </strong>文件夹可以发现一个<strong>next</strong> 文件夹，说明安装成功。</p></li><li><p>打开 _config.yml ，拉到最后，找到 theme</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">landscape</span><br><span class="hljs-comment">#改成</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br></code></pre></td></tr></table></figure></p></li><li><p>执行网页生成和预览命令可以查看</p></li></ol><h3 id="二个性化配置">二、个性化配置</h3><p>参考 <ahref="http://theme-next.iissnan.com/getting-started.html">Next使用文档</a>进行各种配置。需要注意的是在 Hexo 中有两份主要的配置文件，其名称都是_config.yml。 其中，一份位于<strong>站点根目录</strong>下，主要包含 Hexo本身的配置；另一份位于<strong>主题目录</strong>下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong>，后者称为 <strong>主题配置文件</strong>。</p><ol type="1"><li><p>主题配置文件可以选择 scheme，最新版有四种外观，这里选择最新增加的Gemini。</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Schemes</span><br><span class="hljs-comment"># scheme: Muse</span><br><span class="hljs-comment"># scheme: Mist</span><br><span class="hljs-comment"># scheme: Pisces</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Gemini</span><br></code></pre></td></tr></table></figure></p></li><li><p>站点配置文件可以选择语言，这里选择简体中文</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure></p></li><li><p>在主题配置文件设置菜单，找到menu，可以先全部打开，显得比较丰富，之后选择性关闭部分菜单页面，但是除了归档页，其他页面都需要自己生成。</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-home</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-user</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-th</span><br>  <span class="hljs-attr">archives:</span> <span class="hljs-string">/archives/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-archive</span><br>  <span class="hljs-attr">schedule:</span> <span class="hljs-string">/schedule/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-calendar</span><br>  <span class="hljs-attr">sitemap:</span> <span class="hljs-string">/sitemap.xml</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-sitemap</span><br>  <span class="hljs-attr">commonweal:</span> <span class="hljs-string">/404/</span> <span class="hljs-string">||</span> <span class="hljs-string">fa</span> <span class="hljs-string">fa-heartbeat</span><br></code></pre></td></tr></table></figure></p></li><li><p>生成分类页，在博客根目录执行<code>hexo new page categories</code>即可生成页面，打开根目录下的<code>source/categories/index.md</code>，默认内容是</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-01-05 22:02:23</span><br></code></pre></td></tr></table></figure></p></li><li><p>我们增加一行，使其变成</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2023-01-05 22:02:23</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br></code></pre></td></tr></table></figure></p></li><li><p>标签页做法类似，只需要把categories改成tags即可，关于页则是生成pageabout之后自己编辑即可。</p></li><li><p>在站点配置文件设置个人信息</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">围墙里的鱼的围墙</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;个人博客&#x27;</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">围墙里的鱼</span><br></code></pre></td></tr></table></figure></p></li><li><p>在主题配置文件设置个人头像，文件放在主题目录的<code>source/images/</code>文件夹下面</p><p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">avatar:</span><br>  <span class="hljs-attr">url:</span> <span class="hljs-string">/images/avatar.jpg</span><br></code></pre></td></tr></table></figure></p></li><li><p>侧边栏社交功能，只显示图标</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">social:<br>  GitHub: https://github.com/yu-qi-hang || fab fa-github<br>  E-Mail: 2659464450@qq.com || fa fa-envelope<br>social_icons:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>  icons_only: <span class="hljs-literal">true</span><br>  transition: <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure></p></li><li><p>右上角添加fork yourgithub。在themes/next/layout/_layout.njk中添加代码</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#在body的headband div后面添加如下代码</span><br>&lt;div class=<span class="hljs-string">&quot;forkme&quot;</span>&gt;<br>  &lt;a href=<span class="hljs-string">&quot;https://github.com/yu-qi-hang&quot;</span> class=<span class="hljs-string">&quot;github-corner&quot;</span> aria-label=<span class="hljs-string">&quot;View source on GitHub&quot;</span>&gt;&lt;svg width=<span class="hljs-string">&quot;80&quot;</span> height=<span class="hljs-string">&quot;80&quot;</span> viewBox=<span class="hljs-string">&quot;0 0 250 250&quot;</span> style=<span class="hljs-string">&quot;fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;&quot;</span> aria-hidden=<span class="hljs-string">&quot;true&quot;</span>&gt;&lt;path d=<span class="hljs-string">&quot;M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z&quot;</span>&gt;&lt;/path&gt;&lt;path d=<span class="hljs-string">&quot;M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2&quot;</span> fill=<span class="hljs-string">&quot;currentColor&quot;</span> style=<span class="hljs-string">&quot;transform-origin: 130px 106px;&quot;</span> class=<span class="hljs-string">&quot;octo-arm&quot;</span>&gt;&lt;/path&gt;&lt;path d=<span class="hljs-string">&quot;M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z&quot;</span> fill=<span class="hljs-string">&quot;currentColor&quot;</span> class=<span class="hljs-string">&quot;octo-body&quot;</span>&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;style&gt;.github-corner:hover .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;@keyframes octocat-wave&#123;0%,100%&#123;transform:rotate(0)&#125;20%,60%&#123;transform:rotate(-25deg)&#125;40%,80%&#123;transform:rotate(10deg)&#125;&#125;@media (max-width:500px)&#123;.github-corner:hover .octo-arm&#123;animation:none&#125;.github-corner .octo-arm&#123;animation:octocat-wave 560ms ease-in-out&#125;&#125;&lt;/style&gt;<br>&lt;/div&gt;<br><span class="hljs-comment">#如果要实现屏幕变小之后不显示，在head的title后面添加如下代码</span><br>  &lt;style&gt;<br>  .forkme&#123;<br>display: none;<br>&#125;<br>  @media (min-width: 768px) &#123;<br>.forkme&#123;<br>display: inline;<br>&#125;<br>  &#125;<br>  &lt;/style&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>增加版权声明，在主题配置文件中找到下面的并且修改</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">creative_commons:<br>  license: by-nc-sa<br>  sidebar: <span class="hljs-literal">false</span><br>  post: <span class="hljs-literal">true</span><br>  language:<br></code></pre></td></tr></table></figure></p></li><li><p>增加加载进度条，在主题配置文件中找到pace，设为true。</p></li></ol><h3 id="三第三方服务集成">三、第三方服务集成</h3><h4 id="数学公式渲染">数学公式渲染</h4><p>主题配置文件把 mathjax 的 enable 设为 true</p><h4 id="local-search">Local Search</h4><p>修改 BLOG_modules-generator-searchdb文件夹下的js后缀为json</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#安装插件</span><br>npm install hexo-generator-searchdb --save<br><br><span class="hljs-comment">#修改站点配置文件</span><br>search:<br>  path: search.json<br>  field: post<br>  format: html<br>  <span class="hljs-built_in">limit</span>: 10000<br><span class="hljs-comment">#修改主题配置文件</span><br>local_search:<br>  <span class="hljs-built_in">enable</span>: <span class="hljs-literal">true</span><br>top_n_per_article: -1<br></code></pre></td></tr></table></figure><h4 id="标签云">标签云</h4><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-tag-cloud<br></code></pre></td></tr></table></figure><p>配置文件 在 BLOG_macro.njk 文件中添加代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% <span class="hljs-keyword">if</span> site.tags.length &gt; 1 %&#125;<br>&lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span> src=<span class="hljs-string">&quot;/js/tagcloud.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> charset=<span class="hljs-string">&quot;utf-8&quot;</span> src=<span class="hljs-string">&quot;/js/tagcanvas.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;div class=<span class="hljs-string">&quot;widget-wrap&quot;</span>&gt;<br>    &lt;h3 class=<span class="hljs-string">&quot;widget-title&quot;</span>&gt;Tag Cloud&lt;/h3&gt;<br>    &lt;div <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;myCanvasContainer&quot;</span> class=<span class="hljs-string">&quot;widget tagcloud&quot;</span>&gt;<br>        &lt;canvas width=<span class="hljs-string">&quot;250&quot;</span> height=<span class="hljs-string">&quot;250&quot;</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;resCanvas&quot;</span> style=<span class="hljs-string">&quot;width=100%&quot;</span>&gt;<br>            &#123;&#123; list_tags() &#125;&#125;<br>        &lt;/canvas&gt;<br>    &lt;/div&gt;<br>&lt;/div&gt;<br>&#123;% endif %&#125;<br></code></pre></td></tr></table></figure><p>添加完效果如图<img src="../../../../image/Hexoidentify/highlight.png"alt="image.png" /></p><h4 id="音乐">音乐</h4><p>Next 8.x 已经集成了需要的插件 编辑需要插入的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!--音乐插件--&gt;<br>&lt;!-- require APlayer --&gt;<br>&lt;<span class="hljs-built_in">link</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span> href=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.css&quot;</span>&gt;<br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/aplayer@1.10.1/dist/APlayer.min.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;!-- require MetingJS--&gt;<br>&lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&quot;</span>&gt;&lt;/script&gt; <br>&lt;!--QQ音乐外链地址--&gt;   <br>&lt;meting-js<br>    server=<span class="hljs-string">&quot;tencent&quot;</span><br>    <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;song&quot;</span> <br>    <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;001oqXcA34gsMM&quot;</span><br>    mini=<span class="hljs-string">&quot;false&quot;</span><br>    fixed=<span class="hljs-string">&quot;false&quot;</span><br>    list-folded=<span class="hljs-string">&quot;true&quot;</span><br>    autoplay=<span class="hljs-string">&quot;false&quot;</span><br>    volume=<span class="hljs-string">&quot;0.4&quot;</span><br>    theme=<span class="hljs-string">&quot;#FADFA3&quot;</span><br>    order=<span class="hljs-string">&quot;list&quot;</span><br>    loop=<span class="hljs-string">&quot;all&quot;</span><br>    preload=<span class="hljs-string">&quot;auto&quot;</span><br>    mutex=<span class="hljs-string">&quot;true&quot;</span>&gt;<br>&lt;/meting-js&gt;<br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th><strong>选项</strong></th><th><strong>默认</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr class="odd"><td>id(编号)</td><td>require</td><td>歌曲ID /播放列表ID /专辑ID /搜索关键字</td></tr><tr class="even"><td>server(平台)</td><td>require</td><td>音乐平台：netease，tencent，kugou，xiami，baidu</td></tr><tr class="odd"><td>type（类型）</td><td>require</td><td>song，playlist，album，search，artist</td></tr><tr class="even"><td>auto（支持类种 类）</td><td>options</td><td>音乐链接，支持：netease，tencent，xiami</td></tr><tr class="odd"><td>fixed（固定模式）</td><td>false</td><td>启用固定模式</td></tr><tr class="even"><td>mini（迷你模式）</td><td>false</td><td>启用迷你模式</td></tr><tr class="odd"><td>autoplay（自动播放）</td><td>false</td><td>音频自动播放</td></tr><tr class="even"><td>theme(主题颜色)</td><td><code>#2980b9</code></td><td>默认#2980b9</td></tr><tr class="odd"><td>loop（循环）</td><td>all</td><td>播放器循环播放，值：“all”，one”，“none”</td></tr><tr class="even"><td>order(顺序)</td><td>list</td><td>播放器播放顺序，值：“list”，“random”</td></tr><tr class="odd"><td>preload(加载)</td><td>auto</td><td>值：“none”，“metadata”，“'auto”</td></tr><tr class="even"><td>volume（声量）</td><td>0.7</td><td>默认音量，请注意播放器会记住用户设置，用户自己设置音量后默认音量将不起作用</td></tr><tr class="odd"><td>mutex（限制）</td><td>true</td><td>防止同时播放多个玩家，在该玩家开始播放时暂停其他玩家</td></tr><tr class="even"><td>lrc-type（歌词）</td><td>0</td><td>歌词显示</td></tr><tr class="odd"><td>list-folded（列表折叠）</td><td>false</td><td>指示列表是否应该首先折叠</td></tr><tr class="even"><td>list-max-height（最大高度）</td><td>340px</td><td>列出最大高度</td></tr><tr class="odd"><td>storage-name（储存名称）</td><td>metingjs</td><td>存储播放器设置的localStorage键</td></tr></tbody></table><p>这就是ID的获取方式，其他平台类似 <imgsrc="../../../../image/Hexoidentify/id.png" alt="image.png" />插入代码到需要的位置，打开主题文件夹下的<code>layout/_macro/sidebar.njk</code>文件，插入到如图所示位置，不同位置会导致显示位置不同。<imgsrc="../../../../image/Hexoidentify/layout.png" alt="image.png" />为了避免切换页面引起重新播放，需要进行全局设置，在主题文件夹下的<code>layout/_layout.njk</code> 里面添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;!--pjax：防止跳转页面音乐暂停--&gt;<br> &lt;script src=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/pjax@0.2.8/pjax.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="../../../../image/Hexoidentify/refresh.png"alt="image.png" /> 在主题配置文件中修改 <code>pjax: true</code>。该操作有一个问题，本质上是是sidebar不刷新，因此进入新页面会导致sidebar依然显示站点概览而不是文章目录，所以我去掉了该功能。</p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Next8-x标签归档美化</title>
    <link href="/posts/d52e/"/>
    <url>/posts/d52e/</url>
    
    <content type="html"><![CDATA[<h3 id="一标签页美化">一、标签页美化</h3><ol type="1"><li><p>在 <code>themes/next/layout/</code> 目录下面新建<code>tag-color.njk</code> 填入以下内容</p><p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;script type=&quot;text/javascript&quot;&gt;<br><span class="hljs-selector-tag">var</span> alltags = document<span class="hljs-selector-class">.getElementsByClassName</span>(&#x27;tag-cloud-tags&#x27;);<br><span class="hljs-selector-tag">var</span> tags = alltags<span class="hljs-selector-attr">[0]</span><span class="hljs-selector-class">.getElementsByTagName</span>(&#x27;<span class="hljs-selector-tag">a</span>&#x27;);<br>for (<span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">i</span> = tags<span class="hljs-selector-class">.length</span> - <span class="hljs-number">1</span>; <span class="hljs-selector-tag">i</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-selector-tag">i</span>--) &#123;<br>  <span class="hljs-selector-tag">var</span> r=Math<span class="hljs-selector-class">.floor</span>(Math<span class="hljs-selector-class">.random</span>()*<span class="hljs-number">75</span>+<span class="hljs-number">130</span>);<br>  <span class="hljs-selector-tag">var</span> g=Math<span class="hljs-selector-class">.floor</span>(Math<span class="hljs-selector-class">.random</span>()*<span class="hljs-number">75</span>+<span class="hljs-number">100</span>);<br>  <span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span>=Math<span class="hljs-selector-class">.floor</span>(Math<span class="hljs-selector-class">.random</span>()*<span class="hljs-number">75</span>+<span class="hljs-number">80</span>);<br>  tags<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.background</span> = &quot;rgb(&quot;+r+&quot;,&quot;+g+&quot;,&quot;+<span class="hljs-selector-tag">b</span>+&quot;)&quot;;<br>  &#125;<br>  &lt;/script&gt;<br><br>  &lt;style&gt;<br>  <span class="hljs-selector-class">.tag-cloud-tags</span>&#123;<br>    <span class="hljs-comment">/*font-family: Helvetica, Tahoma, Arial;*/</span><br>    <span class="hljs-comment">/*font-weight: 100;*/</span><br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">counter-reset</span>: tags;<br>  &#125;<br>  <span class="hljs-selector-class">.tag-cloud-tags</span> <span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">8px</span> <span class="hljs-number">5px</span> <span class="hljs-number">0px</span> <span class="hljs-number">0px</span>;<br>  &#125;<br>  <span class="hljs-selector-class">.tag-cloud-tags</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:before</span>&#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;🔖&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-selector-class">.tag-cloud-tags</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0px</span> <span class="hljs-number">5px</span> <span class="hljs-number">15px</span> <span class="hljs-number">0px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,.<span class="hljs-number">4</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1.1</span>);<br>    <span class="hljs-comment">/*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span><br>    <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">0.15s</span>;<br>  &#125;<br>  &lt;/style&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>在 <code>themes/next/layout/_partials/page/tags.njk</code>中引入该文件 +</p><p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tag-cloud&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tag-cloud-title&quot;</span>&gt;</span><br>    &#123;&#123; _p(&#x27;counter.tag_cloud&#x27;, site.tags.length) &#125;&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>      <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;tag-cloud-tags&quot;</span>&gt;</span><br>    &#123;&#123; tagcloud(&#123;<br>    min_font: theme.tagcloud.min,<br>    max_font: theme.tagcloud.max,<br>    amount  : theme.tagcloud.amount,<br>    orderby : theme.tagcloud.orderby,<br>    order   : theme.tagcloud.order,<br>    class   : &#x27;tag-cloud&#x27;<br>    &#125;)<br>    &#125;&#125;<br>    +   &#123;% include &#x27;tag-color.njk&#x27; %&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></p></li></ol><h3 id="二文章底部标签美化">二、文章底部标签美化</h3><p>在 <code>blog/source/_date/styles.styl</code>中增加如下内容，没有该文件需要自己新建，并且打开主题配置文件中对该文件的注释行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*文章底部标签样式*/</span><br><span class="hljs-selector-class">.posts-expand</span> <span class="hljs-selector-class">.post-tags</span> <span class="hljs-selector-tag">a</span> &#123;<br>  -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">12</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">24</span>);<br>  -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">12</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">24</span>);<br>  <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">12</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, .<span class="hljs-number">24</span>);<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Comic Sans MS&#x27;</span>, sans-serif;<br>  <span class="hljs-attribute">transition</span>: .<span class="hljs-number">2s</span> ease-out;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#f5f5f5</span>;<br>  <span class="hljs-attribute">border-bottom</span>: none;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">15px</span>;<br><br>  +mobile()&#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1px</span> <span class="hljs-number">3px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">8px</span>;<br>  &#125;<br><br>  &amp;<span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">100</span>,<span class="hljs-number">154</span>,<span class="hljs-number">182</span>,<span class="hljs-number">0.902</span>);<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>    -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.19</span>);<br>    -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.19</span>);<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">8px</span> <span class="hljs-number">16px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.2</span>), <span class="hljs-number">0</span> <span class="hljs-number">6px</span> <span class="hljs-number">20px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0.19</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure><img src="../../../../image/Next8TAGbeautify/style.png"alt="image-20230210205448182.png" /><figcaption aria-hidden="true">image-20230210205448182.png</figcaption></figure><h3 id="三归档页美化">三、归档页美化</h3><p>修改 <code>themes/next/layout/_macro/post-collapse.njk</code>为如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% macro render(posts) %&#125;<br>&#123;%- set current_year = &#x27;1970&#x27; %&#125;<br>&#123;%- for post in posts.toArray() %&#125;<br><br>&#123;%- set year = date(post.date, &#x27;YYYY&#x27;) %&#125;<br><br>&#123;%- if year !== current_year %&#125;<br>&#123;%- set current_year = year %&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;collection-year&quot;</span>&gt;</span><br>  &lt;&#123;%- if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;%- endif %&#125; class=&quot;collection-header&quot;&gt;&#123;&#123; current_year &#125;&#125;&lt;/&#123;%- if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;%- endif %&#125;&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>&#123;%- endif %&#125;<br><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-post post-type-&#123;&#123; post.type | default(&#x27;normal&#x27;) &#125;&#125;&quot;</span> <span class="hljs-attr">itemscope</span> <span class="hljs-attr">itemtype</span>=<span class="hljs-string">&quot;http://schema.org/Article&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-post-header&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-post-meta&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-post-time&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;dateCreated&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">datetime</span>=<span class="hljs-string">&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;</span>&gt;</span><br>        &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    &lt;&#123;%- if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;%- endif %&#125; class=&quot;my-post-title&quot;&gt;<br>      &#123;%- if post.link %&#125;&#123;# Link posts #&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-post-title-link post-title-link-external&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(post.link) &#125;&#125;&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><br>        &#123;&#123; post.title or post.link &#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fa fa-external-link&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      &#123;% else %&#125;<br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;my-post-title-link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span><br>        &#123;% if post.type === &#x27;picture&#x27; %&#125;<br>        &#123;&#123; post.content &#125;&#125;<br>        &#123;% else %&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">itemprop</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>&#123;&#123; post.title or __(&#x27;post.untitled&#x27;) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        &#123;% endif %&#125;<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      &#123;%- endif %&#125;<br>    &lt;/&#123;%- if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;%- endif %&#125;&gt;<br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><br>&#123;%- endfor %&#125;<br>&#123;% endmacro %&#125;<br></code></pre></td></tr></table></figure><p>在 <code>blog/source/_data/styles.styl</code> 中增加</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 归档页样式 began */</span><br><span class="hljs-selector-class">.page-archive</span> <span class="hljs-selector-class">.archive-page-counter</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">90</span>, <span class="hljs-number">140</span>);<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  +mobile() &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.my-post-time</span>&#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">11px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">20</span>, <span class="hljs-number">90</span>, <span class="hljs-number">140</span>);<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><span class="hljs-selector-class">.mypost</span>&#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;<br>  -webkit-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  -moz-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  -o-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  -ms-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.my-post-title-link</span><span class="hljs-selector-pseudo">:before</span>&#123;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">18px</span>;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;📚&quot;</span>;<br>  <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">font</span>: normal normal normal <span class="hljs-number">14px</span>/<span class="hljs-number">1</span> FontAwesome;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;<br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.my-post-title-link</span>&#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">400</span>;<br>  +mobile() &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.my-post-title</span>&#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">4.5rem</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#4c4948</span>;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">font-size</span>: .<span class="hljs-number">8rem</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>  +mobile() &#123;<br>    //<span class="hljs-attribute">margin-left</span>: <span class="hljs-number">4rem</span>;<br>  &#125;<br>&#125;<br><span class="hljs-selector-class">.my-post-header</span>&#123;<br>  <span class="hljs-attribute">position</span>: top;<br>  <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1rem</span>;<br>  -webkit-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  -moz-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  -o-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  -ms-<span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>  <span class="hljs-attribute">transition</span>: all .<span class="hljs-number">2s</span> ease-in-out;<br>&#125;<br>//<span class="hljs-selector-class">.my-post-title-link</span>&#123;<br>  //  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>  //  <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">500</span>;<br>  //&#125;<br><span class="hljs-selector-class">.my-post-meta</span>&#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#99a9bf</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#114142</span>;<br>&#125;<br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.post-block</span><span class="hljs-selector-class">.tag</span> <span class="hljs-selector-class">.collection-title</span> <span class="hljs-selector-tag">h2</span> &#123;<br>  <span class="hljs-attribute">border-width</span>: <span class="hljs-number">1px</span>;<br>  <span class="hljs-attribute">border-style</span>: solid;<br>  <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#3f3f3f</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">22px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#b4e8fa</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">2px</span> <span class="hljs-number">15px</span>;<br>  <span class="hljs-attribute">letter-spacing</span>: <span class="hljs-number">1.5px</span>;<br>  <span class="hljs-attribute">box-sizing</span>: border-box;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#3f3f3f</span>;<br>  <span class="hljs-attribute">display</span>: inline-block;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  +mobile()&#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>  &#125;<br>&#125;<br><span class="hljs-comment">/* 归档页样式 end */</span><br></code></pre></td></tr></table></figure><h3 id="参考">参考</h3><p><ahref="https://jrbcode.gitee.io/posts/be9758cd.html">Hexo+NexT博客归档/标签/分类页美化| CodeHeap (gitee.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog/Hexo/Next</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Next主题导入JQuery</title>
    <link href="/posts/6c58/"/>
    <url>/posts/6c58/</url>
    
    <content type="html"><![CDATA[<h3 id="问题">问题</h3><p>使用Next主题的Hexo博客，在进行个性化配置时，可能出现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Uncaught ReferenceError: $ is not defined`<br></code></pre></td></tr></table></figure><p>这是由于使用的插件引用了 <code>JQuery</code>　但是我们没有导入。</p><h3 id="方法">方法</h3><p>在Next的主题配置文件 <code>_config.yml</code> 中，找到</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">vendors:</span><br></code></pre></td></tr></table></figure><p>在下面增加一行，即可导入。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">jquery:</span> <span class="hljs-string">//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js</span><br></code></pre></td></tr></table></figure><figure><img src="../../../../image/NextJQuery/jquery.png"alt="image-20230210201839159.png" /><figcaption aria-hidden="true">image-20230210201839159.png</figcaption></figure>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog/Hexo</tag>
      
      <tag>blog/Hexo/Next</tag>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win10安装Ubuntu22.04双系统</title>
    <link href="/posts/764/"/>
    <url>/posts/764/</url>
    
    <content type="html"><![CDATA[<h3 id="下载镜像文件">1. 下载镜像文件</h3><p>进入 <ahref="https://cn.ubuntu.com/download/desktop">Ubuntu下载链接</a>下载22.04版本，等待下载完成。 <imgsrc="../../../../image/WINandLINUX/download.png" alt="image.png" /></p><h3 id="下载安装镜像工具">2. 下载安装镜像工具</h3><p>进入 <a href="https://rufus.ie/zh/#google_vignette">rufus官网</a>下载便携版即可。 <img src="../../../../image/WINandLINUX/rufus.png"alt="image.png" /></p><h3 id="安装盘制作">3. 安装盘制作</h3><p>打开上面下好的软件，准备一个4G以上空U盘。连接后会自动识别到U盘盘符。<img src="../../../../image/WINandLINUX/Upan.png" alt="image.png" />点击上图红色框选择镜像，找到下好的镜像文件点击打开。确保已经不需要U盘内的资料，点击开始。<img src="../../../../image/WINandLINUX/done.png" alt="image.png" />安装完成。</p><h3 id="磁盘分区">4. 磁盘分区</h3><p>右键开始菜单，打开磁盘管理。我只有一个SSD，因此只需要分出一块分区。右键分区，选择压缩卷。<img src="../../../../image/WINandLINUX/compress.png" alt="image.png" />1024*120个MB空间 <imgsrc="../../../../image/WINandLINUX/120G.png" /></p><h3 id="查看磁盘格式">5. 查看磁盘格式</h3><p>win+r 打开运行，输入 msinfo32 ，查看bios模式。 <imgsrc="../../../../image/WINandLINUX/bios.png" alt="image.png" /></p><h3 id="安装双系统">6. 安装双系统</h3><p>重启计算机，进入bios，我的是dell，一直按f12即可。选择UEFI一栏回车。进入了安装系统，选择语言为中文简体，点击安装Ubuntu。之后选择English(US)，继续。安装软件时候选择最小安装即可。</p><h3 id="软件安装">7. 软件安装</h3><p>按照引导完成安装之后进行联网，软件安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt update#拉取更新<br>sudo apt install vim#安装vim<br>sudo apt upgrade#更新软件<br></code></pre></td></tr></table></figure><p>安装了edge进行了登录和同步。</p><h3 id="时间同步">8. 时间同步</h3><p>Ubuntu 与 Windows 时间确定机制不同，需要进行同步。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install ntpdate #安装同步工具<br>sudo ntpdate time.windows.com #更改时间确定机制<br>sudo hwclock --localtime --systohc #同步硬件时间<br></code></pre></td></tr></table></figure><h3 id="参考视频">9. 参考视频</h3><p><ahref="https://www.bilibili.com/video/BV1554y1n7zv/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bab75b3ccf1b5ff4356ab5c39c33eca7">Windows和 Ubuntu 双系统的安装和卸载_哔哩哔哩_bilibili</a>上视频使用的安装工具在我得U盘不行，于是按照下面视频制作U盘，U盘文件系统为FAT32。与上边视频不同的操作就是软件安装时选择了最小安装，以及分配空间时候有自己想法。</p><p><ahref="https://www.bilibili.com/video/BV1F44y1m7ZL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=bab75b3ccf1b5ff4356ab5c39c33eca7">Win10与Ubuntu双系统安装（绝对新手向）_哔哩哔哩_bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双系统切换界面</title>
    <link href="/posts/9e30/"/>
    <url>/posts/9e30/</url>
    
    <content type="html"><![CDATA[<h3 id="一更改默认启动项">一、更改默认启动项</h3><p>ctrl+alt+T 打开终端，输入下面代码打开配置文件</p><pre><code class="hljs">sudo gedit /etc/default/grub</code></pre><p>此处为<code>0</code>表示ubuntu为默认系统，改为<code>2</code>即windows为默认系统。<code>10</code>表示等待时间为10s <imgsrc="../../../../image/doubleOS/parameters.png" alt="image.png" />最后运行改行代码实现更新，重启发现更改成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo update-grub<br></code></pre></td></tr></table></figure><h3 id="二界面美化">二、界面美化</h3><p>到 <ahref="https://www.gnome-look.org/browse?cat=109&amp;ord=latest">这里</a>下载喜欢的主题，我选了 <ahref="https://www.gnome-look.org/p/1443844">BigSur GRUB Theme</a>有点慢。 解压缩主题文件夹，进入<code>install.sh</code>所在文件夹右键打开终端，执行以下命令进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./install.sh<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo vim /etc/default/grub #打开配置文件<br></code></pre></td></tr></table></figure><pre><code class="hljs">配置主题和分辨率</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">GRUB_CFXMODE=&quot;1920*1080&quot;<br>GRUB_THEME=&quot;/boot/grub/themes/bigsur/theme.txt&quot;<br></code></pre></td></tr></table></figure><p>更新配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo grub-mkconfig -o /boot/efi/EFI/ubuntu/grub.cfg<br>sudo update-grub<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>导出语雀知识库</title>
    <link href="/posts/7713/"/>
    <url>/posts/7713/</url>
    
    <content type="html"><![CDATA[<h3 id="背景">背景</h3><p>之前说过原先的GitHubPages的博客源码由于重装系统丢失，最近比较闲，想要重新搭建，因此希望能够将语雀知识库导出，但是只能导出lakebook格式，不能满足要求，于是有了这个摸索。</p><h3 id="操作">操作</h3><ol type="1"><li><p>安装nodejs，参考 <ahref="../Environment/Nodejs安装以及更新.md">Nodejs安装以及更新</a> 要求Node.js 16.18.0 以上版本。</p></li><li><p><code>win+r</code>呼出运行，输入<code>cmd</code>回车，运行下面代码安装小工具。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i -g yuque-exporter --registry=https://registry.npmmirror.com<br></code></pre></td></tr></table></figure></p></li><li><p><ahref="https://link.zhihu.com/?target=https%3A//www.yuque.com/yuque/developer/api%23785a3731">获取语雀token</a>并且设置，注意<code>&lt;your_token&gt;</code>用自己获取的token替换。</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> YUQUE_TOKEN=&lt;your_token&gt;<br></code></pre></td></tr></table></figure></p></li><li><p>在自己希望存放文件的文件夹下点击资源管理器路径输入<strong>cmd</strong>回车打开终端，运行下面代码<img src="../../../image/yuque/termina;.png"alt="image.png" /></p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yuque-exporter<br></code></pre></td></tr></table></figure></p></li><li><p>之后就会自动完成文章拉取，如果在文档下面又子文档，那么该文档会变成一个文件和一个文件夹。图片会全部存放哎asset文件夹之内。站外的卡片和标题不会显示，推荐全部使用链接的形式。站内的引用会自动变成链接。</p></li></ol><h3 id="参考">参考</h3><ol type="1"><li><a href="https://zhuanlan.zhihu.com/p/582287220">语雀知识库一键导出Markdown 工具</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>Softwares</category>
      
      <category>note</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
