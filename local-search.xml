<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>每日一题：18</title>
    <link href="/2022/03/22/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A18/"/>
    <url>/2022/03/22/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A18/</url>
    
    <content type="html"><![CDATA[<h4 id="18-4Sum"><a href="#18-4Sum" class="headerlink" title="18. 4Sum"></a>18. 4Sum</h4><p>Given an array <code>nums</code> of <code>n</code> integers, return <em>an array of all the <strong>unique</strong> quadruplets</em> <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>, <code>b</code>, <code>c</code>, and <code>d</code> are <strong>distinct</strong>.</li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>You may return the answer in <strong>any order</strong>.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums = [<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">2</span>], target = <span class="hljs-number">0</span><br><span class="hljs-type">Output</span>: [[<span class="hljs-number">-2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">-2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>], target = <span class="hljs-number">8</span><br><span class="hljs-type">Output</span>: [[<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>]]<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li>$-10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^9$</li><li>$-10^9 &lt;&#x3D; target &lt;&#x3D; 10^9$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/18.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>** <span class="hljs-title function_">fourSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize, <span class="hljs-type">int</span>** returnColumnSizes)</span>&#123;<br>    <span class="hljs-type">int</span> **ret=(<span class="hljs-type">int</span>**)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)*numsSize*numsSize*numsSize);<br>    *returnColumnSizes=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*numsSize*numsSize*numsSize);<br>    <span class="hljs-type">int</span> returnsize=<span class="hljs-number">0</span>;<br>    qsort(nums,numsSize,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>),cmp);<br>    <span class="hljs-type">int</span> idx1,idx2,idx3,idx4;<br>    <span class="hljs-keyword">for</span>(idx1=<span class="hljs-number">0</span>;idx1&lt;numsSize<span class="hljs-number">-3</span>;idx1++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[idx1]&gt;target&amp;&amp;nums[idx1]&gt;=<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span>(idx1&gt;<span class="hljs-number">0</span>&amp;&amp;nums[idx1]==nums[idx1<span class="hljs-number">-1</span>])<span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span>(idx2=idx1+<span class="hljs-number">1</span>;idx2&lt;numsSize<span class="hljs-number">-2</span>;idx2++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[idx1]+nums[idx2]&gt;target&amp;&amp;nums[idx1]&gt;=<span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(idx2&gt;idx1+<span class="hljs-number">1</span>&amp;&amp;nums[idx2]==nums[idx2<span class="hljs-number">-1</span>])<span class="hljs-keyword">continue</span>;<br>            idx3=idx2+<span class="hljs-number">1</span>;<br>            idx4=numsSize<span class="hljs-number">-1</span>;<br>            <span class="hljs-keyword">while</span>(idx3&lt;idx4)&#123;<br>                <span class="hljs-keyword">if</span>(nums[idx4]&lt;=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(nums[idx3]+nums[idx4]&lt;target)<span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">if</span>(nums[idx2]+nums[idx3]+nums[idx4]&lt;target)<span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[idx1]&gt;=<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-keyword">if</span>(nums[idx1]+nums[idx2]+nums[idx3]&gt;target)<span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(nums[idx1]+nums[idx2]+nums[idx3]+nums[idx4]==target)&#123;<br>                    ret[returnsize]=(<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">4</span>);<br>                    ret[returnsize][<span class="hljs-number">0</span>]=nums[idx1];<br>                    ret[returnsize][<span class="hljs-number">1</span>]=nums[idx2];<br>                    ret[returnsize][<span class="hljs-number">2</span>]=nums[idx3];<br>                    ret[returnsize][<span class="hljs-number">3</span>]=nums[idx4];<br>                    (*returnColumnSizes)[returnsize]=<span class="hljs-number">4</span>;<br>                    (returnsize)+=<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">while</span>(nums[idx3]==nums[++idx3]&amp;&amp;idx3&lt;idx4);<br>                    <span class="hljs-keyword">while</span>(nums[idx4]==nums[--idx4]&amp;&amp;idx3&lt;idx4);<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[idx1]+nums[idx2]+nums[idx3]+nums[idx4]&lt;target)idx3++;<br>                <span class="hljs-keyword">else</span> idx4--;<br>            &#125;<br>        &#125;<br>    &#125;<br>    *returnSize=returnsize;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li><p>这题和<a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/15.c">3Sum</a>几乎一样，但是有一些小的差别</p><ol><li>数据范围变大，三个数相加时候就可能会超出<code>int</code>的范围；</li><li>四个数，需要多一重循环，占据空间也变大；</li></ol></li><li><p>对于第一点，每次进下一层前都进行大小判断，进入最后一层循环之后，采用逐步加上去的方式，一旦超过范围就离开循环，避免过大数相加；</p></li><li><p>采用动态分配内存空间，节约了很多空间：</p><p><img src="https://gitee.com/Yu-Qi-hang/imgrepo/raw/master/img/202203221139818.png" alt="image-20220322113540627"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：17</title>
    <link href="/2022/03/21/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A17/"/>
    <url>/2022/03/21/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A17/</url>
    
    <content type="html"><![CDATA[<h4 id="17-Letter-Combinations-of-a-Phone-Number"><a href="#17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="17. Letter Combinations of a Phone Number"></a>17. Letter Combinations of a Phone Number</h4><p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: digits = <span class="hljs-string">&quot;23&quot;</span><br><span class="hljs-type">Output</span>: [<span class="hljs-string">&quot;ad&quot;</span>,<span class="hljs-string">&quot;ae&quot;</span>,<span class="hljs-string">&quot;af&quot;</span>,<span class="hljs-string">&quot;bd&quot;</span>,<span class="hljs-string">&quot;be&quot;</span>,<span class="hljs-string">&quot;bf&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;ce&quot;</span>,<span class="hljs-string">&quot;cf&quot;</span>]<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: digits = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-type">Output</span>: []<br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: digits = <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-type">Output</span>: [<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>0 &lt;= digits.length &lt;= 4</code></li><li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/17.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> ** <span class="hljs-title function_">letterCombinations</span><span class="hljs-params">(<span class="hljs-type">char</span> * digits, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-keyword">if</span>(digits[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        *returnSize=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    *returnSize=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> imp[<span class="hljs-number">9</span>]=<span class="hljs-string">&quot;adgjmptw&quot;</span>;<br>    <span class="hljs-type">int</span> length=<span class="hljs-built_in">strlen</span>(digits);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(digits[i]==<span class="hljs-string">&#x27;7&#x27;</span>||digits[i]==<span class="hljs-string">&#x27;9&#x27;</span>)(*returnSize)*=<span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">else</span> (*returnSize)*=<span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> **ret=(<span class="hljs-type">char</span>**)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>*)*(*returnSize));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;*returnSize;i++)&#123;<br>        ret[i]=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*(length+<span class="hljs-number">1</span>));<br>        ret[i][length]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> batch=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;length;i++)&#123;<br>        <span class="hljs-type">int</span> mode=<span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> offset=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(digits[i]==<span class="hljs-string">&#x27;7&#x27;</span>||digits[i]==<span class="hljs-string">&#x27;9&#x27;</span>)mode=<span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;*returnSize;j++)&#123;<br>            k=j;<br>            <span class="hljs-keyword">while</span>(k-j&lt;batch)&#123;<br>                ret[k][i]=imp[digits[i]-<span class="hljs-string">&#x27;2&#x27;</span>]+offset;<br>                k++;<br>            &#125;<br>            j=k<span class="hljs-number">-1</span>;<br>            offset=(offset+<span class="hljs-number">1</span>)%mode;<br>        &#125;<br>        batch*=mode;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>根据每个数字对应的第一个字母确定该数字包含的字母，通过偏移进行赋值；</li><li>先根据每个数字计算总的字符串数，申请空间，初始化；</li><li>然后分部分按组进行赋值，一组内赋值相同，一组长度由前一个数字对应字符数决定；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：16</title>
    <link href="/2022/03/20/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A16/"/>
    <url>/2022/03/20/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A16/</url>
    
    <content type="html"><![CDATA[<h4 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a>16. 3Sum Closest</h4><p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>.</p><p>Return <em>the sum of the three integers</em>.</p><p>You may assume that each input would have exactly one solution.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight vbnet"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">Input:</span> nums = [-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">4</span>], target = <span class="hljs-number">1</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">Explanation:</span> The sum that <span class="hljs-built_in">is</span> closest <span class="hljs-keyword">to</span> the target <span class="hljs-built_in">is</span> <span class="hljs-number">2</span>. (-<span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span> = <span class="hljs-number">2</span>).<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> nums = [<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>], target = <span class="hljs-number">1</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>3 &lt;= nums.length &lt;= 1000</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li><li>$-10^4 &lt;&#x3D; target &lt;&#x3D; 10^4$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/16.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">absub</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> (a&gt;b)?a-b:b-a;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">threeSumClosest</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target)</span>&#123;<br>    <span class="hljs-type">int</span> ret=nums[<span class="hljs-number">0</span>]+nums[<span class="hljs-number">1</span>]+nums[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">if</span>(numsSize==<span class="hljs-number">3</span>)<span class="hljs-keyword">return</span> ret;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> left=<span class="hljs-number">1</span>;left&lt;numsSize<span class="hljs-number">-1</span>;left++)<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> right=left+<span class="hljs-number">1</span>;right&lt;numsSize;right++)&#123;<br>                <span class="hljs-type">int</span> temp=nums[<span class="hljs-number">0</span>]+nums[left]+nums[right];<br>                <span class="hljs-keyword">if</span>(absub(temp,target)&lt;absub(ret,target))ret=temp;<br>            &#125;<br>        <span class="hljs-type">int</span> other=threeSumClosest(&amp;nums[<span class="hljs-number">1</span>],numsSize<span class="hljs-number">-1</span>,target);<br>        <span class="hljs-keyword">if</span>(absub(other,target)&lt;absub(ret,target))ret=other;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>实现方式并不是特别好，耗时比较长，复杂度$O(N^3)$</li><li>定下第一个数字，二重循环遍历后面数字寻找到最接近的值，记录，舍去第一个数字，递归调用，最后bottom-up得到结果；</li><li>借助 <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/15.c">3Sum</a>的方法，先进行排序，再进行首位夹逼，可以将复杂度降到$O(N^2)$</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>update:1</title>
    <link href="/2022/03/20/update-1/"/>
    <url>/2022/03/20/update-1/</url>
    
    <content type="html"><![CDATA[<h4 id="打字机"><a href="#打字机" class="headerlink" title="打字机"></a>打字机</h4><ol><li>设置了随机语句</li><li>设置了渐变颜色</li></ol><h4 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h4><ol><li>调整了尺寸</li><li>调整了背景色</li></ol><h4 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h4><ol><li>可以嵌入PDF</li></ol><h4 id="媒体文件"><a href="#媒体文件" class="headerlink" title="媒体文件"></a>媒体文件</h4><ol><li>可以嵌入歌曲、歌单</li><li>可以嵌入视频</li></ol>]]></content>
    
    
    <categories>
      
      <category>更新日志</category>
      
    </categories>
    
    
    <tags>
      
      <tag>update</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：15</title>
    <link href="/2022/03/19/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A15/"/>
    <url>/2022/03/19/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A15/</url>
    
    <content type="html"><![CDATA[<h4 id="15-3Sum"><a href="#15-3Sum" class="headerlink" title="15. 3Sum"></a>15. 3Sum</h4><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j</code>, <code>i != k</code>, and <code>j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums = [<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-4</span>]<br><span class="hljs-type">Output</span>: [[<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">-1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]]<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums = []<br><span class="hljs-type">Output</span>: []<br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums = [<span class="hljs-number">0</span>]<br><span class="hljs-type">Output</span>: []<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li>$-10^5&lt;&#x3D;nums[i]&lt;&#x3D;10^5$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/15.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span> * a, <span class="hljs-type">const</span> <span class="hljs-type">void</span> * b)</span><br>&#123;<br>   <span class="hljs-keyword">return</span> ( *(<span class="hljs-type">int</span>*)a - *(<span class="hljs-type">int</span>*)b );<br>&#125;<br><br><span class="hljs-type">int</span>** <span class="hljs-title function_">threeSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums,<span class="hljs-type">int</span> numsSize,<span class="hljs-type">int</span>* returnSize,<span class="hljs-type">int</span>** returnColumnSizes)</span><br>&#123;<br>    <span class="hljs-type">int</span> batch=<span class="hljs-number">8</span>;<br>    <span class="hljs-type">int</span> **ret=(<span class="hljs-type">int</span>**)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)*batch);<br>    *returnColumnSizes=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*batch);<br>    *returnSize=<span class="hljs-number">0</span>;<br>    qsort(nums,numsSize,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>),cmp);<br>    <span class="hljs-type">int</span> idx,left,right;<br>    <span class="hljs-keyword">for</span>(idx=<span class="hljs-number">0</span>;idx&lt;numsSize<span class="hljs-number">-2</span>;idx++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[idx]&gt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> ret;<br>        <span class="hljs-keyword">if</span>(idx&gt;<span class="hljs-number">0</span>&amp;&amp;nums[idx]==nums[idx<span class="hljs-number">-1</span>])<span class="hljs-keyword">continue</span>;<br>        left=idx+<span class="hljs-number">1</span>;<br>        right=numsSize<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>            <span class="hljs-keyword">if</span>(nums[idx]+nums[left]+nums[right]==<span class="hljs-number">0</span>)&#123;<br>                ret[*returnSize]=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">3</span>);<br>                ret[*returnSize][<span class="hljs-number">0</span>]=nums[idx];<br>                ret[*returnSize][<span class="hljs-number">1</span>]=nums[left];<br>                ret[*returnSize][<span class="hljs-number">2</span>]=nums[right];<br>                (*returnColumnSizes)[*returnSize]=<span class="hljs-number">3</span>;<br>                (*returnSize)+=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span>(*returnSize==batch)&#123;<br>                    batch*=<span class="hljs-number">2</span>;                    <br>                    ret=(<span class="hljs-type">int</span>**)<span class="hljs-built_in">realloc</span>(ret,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>*)*batch);<br>                    *returnColumnSizes=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">realloc</span>(*returnColumnSizes,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*batch);<br>                &#125;<br>                <span class="hljs-keyword">while</span>(nums[left]==nums[left+<span class="hljs-number">1</span>]&amp;&amp;left+<span class="hljs-number">1</span>&lt;right)left++;<br>                <span class="hljs-keyword">if</span>(left&lt;right)left++;<br>                <span class="hljs-keyword">while</span>(nums[right]==nums[right<span class="hljs-number">-1</span>]&amp;&amp;left&lt;right<span class="hljs-number">-1</span>)right--;<br>                <span class="hljs-keyword">if</span>(left&lt;right)right--;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(nums[idx]+nums[left]+nums[right]&lt;<span class="hljs-number">0</span>)left++;<br>            <span class="hljs-keyword">else</span> right--;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>对于二重指针和指针有了进一步的理解，对于动态申请内存有了更清晰的认识，这里虽然传递的是二维的<code>**returnColumnSizes</code>，但是实际上更像是一维数组，所以将<code>*returnColumnSizes</code>视为整体，作为数组的名称，进行内存分配；</li><li>搜索得到了<code>qsort()</code>，需要传入需要排序的数组地址，元素数，每个元素的字节数以及比较方式；</li><li>二重循环，一旦进入内层循环，那么不管内层会不会破坏外层的条件，都会将内层先执行完毕，所以需要在20、21行的位置加上判断；</li><li>自增自减慎用，开始对于20、21两行的等于的比较是反过来的，导致运行超时，才发现，自增自减后，等号两侧会相等，得换位置才行；</li><li>对于 <code>while(n[left]==n[left+1])left++;</code>和<code>while(n[left]==n[++left]);</code>的区别，前者先执行判断，正确了采取自增，后者先自增，因此后者无论如何也会有一次自增。</li><li>这段源码采取了两种写法，对于理清C的好几种运算符大有裨益，代码的完整性也花费了时间，<strong>记得回来看一下</strong></li><li>将内存大小进行动态的分配节约了很多<img src="https://gitee.com/Yu-Qi-hang/imgrepo/raw/master/img/202203221133706.png" alt="image-20220322113349665"></li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国茶叶博物馆</title>
    <link href="/2022/03/19/trip/%E4%B8%AD%E5%9B%BD%E8%8C%B6%E5%8F%B6%E5%8D%9A%E7%89%A9%E9%A6%86/"/>
    <url>/2022/03/19/trip/%E4%B8%AD%E5%9B%BD%E8%8C%B6%E5%8F%B6%E5%8D%9A%E7%89%A9%E9%A6%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>杭州</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>太子湾游记</title>
    <link href="/2022/03/19/trip/%E5%A4%AA%E5%AD%90%E6%B9%BE%E6%B8%B8%E8%AE%B0/"/>
    <url>/2022/03/19/trip/%E5%A4%AA%E5%AD%90%E6%B9%BE%E6%B8%B8%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-XWYzDaeb" src="//player.bilibili.com/player.html?bvid=BV1Zi4y1r7AL&page=1&high_quality=1&danmaku=false"            allowfullscreen="no"            scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-XWYzDaeb").style.height=document.getElementById("mmedia-XWYzDaeb").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-XWYzDaeb").style.height=document.getElementById("mmedia-XWYzDaeb").scrollWidth*0.76+"px";            };        </script>        ]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>杭州</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：14</title>
    <link href="/2022/03/18/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A14/"/>
    <url>/2022/03/18/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A14/</url>
    
    <content type="html"><![CDATA[<h4 id="14-Longest-Common-Prefix"><a href="#14-Longest-Common-Prefix" class="headerlink" title="14. Longest Common Prefix"></a>14. Longest Common Prefix</h4><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string <code>&quot;&quot;</code>.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: strs = [<span class="hljs-string">&quot;flower&quot;</span>,<span class="hljs-string">&quot;flow&quot;</span>,<span class="hljs-string">&quot;flight&quot;</span>]<br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;fl&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: strs = [<span class="hljs-string">&quot;dog&quot;</span>,<span class="hljs-string">&quot;racecar&quot;</span>,<span class="hljs-string">&quot;car&quot;</span>]<br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">There</span> is no common prefix among the input strings.<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>1 &lt;= strs.length &lt;= 200</code></li><li><code>0 &lt;= strs[i].length &lt;= 200</code></li><li><code>strs[i]</code> consists of only lower-case English letters.</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/14.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(<span class="hljs-type">char</span> ** strs, <span class="hljs-type">int</span> strsSize)</span>&#123;<br>    <span class="hljs-type">char</span> *ret=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*MAXLEN);<br>    <span class="hljs-built_in">memset</span>(ret,<span class="hljs-number">0</span>,MAXLEN);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-built_in">strlen</span>(strs[<span class="hljs-number">0</span>]);j++)&#123;<br>        <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;strsSize;k++)&#123;<br>            <span class="hljs-keyword">if</span>(strs[k][j]!=strs[<span class="hljs-number">0</span>][j])&#123;<br>                flag=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag)&#123;<br>            ret[j]=strs[<span class="hljs-number">0</span>][j];<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li><strong>prefix</strong>: 前缀</li><li>误把前缀当成子串，导致一直出错；</li><li>只需要从第一个字符串中一一取出字符，判断其他串该位置是否相同即可；</li><li>还有一种不用拷贝的流氓方法，在代码中，就是匹配到不对的位置后，讲第一个串的该位置置为结尾标记，返回该串<img src="https://gitee.com/yu-qihang/imgrepo/raw/master/img/202203182047185.png" alt="image-20220318204140617"></li><li>如果是前缀，确实是简单题，下面附上子串的想法；</li><li>两重循环遍历第一个字符串的所有子串，每个子串从其他字符串中寻找，借助<code>strstr</code>函数的返回值判断是否存在子串，全部通过后与已知子串比较长短，进行更新。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span> *s,<span class="hljs-type">char</span> *item)</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strstr</span>(s,item))<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">char</span> * <span class="hljs-title function_">longestCommonPrefix</span><span class="hljs-params">(<span class="hljs-type">char</span> ** strs, <span class="hljs-type">int</span> strsSize)</span>&#123;<br>    <span class="hljs-type">char</span> *ret=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*MAXLEN);<br>    <span class="hljs-built_in">memset</span>(ret,<span class="hljs-number">0</span>,MAXLEN);<br>    <span class="hljs-type">int</span> length=<span class="hljs-number">0</span>,templen=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(strs[<span class="hljs-number">0</span>]);i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;<span class="hljs-built_in">strlen</span>(strs[<span class="hljs-number">0</span>]);j++)&#123;<br>            templen=j-i+<span class="hljs-number">1</span>;<br>            <span class="hljs-type">char</span> *item=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*(templen+<span class="hljs-number">1</span>));<br>            <span class="hljs-built_in">memset</span>(item,<span class="hljs-number">0</span>,templen+<span class="hljs-number">1</span>);<br>            <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">strncpy</span>(item,strs[<span class="hljs-number">0</span>],templen);<br>            <span class="hljs-type">int</span> isfind=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;strsSize;k++)&#123;<br>                isfind=isfind&amp;&amp;find(strs[k],item);<br>                <span class="hljs-keyword">if</span>(!isfind)<span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(isfind)&#123;<br>                <span class="hljs-keyword">if</span>(templen&gt;length)&#123;<br>                    <span class="hljs-built_in">strcpy</span>(ret,item);<br>                    length=templen;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：13</title>
    <link href="/2022/03/17/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A13/"/>
    <url>/2022/03/17/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A13/</url>
    
    <content type="html"><![CDATA[<h4 id="13-Roman-to-Integer"><a href="#13-Roman-to-Integer" class="headerlink" title="13. Roman to Integer"></a>13. Roman to Integer</h4><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Symbol</span>       <span class="hljs-type">Value</span><br><span class="hljs-type">I</span>             <span class="hljs-number">1</span><br><span class="hljs-type">V</span>             <span class="hljs-number">5</span><br><span class="hljs-type">X</span>             <span class="hljs-number">10</span><br><span class="hljs-type">L</span>             <span class="hljs-number">50</span><br><span class="hljs-type">C</span>             <span class="hljs-number">100</span><br><span class="hljs-type">D</span>             <span class="hljs-number">500</span><br><span class="hljs-type">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>For example, <code>2</code> is written as <code>II</code> in Roman numeral, just two one’s added together. <code>12</code> is written as <code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given a roman numeral, convert it to an integer.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;III&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">3</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">III</span> = <span class="hljs-number">3.</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;LVIII&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">58</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">L</span> = <span class="hljs-number">50</span>, <span class="hljs-type">V</span>= <span class="hljs-number">5</span>, <span class="hljs-type">III</span> = <span class="hljs-number">3.</span><br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;MCMXCIV&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">1994</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">M</span> = <span class="hljs-number">1000</span>, <span class="hljs-type">CM</span> = <span class="hljs-number">900</span>, <span class="hljs-type">XC</span> = <span class="hljs-number">90</span> and <span class="hljs-type">IV</span> = <span class="hljs-number">4.</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> contains only the characters <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code>.</li><li>It is <strong>guaranteed</strong> that <code>s</code> is a valid roman numeral in the range <code>[1, 3999]</code>.</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/13.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">romanToInt</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span>&#123;<br>    <span class="hljs-type">int</span> idx=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s[idx]==<span class="hljs-string">&#x27;M&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">1000</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(s[idx+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;M&#x27;</span>)&#123;<br>            ret+=<span class="hljs-number">900</span>;<br>            idx+=<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;D&#x27;</span>)&#123;<br>            ret+=<span class="hljs-number">400</span>;<br>            idx+=<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;D&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">500</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(s[idx]==<span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">100</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(s[idx+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;C&#x27;</span>)&#123;<br>            ret+=<span class="hljs-number">90</span>;<br>            idx+=<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>            ret+=<span class="hljs-number">40</span>;<br>            idx+=<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;L&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">50</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(s[idx]==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">10</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s[idx]==<span class="hljs-string">&#x27;I&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(s[idx+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;X&#x27;</span>)&#123;<br>            ret+=<span class="hljs-number">9</span>;<br>            idx+=<span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[idx+<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;V&#x27;</span>)&#123;<br>            ret+=<span class="hljs-number">4</span>;<br>            idx+=<span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(s[idx]==<span class="hljs-string">&#x27;V&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">5</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(s[idx]==<span class="hljs-string">&#x27;I&#x27;</span>)&#123;<br>        ret+=<span class="hljs-number">1</span>;<br>        idx++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>确实是简单，在昨天题目的基础上，相当于求逆的过程</li><li>中间由于判断特殊情况是，一个索引加了一，一个忘记加一，导致找了半天问题。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/17/hello-world/"/>
    <url>/2022/03/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：12</title>
    <link href="/2022/03/16/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A12/"/>
    <url>/2022/03/16/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A12/</url>
    
    <content type="html"><![CDATA[<h4 id="12-Integer-to-Roman"><a href="#12-Integer-to-Roman" class="headerlink" title="12. Integer to Roman"></a>12. Integer to Roman</h4><p>Roman numerals are represented by seven different symbols: <code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Symbol</span>       <span class="hljs-type">Value</span><br><span class="hljs-type">I</span>             <span class="hljs-number">1</span><br><span class="hljs-type">V</span>             <span class="hljs-number">5</span><br><span class="hljs-type">X</span>             <span class="hljs-number">10</span><br><span class="hljs-type">L</span>             <span class="hljs-number">50</span><br><span class="hljs-type">C</span>             <span class="hljs-number">100</span><br><span class="hljs-type">D</span>             <span class="hljs-number">500</span><br><span class="hljs-type">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>For example, <code>2</code> is written as <code>II</code> in Roman numeral, just two one’s added together. <code>12</code> is written as <code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p><p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p><ul><li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9. </li><li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90. </li><li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li></ul><p>Given an integer, convert it to a roman numeral.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: num = <span class="hljs-number">3</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;III&quot;</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-number">3</span> is represented <span class="hljs-keyword">as</span> <span class="hljs-number">3</span> ones.<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: num = <span class="hljs-number">58</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;LVIII&quot;</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">L</span> = <span class="hljs-number">50</span>, <span class="hljs-type">V</span> = <span class="hljs-number">5</span>, <span class="hljs-type">III</span> = <span class="hljs-number">3.</span><br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: num = <span class="hljs-number">1994</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;MCMXCIV&quot;</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">M</span> = <span class="hljs-number">1000</span>, <span class="hljs-type">CM</span> = <span class="hljs-number">900</span>, <span class="hljs-type">XC</span> = <span class="hljs-number">90</span> and <span class="hljs-type">IV</span> = <span class="hljs-number">4.</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>1 &lt;= num &lt;= 3999</code></li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/12.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">intToRoman</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>    <span class="hljs-type">char</span> *ret=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*<span class="hljs-number">16</span>);<br>    <span class="hljs-built_in">memset</span>(ret,<span class="hljs-number">0</span>,<span class="hljs-number">16</span>);<br>    <span class="hljs-type">int</span> tail=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> slice=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">1000</span>)&#123;<br>        slice=num/<span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">while</span>(slice--&gt;<span class="hljs-number">0</span>)ret[tail++]=<span class="hljs-string">&#x27;M&#x27;</span>;<br>    &#125;<br>    num=num%<span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">100</span>)&#123;<br>        slice=num/<span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">if</span>(slice&gt;=<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">if</span>(slice==<span class="hljs-number">9</span>)&#123;<br>                ret[tail++]=<span class="hljs-string">&#x27;C&#x27;</span>;<br>                ret[tail++]=<span class="hljs-string">&#x27;M&#x27;</span>;<br>                slice=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ret[tail++]=<span class="hljs-string">&#x27;D&#x27;</span>;<br>                slice-=<span class="hljs-number">5</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(slice==<span class="hljs-number">4</span>)&#123;<br>            ret[tail++]=<span class="hljs-string">&#x27;C&#x27;</span>;<br>            ret[tail++]=<span class="hljs-string">&#x27;D&#x27;</span>;<br>            slice=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(slice--&gt;<span class="hljs-number">0</span>)ret[tail++]=<span class="hljs-string">&#x27;C&#x27;</span>;<br>        &#125;<br>    &#125;<br>    num=num%<span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">10</span>)&#123;<br>        slice=num/<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(slice&gt;=<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">if</span>(slice==<span class="hljs-number">9</span>)&#123;<br>                ret[tail++]=<span class="hljs-string">&#x27;X&#x27;</span>;<br>                ret[tail++]=<span class="hljs-string">&#x27;C&#x27;</span>;<br>                slice=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ret[tail++]=<span class="hljs-string">&#x27;L&#x27;</span>;<br>                slice-=<span class="hljs-number">5</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(slice==<span class="hljs-number">4</span>)&#123;<br>            ret[tail++]=<span class="hljs-string">&#x27;X&#x27;</span>;<br>            ret[tail++]=<span class="hljs-string">&#x27;L&#x27;</span>;<br>            slice=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(slice--&gt;<span class="hljs-number">0</span>)ret[tail++]=<span class="hljs-string">&#x27;X&#x27;</span>;<br>        &#125;<br>    &#125;<br>    num=num%<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span>(num&gt;=<span class="hljs-number">1</span>)&#123;<br>        slice=num;<br>        <span class="hljs-keyword">if</span>(slice&gt;=<span class="hljs-number">5</span>)&#123;<br>            <span class="hljs-keyword">if</span>(slice==<span class="hljs-number">9</span>)&#123;<br>                ret[tail++]=<span class="hljs-string">&#x27;I&#x27;</span>;<br>                ret[tail++]=<span class="hljs-string">&#x27;X&#x27;</span>;<br>                slice=<span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ret[tail++]=<span class="hljs-string">&#x27;V&#x27;</span>;<br>                slice-=<span class="hljs-number">5</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(slice==<span class="hljs-number">4</span>)&#123;<br>            ret[tail++]=<span class="hljs-string">&#x27;I&#x27;</span>;<br>            ret[tail++]=<span class="hljs-string">&#x27;V&#x27;</span>;<br>            slice=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">while</span>(slice--&gt;<span class="hljs-number">0</span>)ret[tail++]=<span class="hljs-string">&#x27;I&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>只需要分数位判断；</li><li>对不同数位先判断是否为9，然后判断是否大于等于5，接着判断是否为4；</li><li>每次在字符串结尾加上就好了</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>困难</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：11</title>
    <link href="/2022/03/15/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A11/"/>
    <url>/2022/03/15/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A11/</url>
    
    <content type="html"><![CDATA[<h4 id="11-Container-With-Most-Water"><a href="#11-Container-With-Most-Water" class="headerlink" title="11. Container With Most Water"></a>11. Container With Most Water</h4><p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>ith</code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p><p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p><p>Return <em>the maximum amount of water a container can store</em>.</p><p><strong>Notice</strong> that you may not slant the container.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><p><img src="/img/cover/figure/image-11-1.png" alt="figure 11.1"></p><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: height = [<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>]<br><span class="hljs-type">Output</span>: <span class="hljs-number">49</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">The</span> above vertical lines are represented by array [<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>]. <span class="hljs-type">In</span> this <span class="hljs-keyword">case</span>, the max area <span class="hljs-keyword">of</span> water (blue section) the container can contain is <span class="hljs-number">49.</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: height = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br><span class="hljs-type">Output</span>: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>n == height.length</code></li><li>$2 &lt;&#x3D; n &lt;&#x3D; 10^5$</li><li>$0 &lt;&#x3D; height[i] &lt;&#x3D; 10^4$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/11.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">maxArea</span><span class="hljs-params">(<span class="hljs-type">int</span>* height, <span class="hljs-type">int</span> heightSize)</span>&#123;<br>    <span class="hljs-keyword">if</span>(heightSize&lt;<span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> h=(height[<span class="hljs-number">0</span>]&lt;height[heightSize<span class="hljs-number">-1</span>])?height[<span class="hljs-number">0</span>]:height[heightSize<span class="hljs-number">-1</span>];<br>    <span class="hljs-type">int</span> area=(heightSize<span class="hljs-number">-1</span>)*h;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=heightSize<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span>(height[<span class="hljs-number">0</span>]&lt;height[heightSize<span class="hljs-number">-1</span>])<br>        <span class="hljs-keyword">while</span>(height[i]&lt;=height[<span class="hljs-number">0</span>]&amp;&amp;i&lt;heightSize)i++;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">while</span>(height[j]&lt;=height[heightSize<span class="hljs-number">-1</span>]&amp;&amp;j&gt;<span class="hljs-number">0</span>)j--;<br>    <span class="hljs-type">int</span> area2=maxArea(&amp;height[i],j-i+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> (area2&gt;area)?area2:area;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>这题容易时间超出限制；</li><li>开始采用的是遍历计算所有面积的方式，很快就超时了；</li><li>后来思考了一下，计算部分关键的面积就好了：<ol><li>先计算首位围成的面积；</li><li>选择较小的一侧，向内找到比其大的第一个值，计算该位置和另一侧围成的面积；</li><li>选择较大的存下来；</li></ol></li><li>写了递归和迭代两种方法.</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：10</title>
    <link href="/2022/03/14/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A10/"/>
    <url>/2022/03/14/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A10/</url>
    
    <content type="html"><![CDATA[<h4 id="10-Regular-Expression-Matching"><a href="#10-Regular-Expression-Matching" class="headerlink" title="10. Regular Expression Matching"></a>10. Regular Expression Matching</h4><p>Given an input string <code>s</code> and a pattern <code>p</code>, implement regular expression matching with support for <code>&#39;.&#39;</code> and <code>&#39;*&#39;</code> where:</p><ul><li><code>&#39;.&#39;</code> Matches any single character.</li><li><code>&#39;*&#39;</code> Matches zero or more of the preceding element.</li></ul><p>The matching should cover the <strong>entire</strong> input string (not partial).</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;aa&quot;</span>, p = <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-type">Output</span>: false<br><span class="hljs-type">Explanation</span>: <span class="hljs-string">&quot;a&quot;</span> does not match the entire string <span class="hljs-string">&quot;aa&quot;</span>.<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;aa&quot;</span>, p = <span class="hljs-string">&quot;a*&quot;</span><br><span class="hljs-type">Output</span>: true<br><span class="hljs-type">Explanation</span>: <span class="hljs-string">&#x27;*&#x27;</span> means zero or more <span class="hljs-keyword">of</span> the preceding element, <span class="hljs-string">&#x27;a&#x27;</span>. <span class="hljs-type">Therefore</span>, by repeating <span class="hljs-string">&#x27;a&#x27;</span> once, it becomes <span class="hljs-string">&quot;aa&quot;</span>.<br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;ab&quot;</span>, p = <span class="hljs-string">&quot;.*&quot;</span><br><span class="hljs-type">Output</span>: true<br><span class="hljs-type">Explanation</span>: <span class="hljs-string">&quot;.*&quot;</span> means <span class="hljs-string">&quot;zero or more (*) of any character (.)&quot;</span>.<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>1 &lt;= s.length &lt;= 20</code></li><li><code>1 &lt;= p.length &lt;= 30</code></li><li><code>s</code> contains only lowercase English letters.</li><li><code>p</code> contains only lowercase English letters, <code>&#39;.&#39;</code>, and <code>&#39;*&#39;</code>.</li><li>It is guaranteed for each appearance of the character <code>&#39;*&#39;</code>, there will be a previous valid character to match.</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/10.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">expindex</span><span class="hljs-params">(<span class="hljs-type">char</span> *s,<span class="hljs-type">char</span> c)</span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s[i]!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(s[i]!=c)<span class="hljs-keyword">return</span> i;<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">isMatch</span><span class="hljs-params">(<span class="hljs-type">char</span> * s, <span class="hljs-type">char</span> * p)</span>&#123;<br>    <span class="hljs-comment">// printf(&quot;%s\n%s\n\n&quot;,s,p);</span><br>    <span class="hljs-keyword">if</span>(p[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;s[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span>(p[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;s[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;\0&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span>(p[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;\0&#x27;</span>&amp;&amp;s[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(p[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)<span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">0</span>],&amp;p[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp;p[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>]==p[<span class="hljs-number">0</span>])<span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">1</span>],&amp;p[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp;p[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>        <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>]!=p[<span class="hljs-number">0</span>])<span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">0</span>],&amp;p[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span>(p[<span class="hljs-number">2</span>]==p[<span class="hljs-number">0</span>])&#123;<br>            <span class="hljs-keyword">if</span>(s[<span class="hljs-number">0</span>]!=p[<span class="hljs-number">0</span>])<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span>(p[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                p[<span class="hljs-number">1</span>]=p[<span class="hljs-number">0</span>];<br>                p[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;*&#x27;</span>;            <br>                <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">1</span>],&amp;p[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">1</span>],&amp;p[<span class="hljs-number">2</span>]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(p[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                <span class="hljs-type">int</span> idx=expindex(&amp;s[<span class="hljs-number">0</span>],p[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span>(idx==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> isMatch(&amp;s[idx],&amp;p[<span class="hljs-number">2</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                <span class="hljs-type">int</span> idx=expindex(&amp;s[<span class="hljs-number">0</span>],p[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span>(idx==<span class="hljs-number">-1</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-type">bool</span> ret=isMatch(&amp;s[idx],&amp;p[<span class="hljs-number">2</span>]);<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> temp=<span class="hljs-number">0</span>;temp&lt;idx;temp++)&#123;<br>                        ret=ret|isMatch(&amp;s[temp],&amp;p[<span class="hljs-number">2</span>]);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-type">int</span> idx=expindex(&amp;s[<span class="hljs-number">0</span>],p[<span class="hljs-number">0</span>]);<br>                <span class="hljs-keyword">if</span>(idx==<span class="hljs-number">-1</span>)&#123;<br>                    p[<span class="hljs-number">2</span>]=p[<span class="hljs-number">0</span>];<br>                    <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">0</span>],&amp;p[<span class="hljs-number">2</span>]);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-type">bool</span> ret=isMatch(&amp;s[idx],&amp;p[<span class="hljs-number">2</span>]);<br>                    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> temp=<span class="hljs-number">0</span>;temp&lt;idx;temp++)&#123;<br>                        ret=ret|isMatch(&amp;s[temp],&amp;p[<span class="hljs-number">2</span>]);<br>                    &#125;<br>                    <span class="hljs-keyword">return</span> ret;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;*&#x27;</span>&amp;&amp;p[<span class="hljs-number">0</span>]==<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>        <span class="hljs-type">bool</span> ret=<span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span>(p[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;\0&#x27;</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(p[<span class="hljs-number">2</span>]==<span class="hljs-string">&#x27;.&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(p[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                p[<span class="hljs-number">1</span>]=p[<span class="hljs-number">0</span>];<br>                p[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;*&#x27;</span>;<br>                <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">1</span>],&amp;p[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">1</span>],&amp;p[<span class="hljs-number">2</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span>(p[<span class="hljs-number">3</span>]==<span class="hljs-string">&#x27;*&#x27;</span>)&#123;<br>                p[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">0</span>],&amp;p[<span class="hljs-number">2</span>]);<br>            &#125;<br>            <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span>(s[j]!=<span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>                <span class="hljs-keyword">if</span>(s[j]==p[<span class="hljs-number">2</span>])&#123;<br>                    ret=ret|isMatch(&amp;s[j],&amp;p[<span class="hljs-number">2</span>]);<br>                    flag*=<span class="hljs-number">0</span>;<br>                &#125;<br>                j++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>-flag)*ret;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//p[1]!=&#x27;*&#x27;&amp;&amp;p[0]==&#x27;.&#x27;</span><br>        <span class="hljs-keyword">return</span> isMatch(&amp;s[<span class="hljs-number">1</span>],&amp;p[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>不愧是困难题目</li><li>采取递归的方式逐步前进</li><li>首先查看是否是空字符串<ol><li>都空，匹配成功；</li><li>字符串不空，正则空，匹配失败；</li><li>字符串空，正则不空，查看是否是带有<code>*</code>，消去一个<code>*</code>然后递归查看。</li></ol></li><li>查看第一个和第二个正则字符：<ol><li>如果第一个不是<code>.</code>，第二个不是<code>*</code> :5</li><li>如果第一个不是<code>.</code>，第二个是<code>*</code> ：6</li><li>如果第一个是<code>.</code>，第二个是<code>*</code> ：7</li><li>如果第一个是<code>.</code>，第二个不是<code>*</code> ：8</li></ol></li><li>如果字符串第一个相同，则对第二个字符开始部分进行查看，否则不匹配；</li><li>先考察开头是否相同，对于不同的，则消去正则开头的一组<code>*</code>，然后递归调用匹配函数；如果相同，则考察正则式第一个<code>*</code>前后是否相同：如果相同，查看第一组<code>*</code>后面是否跟着一组<code>*</code> ，是的话则消去第一组，没有的话则将第一组<code>*</code>后移一个字符，同时删去字符串的首个字符，递归调用；如果<code>*</code>前后不同：<ol><li>如果仅有一组<code>*</code> ，那么根据字符串中有无与首部不同的字符直接返回对应值；</li><li>如果存在第二组值，且第二组不为<code>*</code>，那么在字符串中查找该字符第一次出现的位置idx，将消掉第一组0，1，2，…，idx-1个的字符串匹配结果或起来，进行返回；</li><li>此外则是第二组也是<code>*</code>，则先从字符串找到第一个与正则式第一个不同的位置idx，和6.2相同做法，或起来作为返回值，如果全部相同，那么后移第一组<code>*</code>占据第二组的位置，递归调用。</li></ol></li><li>如果仅有上述那么多，则匹配成功；否则，考察第三个是否为<code>.</code>，如果是，则考察第四个是否为<code>*</code>，如果也是，则移去第一组，递归调用，如果不是，则字符串消去第一个值，正则式第一组<code>*</code>覆盖第二组的单个<code>.</code>；如果第二组不是<code>.</code>开头，考察第四位，若为<code>*</code>则用第一组的万能匹配覆盖第二组的特定闭包，递归调用；若不是，则找到字符串中每个包含正则式第三位值的位置，对所有可能性取或进行返回，如果一个也没有，则匹配失败。</li><li>各前进一位，递归调用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>困难</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：9</title>
    <link href="/2022/03/13/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A9/"/>
    <url>/2022/03/13/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A9/</url>
    
    <content type="html"><![CDATA[<h4 id="9-Palindrome-Number"><a href="#9-Palindrome-Number" class="headerlink" title="9. Palindrome Number"></a>9. Palindrome Number</h4><p>Given an integer <code>x</code>, return <code>true</code> if <code>x</code> is palindrome integer.</p><p>An integer is a <strong>palindrome</strong> when it reads the same backward as forward.</p><ul><li>For example, <code>121</code> is a palindrome while <code>123</code> is not.</li></ul><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: x = <span class="hljs-number">121</span><br><span class="hljs-type">Output</span>: true<br><span class="hljs-type">Explanation</span>: <span class="hljs-number">121</span> reads <span class="hljs-keyword">as</span> <span class="hljs-number">121</span> from left to right and from right to left.<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: x = <span class="hljs-number">-121</span><br><span class="hljs-type">Output</span>: false<br><span class="hljs-type">Explanation</span>: <span class="hljs-type">From</span> left to right, it reads <span class="hljs-number">-121.</span> <span class="hljs-type">From</span> right to left, it becomes <span class="hljs-number">121</span>-. <span class="hljs-type">Therefore</span> it is not a palindrome.<br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: x = <span class="hljs-number">10</span><br><span class="hljs-type">Output</span>: false<br><span class="hljs-type">Explanation</span>: <span class="hljs-type">Reads</span> <span class="hljs-number">01</span> from right to left. <span class="hljs-type">Therefore</span> it is not a palindrome.<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li>$-2^{31} &lt;&#x3D; x &lt;&#x3D; 2^{31} - 1$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/9.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(y&lt;x)&#123;<br>        y=y*<span class="hljs-number">10</span>+x%<span class="hljs-number">10</span>;<br>        x=x/<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(y==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(x==y||y/<span class="hljs-number">10</span>==x)<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>负数不属于回文，直接返回否定</li><li>我们定义一个初始化为0的变量，用于计算输入值的回文值，但是考虑到部分值会超出int的值，所以我们只计算后一半的倒序，与前一半进行比较；</li><li>以0结尾的值不可能为回文，且会影响计算，因此，第一次计算之后如果记录值为0，则返回否定；</li><li>当剩余长度不大于记录长度时，进行比较，根据长度的奇偶可能会使来着相等，或者记录长一位，据此返回。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：8</title>
    <link href="/2022/03/12/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A8/"/>
    <url>/2022/03/12/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A8/</url>
    
    <content type="html"><![CDATA[<h4 id="8-String-to-Integer-atoi"><a href="#8-String-to-Integer-atoi" class="headerlink" title="8. String to Integer (atoi)"></a>8. String to Integer (atoi)</h4><p>Implement the <code>myAtoi(string s)</code> function, which converts a string to a 32-bit signed integer (similar to C&#x2F;C++’s <code>atoi</code> function).</p><p>The algorithm for <code>myAtoi(string s)</code> is as follows:</p><ol><li>Read in and ignore any leading whitespace.</li><li>Check if the next character (if not already at the end of the string) is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.</li><li>Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.</li><li>Convert these digits into an integer (i.e. <code>&quot;123&quot; -&gt; 123</code>, <code>&quot;0032&quot; -&gt; 32</code>). If no digits were read, then the integer is <code>0</code>. Change the sign as necessary (from step 2).</li><li>If the integer is out of the 32-bit signed integer range <code>[-2^31, 2^31 - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2^31</code> should be clamped to <code>-2^31</code>, and integers greater than <code>2^31 - 1</code> should be clamped to <code>2^31 - 1</code>.</li><li>Return the integer as the final result.</li></ol><p><strong>Note:</strong></p><ul><li>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.</li><li><strong>Do not ignore</strong> any characters other than the leading whitespace or the rest of the string after the digits.</li></ul><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;42&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">42</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">The</span> underlined characters are what is read <span class="hljs-keyword">in</span>, the caret is the current reader position.<br><span class="hljs-type">Step</span> <span class="hljs-number">1</span>: <span class="hljs-string">&quot;42&quot;</span> (no characters read because there is no leading whitespace)<br>         ^<br><span class="hljs-type">Step</span> <span class="hljs-number">2</span>: <span class="hljs-string">&quot;42&quot;</span> (no characters read because there is neither a <span class="hljs-string">&#x27;-&#x27;</span> nor <span class="hljs-string">&#x27;+&#x27;</span>)<br>         ^<br><span class="hljs-type">Step</span> <span class="hljs-number">3</span>: <span class="hljs-string">&quot;42&quot;</span> (<span class="hljs-string">&quot;42&quot;</span> is read <span class="hljs-keyword">in</span>)<br>           ^<br><span class="hljs-type">The</span> parsed integer is <span class="hljs-number">42.</span><br><span class="hljs-type">Since</span> <span class="hljs-number">42</span> is <span class="hljs-keyword">in</span> the range [<span class="hljs-number">-231</span>, <span class="hljs-number">231</span> - <span class="hljs-number">1</span>], the final result is <span class="hljs-number">42.</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;   -42&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">-42</span><br><span class="hljs-type">Explanation</span>:<br><span class="hljs-type">Step</span> <span class="hljs-number">1</span>: <span class="hljs-string">&quot;   -42&quot;</span> (leading whitespace is read and ignored)<br>            ^<br><span class="hljs-type">Step</span> <span class="hljs-number">2</span>: <span class="hljs-string">&quot;   -42&quot;</span> (<span class="hljs-string">&#x27;-&#x27;</span> is read, so the result should be negative)<br>             ^<br><span class="hljs-type">Step</span> <span class="hljs-number">3</span>: <span class="hljs-string">&quot;   -42&quot;</span> (<span class="hljs-string">&quot;42&quot;</span> is read <span class="hljs-keyword">in</span>)<br>               ^<br><span class="hljs-type">The</span> parsed integer is <span class="hljs-number">-42.</span><br><span class="hljs-type">Since</span> <span class="hljs-number">-42</span> is <span class="hljs-keyword">in</span> the range [<span class="hljs-number">-231</span>, <span class="hljs-number">231</span> - <span class="hljs-number">1</span>], the final result is <span class="hljs-number">-42.</span><br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;4193 with words&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">4193</span><br><span class="hljs-type">Explanation</span>:<br><span class="hljs-type">Step</span> <span class="hljs-number">1</span>: <span class="hljs-string">&quot;4193 with words&quot;</span> (no characters read because there is no leading whitespace)<br>         ^<br><span class="hljs-type">Step</span> <span class="hljs-number">2</span>: <span class="hljs-string">&quot;4193 with words&quot;</span> (no characters read because there is neither a <span class="hljs-string">&#x27;-&#x27;</span> nor <span class="hljs-string">&#x27;+&#x27;</span>)<br>         ^<br><span class="hljs-type">Step</span> <span class="hljs-number">3</span>: <span class="hljs-string">&quot;4193 with words&quot;</span> (<span class="hljs-string">&quot;4193&quot;</span> is read <span class="hljs-keyword">in</span>; reading stops because the next character is a non-digit)<br>             ^<br><span class="hljs-type">The</span> parsed integer is <span class="hljs-number">4193.</span><br><span class="hljs-type">Since</span> <span class="hljs-number">4193</span> is <span class="hljs-keyword">in</span> the range [<span class="hljs-number">-231</span>, <span class="hljs-number">231</span> - <span class="hljs-number">1</span>], the final result is <span class="hljs-number">4193.</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li><code>0 &lt;= s.length &lt;= 200</code></li><li><code>s</code> consists of English letters (lower-case and upper-case), digits (<code>0-9</code>), <code>&#39; &#39;</code>, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, and <code>&#39;.&#39;</code>.</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/8.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> up 2147483647</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> bottom -2147483648</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 201</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">myAtoi</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span>&#123;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(s[index]&amp;&amp;s[index]==<span class="hljs-string">&#x27; &#x27;</span>)index++;<br>    <span class="hljs-keyword">if</span>(s[index]==<span class="hljs-string">&#x27;+&#x27;</span>)&#123;<br>        index++;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s[index]==<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>        index++;<br>        flag=<span class="hljs-number">-1</span>;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(cnt&gt;<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(flag&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">while</span>(s[index]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[index]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ret&lt;up/<span class="hljs-number">10</span>)ret=ret*<span class="hljs-number">10</span>+(s[index++]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret==up/<span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">if</span>(s[index]&lt;=<span class="hljs-string">&#x27;7&#x27;</span>)ret=ret*<span class="hljs-number">10</span>+(s[index++]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> up;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> up;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">while</span>(s[index]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;s[index]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>)&#123;<br>            <span class="hljs-keyword">if</span>(ret&gt;bottom/<span class="hljs-number">10</span>)ret=ret*<span class="hljs-number">10</span>-(s[index++]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(ret==bottom/<span class="hljs-number">10</span>)&#123;<br>                <span class="hljs-keyword">if</span>(s[index]&lt;=<span class="hljs-string">&#x27;8&#x27;</span>)ret=ret*<span class="hljs-number">10</span>-(s[index++]-<span class="hljs-string">&#x27;0&#x27;</span>);<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> bottom;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> bottom;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>借助一个<strong>int</strong>型标记当前位置；</li><li>首先通过循环去掉开头的空格；</li><li>然后判断是否存在符号，记录符号数目以及最后一个符号的类型，如果：<ol><li>多个符号，返回<strong>0</strong></li><li>单个或者一个，继续读取数字；</li></ol></li><li>根据符号判断正负，分别进行计算：</li><li>每次读取一个数字，将已有数字与上下界的十分之一比较：<ol><li>小于其十分之一，将原数字*<strong>10</strong>后加上新读入数字</li><li>等于十分之一，查看新数字与其尾数大小关系：<ol><li>小于其尾数，如5.1</li><li>否则根据正负返回上界或者下界</li></ol></li><li>大于十分之一，如5.2.2</li></ol></li><li>如果读到的不是数字，则退出循环，返回得到的数字</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：7</title>
    <link href="/2022/03/12/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A7/"/>
    <url>/2022/03/12/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A7/</url>
    
    <content type="html"><![CDATA[<h4 id="7-Reverse-Integer"><a href="#7-Reverse-Integer" class="headerlink" title="7. Reverse Integer"></a>7. Reverse Integer</h4><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> with its digits reversed. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range $[-2^{31}, 2^{31} - 1]$, then return <code>0</code>.</p><p><strong>Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</strong></p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: x = <span class="hljs-number">123</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">321</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: x = <span class="hljs-number">-123</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">-321</span><br></code></pre></td></tr></table></figure><h5 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: x = <span class="hljs-number">120</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li>$-2^{31}&lt;&#x3D;x&lt;&#x3D; 2^{31} - 1$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/7.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(x&lt;<span class="hljs-number">0</span>)flag=<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x!=<span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(ret&lt;=<span class="hljs-number">214748364</span>&amp;&amp;ret&gt;=<span class="hljs-number">-214748364</span>)ret=flag*(x%<span class="hljs-number">10</span>)+ret*<span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        x=x/<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> flag*ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>采取的方法是取模加到返回值末尾；</li><li>需要注意的是原先的数字倒过来之后可能就不在范围内了，因此返回值<code>*10</code>之前需要先判断大小；</li><li>倒序后不在范围内的值直接返回<code>0</code>即可。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>困难</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：6</title>
    <link href="/2022/03/11/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A6/"/>
    <url>/2022/03/11/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A6/</url>
    
    <content type="html"><![CDATA[<h4 id="6-ZigZag-Conversion"><a href="#6-ZigZag-Conversion" class="headerlink" title="6. ZigZag Conversion"></a>6. ZigZag Conversion</h4><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">P</span>   <span class="hljs-selector-tag">A</span>   H   N<br><span class="hljs-selector-tag">A</span> <span class="hljs-selector-tag">P</span> L S <span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">I</span> G<br>Y   <span class="hljs-selector-tag">I</span>   R<br></code></pre></td></tr></table></figure><p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p><p>Write the code that will take a string and make this conversion given a number of rows:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> <span class="hljs-title function_">convert</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s, <span class="hljs-type">int</span> numRows)</span>;<br></code></pre></td></tr></table></figure><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span>, numRows = <span class="hljs-number">3</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;PAHNAPLSIIGYIR&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;PAYPALISHIRING&quot;</span>, numRows = <span class="hljs-number">4</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;PINALSIGYAHRPI&quot;</span><br><span class="hljs-type">Explanation</span>:<br><span class="hljs-type">P</span>     <span class="hljs-type">I</span>    <span class="hljs-type">N</span><br><span class="hljs-type">A</span>   <span class="hljs-type">L</span> <span class="hljs-type">S</span>  <span class="hljs-type">I</span> <span class="hljs-type">G</span><br><span class="hljs-type">Y</span> <span class="hljs-type">A</span>   <span class="hljs-type">H</span> <span class="hljs-type">R</span><br><span class="hljs-type">P</span>     <span class="hljs-type">I</span><br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;A&quot;</span>, numRows = <span class="hljs-number">1</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;A&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li>$1 &lt;&#x3D; s.length &lt;&#x3D; 1000$</li><li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code></li><li>$1 &lt;&#x3D; numRows &lt;&#x3D; 1000$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/6.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">convert</span><span class="hljs-params">(<span class="hljs-type">char</span> * s, <span class="hljs-type">int</span> numRows)</span>&#123;<br>    <span class="hljs-keyword">if</span>(numRows==<span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> s;<br>    <span class="hljs-type">int</span> step=(numRows<span class="hljs-number">-1</span>)*<span class="hljs-number">2</span>;<br>    <span class="hljs-type">char</span> *ret=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*<span class="hljs-number">1001</span>);<br>    <span class="hljs-built_in">memset</span>(ret,<span class="hljs-number">0</span>,<span class="hljs-number">1001</span>);<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>,start=<span class="hljs-number">0</span>,nap=step;<br>    <span class="hljs-keyword">for</span>(start=<span class="hljs-number">0</span>;start&lt;=step/<span class="hljs-number">2</span>;start++)&#123;<br>        nap=step-start;<br>        <span class="hljs-keyword">for</span>(i=start;i&lt;<span class="hljs-built_in">strlen</span>(s);i+=step)&#123;<br>            ret[j++]=s[i];<br>            <span class="hljs-keyword">if</span>(nap&lt;step&amp;&amp;nap&gt;step/<span class="hljs-number">2</span>&amp;&amp;i+nap-start&lt;<span class="hljs-built_in">strlen</span>(s))ret[j++]=s[i+nap-start];<br>        &#125;<br>    &#125;<br>    ret[j]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>对于每个行数，都有对应的周期；</li><li>每个周期内，第一行和最后一行都只有一个元素；中间各行都有两个元素；</li><li>于是根据行数计算出间隔，每次拷贝一个元素，最后进行返回；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：5</title>
    <link href="/2022/03/10/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A5/"/>
    <url>/2022/03/10/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A5/</url>
    
    <content type="html"><![CDATA[<h4 id="5-Longest-Palindromic-Substring"><a href="#5-Longest-Palindromic-Substring" class="headerlink" title="5. Longest Palindromic Substring"></a>5. Longest Palindromic Substring</h4><p>Given a string <code>s</code>, return <em>the longest palindromic substring</em> in <code>s</code>.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;babad&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;bab&quot;</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-string">&quot;aba&quot;</span> is also a valid answer.<br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;cbbd&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-string">&quot;bb&quot;</span><br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li>$1&lt;&#x3D;s.length&lt;&#x3D;1000$</li><li><code>s</code> consist of only digits and English letters.</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/5.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> * <span class="hljs-title function_">longestPalindrome</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span>&#123;<br>    <span class="hljs-type">int</span> a1=<span class="hljs-number">0</span>,a2=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> length=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> len=<span class="hljs-built_in">strlen</span>(s);<br>    <span class="hljs-type">int</span> start=<span class="hljs-number">0</span>,end=len<span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> flag=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(start&lt;len-length)&#123;<br>        <span class="hljs-keyword">while</span>(end-start+<span class="hljs-number">1</span>&gt;length)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=(end-start)/<span class="hljs-number">2</span>;i++)&#123;<br>                <span class="hljs-keyword">if</span>(s[start+i]!=s[end-i])&#123;<br>                    flag=<span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(flag)&#123;<br>                a1=start;<br>                a2=end;<br>                length=end-start+<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            end--;<br>            flag=<span class="hljs-number">1</span>;<br>        &#125;<br>        end=len<span class="hljs-number">-1</span>;<br>        start++;<br>        flag=<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> *ret=(<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>)*(length+<span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=a1;i&lt;=a2;i++)ret[i-a1]=s[i];<br>    ret[length]=<span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>这里采用的是每次改变头尾位置，判断串长度是否大于已知自反串的长度，如果更短，则剪枝；</li><li>如果更长，则判断是否自反，上面示例是采取首位比较的方式，比较到中间位置即可；</li><li>对于自反串，则记录新的长度和首尾位置</li><li>循环结束后，申请内存空间，将首位位置之间的串拷贝到新空间，返回地址；</li><li>这三点节省了搜索次数：<ol><li>在原字符串未检测长度小于已知自反串长度时就可以结束；</li><li>在检测的串已经出现了自反串后，该串的检测可以结束；</li><li>在检测串长度小于已知自反串长度后，该串可以结束检测；</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：4</title>
    <link href="/2022/03/09/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A4/"/>
    <url>/2022/03/09/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A4/</url>
    
    <content type="html"><![CDATA[<h4 id="4-Median-of-Two-Sorted-Arrays"><a href="#4-Median-of-Two-Sorted-Arrays" class="headerlink" title="4. Median of Two Sorted Arrays"></a>4. Median of Two Sorted Arrays</h4><p>Given two sorted arrays <code>nums1</code> and <code>nums2</code> of size <code>m</code> and <code>n</code> respectively, return <strong>the median</strong> of the two sorted arrays.</p><p>The overall run time complexity should be <code>O(log (m+n))</code>.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>], nums2 = [<span class="hljs-number">2</span>]<br><span class="hljs-type">Output</span>: <span class="hljs-number">2.00000</span><br><span class="hljs-type">Explanation</span>: merged array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] and median is <span class="hljs-number">2.</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: nums1 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>], nums2 = [<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><span class="hljs-type">Output</span>: <span class="hljs-number">2.50000</span><br><span class="hljs-type">Explanation</span>: merged array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>] and median is (<span class="hljs-number">2</span> + <span class="hljs-number">3</span>) / <span class="hljs-number">2</span> = <span class="hljs-number">2.5</span>.<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li>$nums1.legnth &#x3D;&#x3D; m$</li><li>$nums2.legnth &#x3D;&#x3D; n$</li><li>$0 &lt;&#x3D; m &lt;&#x3D;1000$</li><li>$0 &lt;&#x3D; n &lt;&#x3D; 1000$</li><li>$1 &lt;&#x3D; m+n &lt;&#x3D; 2000$</li><li>$-10^6 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 10^6$</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/4.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> <span class="hljs-title function_">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums1, <span class="hljs-type">int</span> nums1Size, <span class="hljs-type">int</span>* nums2, <span class="hljs-type">int</span> nums2Size)</span>&#123;<br>    <span class="hljs-type">int</span> sum=nums2Size+nums1Size;<br>    <span class="hljs-type">int</span> nums3[MAX+MAX]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> re=sum%<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> a1=<span class="hljs-number">0</span>,a2=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(a1&lt;nums1Size&amp;&amp;a2&lt;nums2Size)&#123;<br>        <span class="hljs-keyword">if</span>(nums1[a1]&lt;nums2[a2])nums3[index++]=nums1[a1++];<br>        <span class="hljs-keyword">else</span>(nums1[a1]&gt;nums2[a2])nums3[index++]=nums2[a2++];<br>    &#125;<br>    <span class="hljs-keyword">while</span>(a1&lt;nums1Size)nums3[index++]=nums1[a1++];<br>    <span class="hljs-keyword">while</span>(a2&lt;nums2Size)nums3[index++]=nums2[a2++];<br>    <span class="hljs-keyword">if</span>(re)&#123;<br>        index=(sum-re)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)nums3[index];<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        index=sum/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">return</span> ((<span class="hljs-type">double</span>)nums3[index]+(<span class="hljs-type">double</span>)nums3[index<span class="hljs-number">-1</span>])/<span class="hljs-number">2.0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>这题需要寻找中位数，要求的时间复杂度为$O(log(M+N)$，相当于将两个给定的数组遍历一遍；</li><li>可以真正生成一个新数组，是两个数组的归并，像上面代码示例，也可以标记的形式，获取对应数字即可，在源代码中有；</li><li>只需要针对大小进行指针的前进选择，到达对应位置即可找到；</li><li>需要分奇数偶数进行输出；</li><li>输出结果是五位小数的<code>double</code>。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>困难</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：3</title>
    <link href="/2022/03/08/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A3/"/>
    <url>/2022/03/08/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A3/</url>
    
    <content type="html"><![CDATA[<h4 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h4><p>Given a string <code>s</code>, find the length of the <strong>longest substring</strong> without repeating characters.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;abcabcbb&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">3</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">The</span> answer is <span class="hljs-string">&quot;abc&quot;</span>, with the length <span class="hljs-keyword">of</span> <span class="hljs-number">3.</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;bbbbb&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">1</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">The</span> answer is <span class="hljs-string">&quot;b&quot;</span>, with the length <span class="hljs-keyword">of</span> <span class="hljs-number">1.</span><br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: s = <span class="hljs-string">&quot;pwwkew&quot;</span><br><span class="hljs-type">Output</span>: <span class="hljs-number">3</span><br><span class="hljs-type">Explanation</span>: <span class="hljs-type">The</span> answer is <span class="hljs-string">&quot;wke&quot;</span>, with the length <span class="hljs-keyword">of</span> <span class="hljs-number">3.</span><br><span class="hljs-type">Notice</span> that the answer must be a substring, <span class="hljs-string">&quot;pwke&quot;</span> is a subsequence and not a substring.<br></code></pre></td></tr></table></figure><h5 id="Constraints"><a href="#Constraints" class="headerlink" title="Constraints"></a>Constraints</h5><ul><li>$0 &lt;&#x3D; s.length &lt;&#x3D; 5*10^4$</li><li><code>s</code> consists of English letters, digits, symbols and spaces</li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/3.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">char</span> x,<span class="hljs-type">char</span> *s,<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> end)</span>&#123;<br>    <span class="hljs-type">int</span> ret=<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=start;i&lt;=end;i++)&#123;<br>        <span class="hljs-keyword">if</span>(x==s[i])&#123;<br>            ret=i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLongestSubstring</span><span class="hljs-params">(<span class="hljs-type">char</span> * s)</span>&#123;<br>    <span class="hljs-type">int</span> length=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> temp=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> a=<span class="hljs-number">0</span>,b=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(b&lt;<span class="hljs-built_in">strlen</span>(s))&#123;<br>        b++;<br>        <span class="hljs-keyword">if</span>(find(s[b],s,a,b<span class="hljs-number">-1</span>)==<span class="hljs-number">-1</span>)&#123;<br>            temp=b-a;<br>            length=(temp&gt;length)?temp:length;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            temp=b-a;<br>            a=<span class="hljs-number">1</span>+find(s[b],s,a,b<span class="hljs-number">-1</span>);<br>            length=(temp&gt;length)?temp:length;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>从前往后依次读入一个字符，判断标定的字符串内是否存在该字符；</li><li>不存在则当前长度增加，与记录的最长长度比较，更新最长长度；</li><li>存在则移动标定字符串的头，直到不存在重复，更新当前长度和最长长度；</li><li>标定字符串尾到达总字符串尾部，结束；</li><li>每读入一个字符都要对前面进行搜索，故时间复杂度为$O(N^2)$</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：2</title>
    <link href="/2022/03/08/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A2/"/>
    <url>/2022/03/08/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A2/</url>
    
    <content type="html"><![CDATA[<h4 id="2-Add-Two-Numbers"><a href="#2-Add-Two-Numbers" class="headerlink" title="2. Add Two Numbers"></a>2. Add Two Numbers</h4><p>You are given two <strong>non-empty</strong> linked lists representing two non-negative integers. The digits are stored in <strong>reverse order</strong>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: l1=[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>], l2=[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">4</span>]<br><span class="hljs-type">Output</span>: [<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">8</span>]<br><span class="hljs-type">Explanation</span>: <span class="hljs-number">342</span>+<span class="hljs-number">465</span>=<span class="hljs-number">807</span><br></code></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: l1=[<span class="hljs-number">0</span>], l2=[<span class="hljs-number">0</span>]<br><span class="hljs-type">Output</span>: [<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>: l1=[<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>], l2=[<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>]<br><span class="hljs-type">Output</span>: [<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/2.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> ListNode* <span class="hljs-title function_">addTwoNumbers</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> ListNode* l1, <span class="hljs-keyword">struct</span> ListNode* l2)</span>&#123;<br>    <span class="hljs-type">int</span> increase=<span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">l3</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p3</span>=</span>l3;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p1</span>=</span>l1;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">p2</span>=</span>l2;<br>    <span class="hljs-keyword">while</span>(p1&amp;&amp;p2)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">new</span>;</span><br>        new=(<span class="hljs-keyword">struct</span> ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        new-&gt;val=p1-&gt;val+p2-&gt;val+increase;<br>        increase=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(new-&gt;val&gt;<span class="hljs-number">9</span>)&#123;<br>            new-&gt;val-=<span class="hljs-number">10</span>;<br>            increase+=<span class="hljs-number">1</span>;<br>        &#125;<br>        new-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(p3)p3-&gt;next=new;<br>        <span class="hljs-keyword">else</span> l3=new;<br>        p3=new;<br>        p2=p2-&gt;next;<br>        p1=p1-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p1)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">new</span>;</span><br>        new=(<span class="hljs-keyword">struct</span> ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        new-&gt;val=p1-&gt;val+increase;<br>        increase=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(new-&gt;val&gt;<span class="hljs-number">9</span>)&#123;<br>            new-&gt;val-=<span class="hljs-number">10</span>;<br>            increase+=<span class="hljs-number">1</span>;<br>        &#125;<br>        new-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(p3)p3-&gt;next=new;<br>        <span class="hljs-keyword">else</span> l3=new;<br>        p3=new;<br>        p1=p1-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(p2)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">new</span>;</span><br>        new=(<span class="hljs-keyword">struct</span> ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        new-&gt;val=p2-&gt;val+increase;<br>        increase=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(new-&gt;val&gt;<span class="hljs-number">9</span>)&#123;<br>            new-&gt;val-=<span class="hljs-number">10</span>;<br>            increase+=<span class="hljs-number">1</span>;<br>        &#125;<br>        new-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(p3)p3-&gt;next=new;<br>        <span class="hljs-keyword">else</span> l3=new;<br>        p3=new;<br>        p2=p2-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(increase)&#123;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> *<span class="hljs-title">new</span>;</span><br>        new=(<span class="hljs-keyword">struct</span> ListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> ListNode));<br>        new-&gt;val=increase;<br>        increase=<span class="hljs-number">0</span>;<br>        new-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span>(p3)p3-&gt;next=new;<br>        <span class="hljs-keyword">else</span> l3=new;<br>        p3=new;<br>    &#125;<br>    <span class="hljs-keyword">return</span> l3;    <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><ol><li>这是相当于对两个链表进行一次遍历，因此复杂度为$O(M+N)$;</li><li>需要注意的是进位可能从两个链表皆有余的情况进位给仅剩单个链表的情况，进而进位给原来没有的数位。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>中等</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>每日一题：1</title>
    <link href="/2022/03/08/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A1/"/>
    <url>/2022/03/08/leetcode/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98%EF%BC%9A1/</url>
    
    <content type="html"><![CDATA[<h4 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a>1. Two Sum</h4><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><h5 id="Example-1："><a href="#Example-1：" class="headerlink" title="Example 1："></a>Example 1：</h5><figure class="highlight elm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>：nums = [<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>], target = <span class="hljs-number">9</span><br><span class="hljs-type">Output</span>：[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br><span class="hljs-type">Explanation</span>：因为 nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] == <span class="hljs-number">9</span> ，返回 [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>] 。<br></code></pre></td></tr></table></figure><h5 id="Example-2："><a href="#Example-2：" class="headerlink" title="Example 2："></a>Example 2：</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>], target = <span class="hljs-number">6</span><br><span class="hljs-type">Output</span>：[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><h5 id="Example-3："><a href="#Example-3：" class="headerlink" title="Example 3："></a>Example 3：</h5><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-type">Input</span>：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>], target = <span class="hljs-number">6</span><br><span class="hljs-type">Output</span>：[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><h5 id="Constraints："><a href="#Constraints：" class="headerlink" title="Constraints："></a>Constraints：</h5><ul><li>$2 &lt;&#x3D; nums.length &lt;&#x3D; 104$</li><li>$-109 &lt;&#x3D; nums[i] &lt;&#x3D; 109$</li><li>$-109 &lt;&#x3D; target &lt;&#x3D; 109$</li><li><strong>Only one valid answer exists.</strong></li></ul><h5 id="Solution-code"><a href="#Solution-code" class="headerlink" title="Solution code"></a>Solution <a href="https://github.com/Yu-Qi-hang/Leetcode/blob/master/source/1.c">code</a></h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* <span class="hljs-title function_">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> numsSize, <span class="hljs-type">int</span> target, <span class="hljs-type">int</span>* returnSize)</span>&#123;<br>    <span class="hljs-keyword">if</span> (numsSize==<span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;numsSize<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(nums[numsSize<span class="hljs-number">-1</span>]+nums[i]==target)&#123;<br>            <span class="hljs-type">int</span> *result=(<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)*<span class="hljs-number">2</span>);<br>            result[<span class="hljs-number">0</span>]=i;<br>            result[<span class="hljs-number">1</span>]=numsSize<span class="hljs-number">-1</span>;<br>            *returnSize=<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> twoSum(nums,numsSize<span class="hljs-number">-1</span>,target,returnSize);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Note"><a href="#Note" class="headerlink" title="Note:"></a>Note:</h5><p>这种方式复杂度是$O(N^2)$，每次找到最后一个数字，判断前面每个数字与其相加是否符合，如果全部不符合，则标记的数组长度简短，逻辑上删除最后一个元素。</p><p>想要得到更优的复杂度，可以采取这样的方式：</p><ol><li>table_sort，对其进行大小排序的同时不打乱位置，在排序过程中采取quick_sort可以达到平均复杂度$O(NlgN)$；</li><li>排序后，分别从两头向中间逼近，如果两个和大于目标，则达头的指针内移，小于目标则小头指针内移；在遇到找到目标位置或者两个指针相遇后，离开循环，复杂度$O(N)$;</li><li>因此总的复杂度为$O(NlgN)$.</li><li>但是空间复杂度明显增加</li></ol>]]></content>
    
    
    <categories>
      
      <category>Leetcode每日一题</category>
      
      <category>简单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
      <tag>Leetcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国丝绸博物馆</title>
    <link href="/2022/02/26/trip/%E4%B8%AD%E5%9B%BD%E4%B8%9D%E7%BB%B8%E5%8D%9A%E7%89%A9%E9%A6%86/"/>
    <url>/2022/02/26/trip/%E4%B8%AD%E5%9B%BD%E4%B8%9D%E7%BB%B8%E5%8D%9A%E7%89%A9%E9%A6%86/</url>
    
    <content type="html"><![CDATA[        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-RFybswPs" src="//player.bilibili.com/player.html?bvid=BV1vb4y1p7k6&page=1&high_quality=1&danmaku=false"            allowfullscreen="no"            scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-RFybswPs").style.height=document.getElementById("mmedia-RFybswPs").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-RFybswPs").style.height=document.getElementById("mmedia-RFybswPs").scrollWidth*0.76+"px";            };        </script>        ]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>杭州</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>岩下村</title>
    <link href="/2022/02/03/trip/%E5%B2%A9%E4%B8%8B%E6%9D%91/"/>
    <url>/2022/02/03/trip/%E5%B2%A9%E4%B8%8B%E6%9D%91/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>台州</category>
      
      <category>春节纪</category>
      
      <category>2022春节纪</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西湖:二</title>
    <link href="/2021/05/01/trip/%E8%A5%BF%E6%B9%962/"/>
    <url>/2021/05/01/trip/%E8%A5%BF%E6%B9%962/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>杭州</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西溪湿地</title>
    <link href="/2021/03/06/trip/%E8%A5%BF%E6%BA%AA%E6%B9%BF%E5%9C%B0/"/>
    <url>/2021/03/06/trip/%E8%A5%BF%E6%BA%AA%E6%B9%BF%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<hr>        <style>.bbplayer{width: 100%; max-width: 850px; margin: auto}</style>        <div class="bbplayer">        <iframe class="bbplayer" id="mmedia-ZVsragpj" src="//player.bilibili.com/player.html?bvid=BV15p4y1h7PD&page=1&high_quality=1&danmaku=false"            allowfullscreen="no"            scrolling="no" frameborder="0" sandbox="allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups"></iframe>        </div>        <script>            document.getElementById("mmedia-ZVsragpj").style.height=document.getElementById("mmedia-ZVsragpj").scrollWidth*0.76+"px";            window.onresize = function(){              document.getElementById("mmedia-ZVsragpj").style.height=document.getElementById("mmedia-ZVsragpj").scrollWidth*0.76+"px";            };        </script>        ]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>杭州</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>桃渚古城</title>
    <link href="/2021/02/18/trip/%E6%A1%83%E6%B8%9A%E5%8F%A4%E5%9F%8E/"/>
    <url>/2021/02/18/trip/%E6%A1%83%E6%B8%9A%E5%8F%A4%E5%9F%8E/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>台州</category>
      
      <category>春节纪</category>
      
      <category>2021春节纪</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>西湖:一</title>
    <link href="/2019/08/16/trip/%E8%A5%BF%E6%B9%961/"/>
    <url>/2019/08/16/trip/%E8%A5%BF%E6%B9%961/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>世间行乐亦如此</category>
      
      <category>杭州</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游玩</tag>
      
      <tag>寻寻觅觅</tag>
      
      <tag>走走停停</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
